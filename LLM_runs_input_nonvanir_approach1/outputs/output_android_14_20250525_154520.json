[
    {
        "id": "ASB-A-316891059",
        "vulnerability_url": "https://api.osv.dev/v1/vulns/ASB-A-316891059",
        "severity": "High",
        "upstream_patch_content": "From 901880a1d2e632179eb4ac708fc4bc18d9d50791 Mon Sep 17 00:00:00 2001\nFrom: Jason Chiu <chiujason@google.com>\nDate: Wed, 31 Jan 2024 16:29:01 +0800\nSubject: [PATCH] Replace getCallingActivity() with getLaunchedFromPackage()\n\ngetLaunchedFromPackage() reports who launched this Activity or built\nPendingIntent used to launch it, whereas getCallingActivity() reports\nwho will get result of Activity.\n\nBug: 316891059\nTest: robotest, manual\nChange-Id: If97018c2741caef622f0596bbfeaa42ef1788b78\n---\n .../settings/search/SearchFeatureProvider.java |  2 +-\n .../search/SearchFeatureProviderImpl.java      | 18 ++++++++----------\n .../search/SearchResultTrampoline.java         | 13 ++++++-------\n .../search/SearchFeatureProviderImplTest.java  | 15 ++++++++-------\n 4 files changed, 23 insertions(+), 25 deletions(-)\n\ndiff --git a/src/com/android/settings/search/SearchFeatureProvider.java b/src/com/android/settings/search/SearchFeatureProvider.java\nindex 0741ce4b02c..b1d04d4398c 100644\n--- a/src/com/android/settings/search/SearchFeatureProvider.java\n+++ b/src/com/android/settings/search/SearchFeatureProvider.java\n@@ -56,7 +56,7 @@ public interface SearchFeatureProvider {\n      * @throws IllegalArgumentException when caller is null\n      * @throws SecurityException        when caller is not allowed to launch search result page\n      */\n-    void verifyLaunchSearchResultPageCaller(Context context, @NonNull ComponentName caller)\n+    void verifyLaunchSearchResultPageCaller(@NonNull Context context, @NonNull String callerPackage)\n             throws SecurityException, IllegalArgumentException;\n \n     /**\ndiff --git a/src/com/android/settings/search/SearchFeatureProviderImpl.java b/src/com/android/settings/search/SearchFeatureProviderImpl.java\nindex 6f909709058..3a62ddfb67e 100644\n--- a/src/com/android/settings/search/SearchFeatureProviderImpl.java\n+++ b/src/com/android/settings/search/SearchFeatureProviderImpl.java\n@@ -17,13 +17,14 @@\n \n package com.android.settings.search;\n \n-import android.content.ComponentName;\n import android.content.Context;\n import android.content.Intent;\n import android.net.Uri;\n import android.provider.Settings;\n import android.text.TextUtils;\n \n+import androidx.annotation.NonNull;\n+\n import com.android.settingslib.search.SearchIndexableResources;\n import com.android.settingslib.search.SearchIndexableResourcesMobile;\n \n@@ -32,21 +33,18 @@ import com.android.settingslib.search.SearchIndexableResourcesMobile;\n  */\n public class SearchFeatureProviderImpl implements SearchFeatureProvider {\n \n-    private static final String TAG = \"SearchFeatureProvider\";\n-\n     private SearchIndexableResources mSearchIndexableResources;\n \n     @Override\n-    public void verifyLaunchSearchResultPageCaller(Context context, ComponentName caller) {\n-        if (caller == null) {\n+    public void verifyLaunchSearchResultPageCaller(@NonNull Context context,\n+            @NonNull String callerPackage) {\n+        if (TextUtils.isEmpty(callerPackage)) {\n             throw new IllegalArgumentException(\"ExternalSettingsTrampoline intents \"\n                     + \"must be called with startActivityForResult\");\n         }\n-        final String packageName = caller.getPackageName();\n-        final boolean isSettingsPackage = TextUtils.equals(packageName, context.getPackageName())\n-                || TextUtils.equals(getSettingsIntelligencePkgName(context), packageName);\n-        final boolean isAllowlistedPackage =\n-                isSignatureAllowlisted(context, caller.getPackageName());\n+        final boolean isSettingsPackage = TextUtils.equals(callerPackage, context.getPackageName())\n+                || TextUtils.equals(getSettingsIntelligencePkgName(context), callerPackage);\n+        final boolean isAllowlistedPackage = isSignatureAllowlisted(context, callerPackage);\n         if (isSettingsPackage || isAllowlistedPackage) {\n             return;\n         }\ndiff --git a/src/com/android/settings/search/SearchResultTrampoline.java b/src/com/android/settings/search/SearchResultTrampoline.java\nindex 5d897af3b35..04d9db56eb7 100644\n--- a/src/com/android/settings/search/SearchResultTrampoline.java\n+++ b/src/com/android/settings/search/SearchResultTrampoline.java\n@@ -21,7 +21,6 @@ import static com.android.settings.SettingsActivity.EXTRA_SHOW_FRAGMENT_TAB;\n import static com.android.settings.activityembedding.EmbeddedDeepLinkUtils.getTrampolineIntent;\n \n import android.app.Activity;\n-import android.content.ComponentName;\n import android.content.Intent;\n import android.net.Uri;\n import android.os.Bundle;\n@@ -53,11 +52,11 @@ public class SearchResultTrampoline extends Activity {\n     protected void onCreate(Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n \n-        final ComponentName callingActivity = getCallingActivity();\n+        final String callerPackage = getLaunchedFromPackage();\n         // First make sure caller has privilege to launch a search result page.\n         FeatureFactory.getFeatureFactory()\n                 .getSearchFeatureProvider()\n-                .verifyLaunchSearchResultPageCaller(this, callingActivity);\n+                .verifyLaunchSearchResultPageCaller(this, callerPackage);\n         // Didn't crash, proceed and launch the result as a subsetting.\n         Intent intent = getIntent();\n         final String highlightMenuKey = intent.getStringExtra(\n@@ -106,7 +105,7 @@ public class SearchResultTrampoline extends Activity {\n         if (!ActivityEmbeddingUtils.isEmbeddingActivityEnabled(this)\n                 || ActivityEmbeddingUtils.isAlreadyEmbedded(this)) {\n             startActivity(intent);\n-        } else if (isSettingsIntelligence(callingActivity)) {\n+        } else if (isSettingsIntelligence(callerPackage)) {\n             if (FeatureFlagUtils.isEnabled(this, FeatureFlags.SETTINGS_SEARCH_ALWAYS_EXPAND)) {\n                 startActivity(getTrampolineIntent(intent, highlightMenuKey)\n                         .setClass(this, DeepLinkHomepageActivityInternal.class)\n@@ -139,9 +138,9 @@ public class SearchResultTrampoline extends Activity {\n         finish();\n     }\n \n-    private boolean isSettingsIntelligence(ComponentName callingActivity) {\n-        return callingActivity != null && TextUtils.equals(\n-                callingActivity.getPackageName(),\n+    private boolean isSettingsIntelligence(String callerPackage) {\n+        return TextUtils.equals(\n+                callerPackage,\n                 FeatureFactory.getFeatureFactory().getSearchFeatureProvider()\n                         .getSettingsIntelligencePkgName(this));\n     }\ndiff --git a/tests/robotests/src/com/android/settings/search/SearchFeatureProviderImplTest.java b/tests/robotests/src/com/android/settings/search/SearchFeatureProviderImplTest.java\nindex f3496001d09..8a7419bb1ba 100644\n--- a/tests/robotests/src/com/android/settings/search/SearchFeatureProviderImplTest.java\n+++ b/tests/robotests/src/com/android/settings/search/SearchFeatureProviderImplTest.java\n@@ -20,7 +20,6 @@ package com.android.settings.search;\n import static com.google.common.truth.Truth.assertThat;\n \n import android.app.settings.SettingsEnums;\n-import android.content.ComponentName;\n import android.content.Intent;\n import android.content.pm.ActivityInfo;\n import android.content.pm.ResolveInfo;\n@@ -131,20 +130,22 @@ public class SearchFeatureProviderImplTest {\n \n     @Test(expected = SecurityException.class)\n     public void verifyLaunchSearchResultPageCaller_badCaller_shouldCrash() {\n-        final ComponentName cn = new ComponentName(\"pkg\", \"class\");\n-        mProvider.verifyLaunchSearchResultPageCaller(mActivity, cn);\n+        final String packageName = \"pkg\";\n+\n+        mProvider.verifyLaunchSearchResultPageCaller(mActivity, packageName);\n     }\n \n     @Test\n     public void verifyLaunchSearchResultPageCaller_settingsCaller_shouldNotCrash() {\n-        final ComponentName cn = new ComponentName(mActivity.getPackageName(), \"class\");\n-        mProvider.verifyLaunchSearchResultPageCaller(mActivity, cn);\n+        final String packageName = mActivity.getPackageName();\n+\n+        mProvider.verifyLaunchSearchResultPageCaller(mActivity, packageName);\n     }\n \n     @Test\n     public void verifyLaunchSearchResultPageCaller_settingsIntelligenceCaller_shouldNotCrash() {\n         final String packageName = mProvider.getSettingsIntelligencePkgName(mActivity);\n-        final ComponentName cn = new ComponentName(packageName, \"class\");\n-        mProvider.verifyLaunchSearchResultPageCaller(mActivity, cn);\n+\n+        mProvider.verifyLaunchSearchResultPageCaller(mActivity, packageName);\n     }\n }\n-- \n2.39.5 (Apple Git-154)\n\n",
        "upstream_commits": [
            "901880a1d2e632179eb4ac708fc4bc18d9d50791"
        ],
        "upstream_patch_tokens": {
            "openai": 1803,
            "general": {
                "word_based": 751,
                "char_based": 2153
            },
            "gemini": 2289
        },
        "failures": [
            {
                "downstream_version": "14",
                "gemini_token_usage": 5474,
                "branch_used": "android14-release",
                "downstream_patch": "ddc11bc03ab48e885f652b89df5f92ff283bcd4a",
                "repo_path": "android_repos/Settings",
                "result": "failure",
                "downstream_patch_content": "commit ddc11bc03ab48e885f652b89df5f92ff283bcd4a\nAuthor: Jason Chiu <chiujason@google.com>\nDate:   Wed Jan 31 16:29:01 2024 +0800\n\n    Replace getCallingActivity() with getLaunchedFromPackage()\n    \n    getLaunchedFromPackage() reports who launched this Activity or built\n    PendingIntent used to launch it, whereas getCallingActivity() reports\n    who will get result of Activity.\n    \n    Bug: 316891059\n    Test: robotest, manual\n    Change-Id: If97018c2741caef622f0596bbfeaa42ef1788b78\n    Merged-In: If97018c2741caef622f0596bbfeaa42ef1788b78\n    (cherry picked from commit 901880a1d2e632179eb4ac708fc4bc18d9d50791)\n\ndiff --git a/src/com/android/settings/search/SearchFeatureProvider.java b/src/com/android/settings/search/SearchFeatureProvider.java\nindex cd096ec6e16..c2257b47c9e 100644\n--- a/src/com/android/settings/search/SearchFeatureProvider.java\n+++ b/src/com/android/settings/search/SearchFeatureProvider.java\n@@ -56,7 +56,7 @@ public interface SearchFeatureProvider {\n      * @throws IllegalArgumentException when caller is null\n      * @throws SecurityException        when caller is not allowed to launch search result page\n      */\n-    void verifyLaunchSearchResultPageCaller(Context context, @NonNull ComponentName caller)\n+    void verifyLaunchSearchResultPageCaller(@NonNull Context context, @NonNull String callerPackage)\n             throws SecurityException, IllegalArgumentException;\n \n     /**\ndiff --git a/src/com/android/settings/search/SearchFeatureProviderImpl.java b/src/com/android/settings/search/SearchFeatureProviderImpl.java\nindex 6f909709058..3a62ddfb67e 100644\n--- a/src/com/android/settings/search/SearchFeatureProviderImpl.java\n+++ b/src/com/android/settings/search/SearchFeatureProviderImpl.java\n@@ -17,13 +17,14 @@\n \n package com.android.settings.search;\n \n-import android.content.ComponentName;\n import android.content.Context;\n import android.content.Intent;\n import android.net.Uri;\n import android.provider.Settings;\n import android.text.TextUtils;\n \n+import androidx.annotation.NonNull;\n+\n import com.android.settingslib.search.SearchIndexableResources;\n import com.android.settingslib.search.SearchIndexableResourcesMobile;\n \n@@ -32,21 +33,18 @@ import com.android.settingslib.search.SearchIndexableResourcesMobile;\n  */\n public class SearchFeatureProviderImpl implements SearchFeatureProvider {\n \n-    private static final String TAG = \"SearchFeatureProvider\";\n-\n     private SearchIndexableResources mSearchIndexableResources;\n \n     @Override\n-    public void verifyLaunchSearchResultPageCaller(Context context, ComponentName caller) {\n-        if (caller == null) {\n+    public void verifyLaunchSearchResultPageCaller(@NonNull Context context,\n+            @NonNull String callerPackage) {\n+        if (TextUtils.isEmpty(callerPackage)) {\n             throw new IllegalArgumentException(\"ExternalSettingsTrampoline intents \"\n                     + \"must be called with startActivityForResult\");\n         }\n-        final String packageName = caller.getPackageName();\n-        final boolean isSettingsPackage = TextUtils.equals(packageName, context.getPackageName())\n-                || TextUtils.equals(getSettingsIntelligencePkgName(context), packageName);\n-        final boolean isAllowlistedPackage =\n-                isSignatureAllowlisted(context, caller.getPackageName());\n+        final boolean isSettingsPackage = TextUtils.equals(callerPackage, context.getPackageName())\n+                || TextUtils.equals(getSettingsIntelligencePkgName(context), callerPackage);\n+        final boolean isAllowlistedPackage = isSignatureAllowlisted(context, callerPackage);\n         if (isSettingsPackage || isAllowlistedPackage) {\n             return;\n         }\ndiff --git a/src/com/android/settings/search/SearchResultTrampoline.java b/src/com/android/settings/search/SearchResultTrampoline.java\nindex 6ba0338bfc9..504e2985742 100644\n--- a/src/com/android/settings/search/SearchResultTrampoline.java\n+++ b/src/com/android/settings/search/SearchResultTrampoline.java\n@@ -20,7 +20,6 @@ import static com.android.settings.SettingsActivity.EXTRA_SHOW_FRAGMENT_ARGUMENT\n import static com.android.settings.SettingsActivity.EXTRA_SHOW_FRAGMENT_TAB;\n \n import android.app.Activity;\n-import android.content.ComponentName;\n import android.content.Intent;\n import android.net.Uri;\n import android.os.Bundle;\n@@ -52,11 +51,11 @@ public class SearchResultTrampoline extends Activity {\n     protected void onCreate(Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n \n-        final ComponentName callingActivity = getCallingActivity();\n+        final String callerPackage = getLaunchedFromPackage();\n         // First make sure caller has privilege to launch a search result page.\n         FeatureFactory.getFactory(this)\n                 .getSearchFeatureProvider()\n-                .verifyLaunchSearchResultPageCaller(this, callingActivity);\n+                .verifyLaunchSearchResultPageCaller(this, callerPackage);\n         // Didn't crash, proceed and launch the result as a subsetting.\n         Intent intent = getIntent();\n         final String highlightMenuKey = intent.getStringExtra(\n@@ -105,7 +104,7 @@ public class SearchResultTrampoline extends Activity {\n         if (!ActivityEmbeddingUtils.isEmbeddingActivityEnabled(this)\n                 || ActivityEmbeddingUtils.isAlreadyEmbedded(this)) {\n             startActivity(intent);\n-        } else if (isSettingsIntelligence(callingActivity)) {\n+        } else if (isSettingsIntelligence(callerPackage)) {\n             if (FeatureFlagUtils.isEnabled(this, FeatureFlags.SETTINGS_SEARCH_ALWAYS_EXPAND)) {\n                 startActivity(SettingsActivity.getTrampolineIntent(intent, highlightMenuKey)\n                         .setClass(this, DeepLinkHomepageActivityInternal.class)\n@@ -138,9 +137,9 @@ public class SearchResultTrampoline extends Activity {\n         finish();\n     }\n \n-    private boolean isSettingsIntelligence(ComponentName callingActivity) {\n-        return callingActivity != null && TextUtils.equals(\n-                callingActivity.getPackageName(),\n+    private boolean isSettingsIntelligence(String callerPackage) {\n+        return TextUtils.equals(\n+                callerPackage,\n                 FeatureFactory.getFactory(this).getSearchFeatureProvider()\n                         .getSettingsIntelligencePkgName(this));\n     }\ndiff --git a/tests/robotests/src/com/android/settings/search/SearchFeatureProviderImplTest.java b/tests/robotests/src/com/android/settings/search/SearchFeatureProviderImplTest.java\nindex 0aa49eb6d68..7a1b2606a92 100644\n--- a/tests/robotests/src/com/android/settings/search/SearchFeatureProviderImplTest.java\n+++ b/tests/robotests/src/com/android/settings/search/SearchFeatureProviderImplTest.java\n@@ -20,7 +20,6 @@ package com.android.settings.search;\n import static com.google.common.truth.Truth.assertThat;\n \n import android.app.settings.SettingsEnums;\n-import android.content.ComponentName;\n import android.content.Intent;\n import android.content.pm.ActivityInfo;\n import android.content.pm.ResolveInfo;\n@@ -136,20 +135,22 @@ public class SearchFeatureProviderImplTest {\n \n     @Test(expected = SecurityException.class)\n     public void verifyLaunchSearchResultPageCaller_badCaller_shouldCrash() {\n-        final ComponentName cn = new ComponentName(\"pkg\", \"class\");\n-        mProvider.verifyLaunchSearchResultPageCaller(mActivity, cn);\n+        final String packageName = \"pkg\";\n+\n+        mProvider.verifyLaunchSearchResultPageCaller(mActivity, packageName);\n     }\n \n     @Test\n     public void verifyLaunchSearchResultPageCaller_settingsCaller_shouldNotCrash() {\n-        final ComponentName cn = new ComponentName(mActivity.getPackageName(), \"class\");\n-        mProvider.verifyLaunchSearchResultPageCaller(mActivity, cn);\n+        final String packageName = mActivity.getPackageName();\n+\n+        mProvider.verifyLaunchSearchResultPageCaller(mActivity, packageName);\n     }\n \n     @Test\n     public void verifyLaunchSearchResultPageCaller_settingsIntelligenceCaller_shouldNotCrash() {\n         final String packageName = mProvider.getSettingsIntelligencePkgName(mActivity);\n-        final ComponentName cn = new ComponentName(packageName, \"class\");\n-        mProvider.verifyLaunchSearchResultPageCaller(mActivity, cn);\n+\n+        mProvider.verifyLaunchSearchResultPageCaller(mActivity, packageName);\n     }\n }\n",
                "downstream_patch_tokens": {
                    "openai": 1752,
                    "general": {
                        "word_based": 722,
                        "char_based": 2098
                    },
                    "gemini": 2245
                },
                "file_conflicts": [
                    {
                        "file_name": "src/com/android/settings/search/SearchResultTrampoline.java",
                        "total_hunks": 4,
                        "failed_hunks": [
                            2,
                            4
                        ],
                        "inline_merge_conflicts": [],
                        "inline_merge_token_summary": {
                            "gemini": 0,
                            "openai": 0,
                            "general_word": 0,
                            "general_char": 0
                        },
                        "rej_file_content": "```diff\n--- src/com/android/settings/search/SearchResultTrampoline.java\n+++ src/com/android/settings/search/SearchResultTrampoline.java\n@@ -52,11 +51,11 @@ public class SearchResultTrampoline extends Activity {\n     protected void onCreate(Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n \n-        final ComponentName callingActivity = getCallingActivity();\n+        final String callerPackage = getLaunchedFromPackage();\n         // First make sure caller has privilege to launch a search result page.\n         FeatureFactory.getFeatureFactory()\n                 .getSearchFeatureProvider()\n-                .verifyLaunchSearchResultPageCaller(this, callingActivity);\n+                .verifyLaunchSearchResultPageCaller(this, callerPackage);\n         // Didn't crash, proceed and launch the result as a subsetting.\n         Intent intent = getIntent();\n         final String highlightMenuKey = intent.getStringExtra(\n@@ -138,9 +137,9 @@ public class SearchResultTrampoline extends Activity {\n         finish();\n     }\n \n-    private boolean isSettingsIntelligence(ComponentName callingActivity) {\n-        return callingActivity != null && TextUtils.equals(\n-                callingActivity.getPackageName(),\n+    private boolean isSettingsIntelligence(String callerPackage) {\n+        return TextUtils.equals(\n+                callerPackage,\n                 FeatureFactory.getFeatureFactory().getSearchFeatureProvider()\n                         .getSettingsIntelligencePkgName(this));\n     }\n```",
                        "rej_file_tokens": {
                            "openai": 277,
                            "general": {
                                "word_based": 115,
                                "char_based": 378
                            },
                            "gemini": 335
                        },
                        "patch_apply_output": "patching file src/com/android/settings/search/SearchFeatureProvider.java\npatching file src/com/android/settings/search/SearchFeatureProviderImpl.java\npatching file src/com/android/settings/search/SearchResultTrampoline.java\nHunk #1 succeeded at 20 with fuzz 1 (offset -1 lines).\nHunk #2 FAILED at 52.\nHunk #3 succeeded at 104 with fuzz 2 (offset -1 lines).\nHunk #4 FAILED at 138.\n2 out of 4 hunks FAILED -- saving rejects to file src/com/android/settings/search/SearchResultTrampoline.java.rej",
                        "inline_merge_output": "patching file src/com/android/settings/search/SearchResultTrampoline.java\nHunk #1 already applied at 24.\nHunk #2 already applied at 55,59.\nHunk #3 already applied at 108.\nHunk #4 already applied at 141-143.",
                        "upstream_file_content": "```java\n/*\n * Copyright (C) 2017 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.android.settings.search;\n\nimport static com.android.settings.SettingsActivity.EXTRA_SHOW_FRAGMENT_ARGUMENTS;\nimport static com.android.settings.SettingsActivity.EXTRA_SHOW_FRAGMENT_TAB;\nimport static com.android.settings.activityembedding.EmbeddedDeepLinkUtils.getTrampolineIntent;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.provider.Settings;\nimport android.text.TextUtils;\nimport android.util.FeatureFlagUtils;\nimport android.util.Log;\n\nimport com.android.settings.SettingsActivity;\nimport com.android.settings.SettingsApplication;\nimport com.android.settings.SubSettings;\nimport com.android.settings.activityembedding.ActivityEmbeddingRulesController;\nimport com.android.settings.activityembedding.ActivityEmbeddingUtils;\nimport com.android.settings.core.FeatureFlags;\nimport com.android.settings.homepage.DeepLinkHomepageActivityInternal;\nimport com.android.settings.homepage.SettingsHomepageActivity;\nimport com.android.settings.overlay.FeatureFactory;\n\nimport java.net.URISyntaxException;\n\n/**\n * A trampoline activity that launches setting result page.\n */\npublic class SearchResultTrampoline extends Activity {\n\n    private static final String TAG = \"SearchResultTrampoline\";\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        final String callerPackage = getLaunchedFromPackage();\n        // First make sure caller has privilege to launch a search result page.\n        FeatureFactory.getFeatureFactory()\n                .getSearchFeatureProvider()\n                .verifyLaunchSearchResultPageCaller(this, callerPackage);\n        // Didn't crash, proceed and launch the result as a subsetting.\n        Intent intent = getIntent();\n        final String highlightMenuKey = intent.getStringExtra(\n                Settings.EXTRA_SETTINGS_EMBEDDED_DEEP_LINK_HIGHLIGHT_MENU_KEY);\n\n        final String fragment = intent.getStringExtra(SettingsActivity.EXTRA_SHOW_FRAGMENT);\n        if (!TextUtils.isEmpty(fragment)) {\n            // Hack to take EXTRA_FRAGMENT_ARG_KEY from intent and set into\n            // EXTRA_SHOW_FRAGMENT_ARGUMENTS. This is necessary because intent could be from\n            // external caller and args may not persisted.\n            final String settingKey = intent.getStringExtra(\n                    SettingsActivity.EXTRA_FRAGMENT_ARG_KEY);\n            final int tab = intent.getIntExtra(EXTRA_SHOW_FRAGMENT_TAB, 0);\n            final Bundle args = new Bundle();\n            args.putString(SettingsActivity.EXTRA_FRAGMENT_ARG_KEY, settingKey);\n            args.putInt(EXTRA_SHOW_FRAGMENT_TAB, tab);\n            intent.putExtra(EXTRA_SHOW_FRAGMENT_ARGUMENTS, args);\n\n            // Reroute request to SubSetting.\n            intent.setClass(this /* context */, SubSettings.class);\n        } else {\n            // Direct link case\n            final String intentUriString = intent.getStringExtra(\n                    Settings.EXTRA_SETTINGS_EMBEDDED_DEEP_LINK_INTENT_URI);\n            if (TextUtils.isEmpty(intentUriString)) {\n                Log.e(TAG, \"No EXTRA_SETTINGS_EMBEDDED_DEEP_LINK_INTENT_URI for deep link\");\n                finish();\n                return;\n            }\n\n            final Uri data = intent.getParcelableExtra(\n                    SettingsHomepageActivity.EXTRA_SETTINGS_LARGE_SCREEN_DEEP_LINK_INTENT_DATA,\n                    Uri.class);\n            try {\n                intent = Intent.parseUri(intentUriString, Intent.URI_INTENT_SCHEME);\n                intent.setData(data);\n            } catch (URISyntaxException e) {\n                Log.e(TAG, \"Failed to parse deep link intent: \" + e);\n                finish();\n                return;\n            }\n        }\n\n        intent.addFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT);\n\n        if (!ActivityEmbeddingUtils.isEmbeddingActivityEnabled(this)\n                || ActivityEmbeddingUtils.isAlreadyEmbedded(this)) {\n            startActivity(intent);\n        } else if (isSettingsIntelligence(callerPackage)) {\n            if (FeatureFlagUtils.isEnabled(this, FeatureFlags.SETTINGS_SEARCH_ALWAYS_EXPAND)) {\n                startActivity(getTrampolineIntent(intent, highlightMenuKey)\n                        .setClass(this, DeepLinkHomepageActivityInternal.class)\n                        .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK\n                                | Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS));\n            } else {\n                // Register SplitPairRule for SubSettings, set clearTop false to prevent unexpected\n                // back navigation behavior.\n                ActivityEmbeddingRulesController.registerSubSettingsPairRule(this,\n                        false /* clearTop */);\n\n                intent.setFlags(intent.getFlags() & ~Intent.FLAG_ACTIVITY_NEW_TASK);\n                startActivity(intent);\n\n                // Pass menu key to homepage\n                final SettingsHomepageActivity homeActivity =\n                        ((SettingsApplication) getApplicationContext()).getHomeActivity();\n                if (homeActivity != null) {\n                    homeActivity.getMainFragment().setHighlightMenuKey(highlightMenuKey,\n                            /* scrollNeeded= */ true);\n                }\n            }\n        } else {\n            // Two-pane case\n            startActivity(getTrampolineIntent(intent, highlightMenuKey)\n                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));\n        }\n\n        // Done.\n        finish();\n    }\n\n    private boolean isSettingsIntelligence(String callerPackage) {\n        return TextUtils.equals(\n                callerPackage,\n                FeatureFactory.getFeatureFactory().getSearchFeatureProvider()\n                        .getSettingsIntelligencePkgName(this));\n    }\n}\n```",
                        "upstream_file_tokens": {
                            "openai": 1137,
                            "general": {
                                "word_based": 526,
                                "char_based": 1616
                            },
                            "gemini": 1451
                        },
                        "downstream_file_content": "```java\n/*\n * Copyright (C) 2017 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.android.settings.search;\n\nimport static com.android.settings.SettingsActivity.EXTRA_SHOW_FRAGMENT_ARGUMENTS;\nimport static com.android.settings.SettingsActivity.EXTRA_SHOW_FRAGMENT_TAB;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.provider.Settings;\nimport android.text.TextUtils;\nimport android.util.FeatureFlagUtils;\nimport android.util.Log;\n\nimport com.android.settings.SettingsActivity;\nimport com.android.settings.SettingsApplication;\nimport com.android.settings.SubSettings;\nimport com.android.settings.activityembedding.ActivityEmbeddingRulesController;\nimport com.android.settings.activityembedding.ActivityEmbeddingUtils;\nimport com.android.settings.core.FeatureFlags;\nimport com.android.settings.homepage.DeepLinkHomepageActivityInternal;\nimport com.android.settings.homepage.SettingsHomepageActivity;\nimport com.android.settings.overlay.FeatureFactory;\n\nimport java.net.URISyntaxException;\n\n/**\n * A trampoline activity that launches setting result page.\n */\npublic class SearchResultTrampoline extends Activity {\n\n    private static final String TAG = \"SearchResultTrampoline\";\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        final ComponentName callingActivity = getCallingActivity();\n        // First make sure caller has privilege to launch a search result page.\n        FeatureFactory.getFactory(this)\n                .getSearchFeatureProvider()\n                .verifyLaunchSearchResultPageCaller(this, callingActivity);\n        // Didn't crash, proceed and launch the result as a subsetting.\n        Intent intent = getIntent();\n        final String highlightMenuKey = intent.getStringExtra(\n                Settings.EXTRA_SETTINGS_EMBEDDED_DEEP_LINK_HIGHLIGHT_MENU_KEY);\n\n        final String fragment = intent.getStringExtra(SettingsActivity.EXTRA_SHOW_FRAGMENT);\n        if (!TextUtils.isEmpty(fragment)) {\n            // Hack to take EXTRA_FRAGMENT_ARG_KEY from intent and set into\n            // EXTRA_SHOW_FRAGMENT_ARGUMENTS. This is necessary because intent could be from\n            // external caller and args may not persisted.\n            final String settingKey = intent.getStringExtra(\n                    SettingsActivity.EXTRA_FRAGMENT_ARG_KEY);\n            final int tab = intent.getIntExtra(EXTRA_SHOW_FRAGMENT_TAB, 0);\n            final Bundle args = new Bundle();\n            args.putString(SettingsActivity.EXTRA_FRAGMENT_ARG_KEY, settingKey);\n            args.putInt(EXTRA_SHOW_FRAGMENT_TAB, tab);\n            intent.putExtra(EXTRA_SHOW_FRAGMENT_ARGUMENTS, args);\n\n            // Reroute request to SubSetting.\n            intent.setClass(this /* context */, SubSettings.class);\n        } else {\n            // Direct link case\n            final String intentUriString = intent.getStringExtra(\n                    Settings.EXTRA_SETTINGS_EMBEDDED_DEEP_LINK_INTENT_URI);\n            if (TextUtils.isEmpty(intentUriString)) {\n                Log.e(TAG, \"No EXTRA_SETTINGS_EMBEDDED_DEEP_LINK_INTENT_URI for deep link\");\n                finish();\n                return;\n            }\n\n            final Uri data = intent.getParcelableExtra(\n                    SettingsHomepageActivity.EXTRA_SETTINGS_LARGE_SCREEN_DEEP_LINK_INTENT_DATA,\n                    Uri.class);\n            try {\n                intent = Intent.parseUri(intentUriString, Intent.URI_INTENT_SCHEME);\n                intent.setData(data);\n            } catch (URISyntaxException e) {\n                Log.e(TAG, \"Failed to parse deep link intent: \" + e);\n                finish();\n                return;\n            }\n        }\n\n        intent.addFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT);\n\n        if (!ActivityEmbeddingUtils.isEmbeddingActivityEnabled(this)\n                || ActivityEmbeddingUtils.isAlreadyEmbedded(this)) {\n            startActivity(intent);\n        } else if (isSettingsIntelligence(callerPackage)) {\n            if (FeatureFlagUtils.isEnabled(this, FeatureFlags.SETTINGS_SEARCH_ALWAYS_EXPAND)) {\n                startActivity(SettingsActivity.getTrampolineIntent(intent, highlightMenuKey)\n                        .setClass(this, DeepLinkHomepageActivityInternal.class)\n                        .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK\n                                | Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS));\n            } else {\n                // Register SplitPairRule for SubSettings, set clearTop false to prevent unexpected\n                // back navigation behavior.\n                ActivityEmbeddingRulesController.registerSubSettingsPairRule(this,\n                        false /* clearTop */);\n\n                intent.setFlags(intent.getFlags() & ~Intent.FLAG_ACTIVITY_NEW_TASK);\n                startActivity(intent);\n\n                // Pass menu key to homepage\n                final SettingsHomepageActivity homeActivity =\n                        ((SettingsApplication) getApplicationContext()).getHomeActivity();\n                if (homeActivity != null) {\n                    homeActivity.getMainFragment().setHighlightMenuKey(highlightMenuKey,\n                            /* scrollNeeded= */ true);\n                }\n            }\n        } else {\n            // Two-pane case\n            startActivity(SettingsActivity.getTrampolineIntent(intent, highlightMenuKey)\n                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));\n        }\n\n        // Done.\n        finish();\n    }\n\n    private boolean isSettingsIntelligence(ComponentName callingActivity) {\n        return callingActivity != null && TextUtils.equals(\n                callingActivity.getPackageName(),\n                FeatureFactory.getFactory(this).getSearchFeatureProvider()\n                        .getSettingsIntelligencePkgName(this));\n    }\n}\n```",
                        "downstream_file_tokens": {
                            "openai": 1131,
                            "general": {
                                "word_based": 525,
                                "char_based": 1614
                            },
                            "gemini": 1443
                        },
                        "downstream_file_content_ground_truth": "/*\n * Copyright (C) 2017 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.android.settings.search;\n\nimport static com.android.settings.SettingsActivity.EXTRA_SHOW_FRAGMENT_ARGUMENTS;\nimport static com.android.settings.SettingsActivity.EXTRA_SHOW_FRAGMENT_TAB;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.provider.Settings;\nimport android.text.TextUtils;\nimport android.util.FeatureFlagUtils;\nimport android.util.Log;\n\nimport com.android.settings.SettingsActivity;\nimport com.android.settings.SettingsApplication;\nimport com.android.settings.SubSettings;\nimport com.android.settings.activityembedding.ActivityEmbeddingRulesController;\nimport com.android.settings.activityembedding.ActivityEmbeddingUtils;\nimport com.android.settings.core.FeatureFlags;\nimport com.android.settings.homepage.DeepLinkHomepageActivityInternal;\nimport com.android.settings.homepage.SettingsHomepageActivity;\nimport com.android.settings.overlay.FeatureFactory;\n\nimport java.net.URISyntaxException;\n\n/**\n * A trampoline activity that launches setting result page.\n */\npublic class SearchResultTrampoline extends Activity {\n\n    private static final String TAG = \"SearchResultTrampoline\";\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        final String callerPackage = getLaunchedFromPackage();\n        // First make sure caller has privilege to launch a search result page.\n        FeatureFactory.getFactory(this)\n                .getSearchFeatureProvider()\n                .verifyLaunchSearchResultPageCaller(this, callerPackage);\n        // Didn't crash, proceed and launch the result as a subsetting.\n        Intent intent = getIntent();\n        final String highlightMenuKey = intent.getStringExtra(\n                Settings.EXTRA_SETTINGS_EMBEDDED_DEEP_LINK_HIGHLIGHT_MENU_KEY);\n\n        final String fragment = intent.getStringExtra(SettingsActivity.EXTRA_SHOW_FRAGMENT);\n        if (!TextUtils.isEmpty(fragment)) {\n            // Hack to take EXTRA_FRAGMENT_ARG_KEY from intent and set into\n            // EXTRA_SHOW_FRAGMENT_ARGUMENTS. This is necessary because intent could be from\n            // external caller and args may not persisted.\n            final String settingKey = intent.getStringExtra(\n                    SettingsActivity.EXTRA_FRAGMENT_ARG_KEY);\n            final int tab = intent.getIntExtra(EXTRA_SHOW_FRAGMENT_TAB, 0);\n            final Bundle args = new Bundle();\n            args.putString(SettingsActivity.EXTRA_FRAGMENT_ARG_KEY, settingKey);\n            args.putInt(EXTRA_SHOW_FRAGMENT_TAB, tab);\n            intent.putExtra(EXTRA_SHOW_FRAGMENT_ARGUMENTS, args);\n\n            // Reroute request to SubSetting.\n            intent.setClass(this /* context */, SubSettings.class);\n        } else {\n            // Direct link case\n            final String intentUriString = intent.getStringExtra(\n                    Settings.EXTRA_SETTINGS_EMBEDDED_DEEP_LINK_INTENT_URI);\n            if (TextUtils.isEmpty(intentUriString)) {\n                Log.e(TAG, \"No EXTRA_SETTINGS_EMBEDDED_DEEP_LINK_INTENT_URI for deep link\");\n                finish();\n                return;\n            }\n\n            final Uri data = intent.getParcelableExtra(\n                    SettingsHomepageActivity.EXTRA_SETTINGS_LARGE_SCREEN_DEEP_LINK_INTENT_DATA,\n                    Uri.class);\n            try {\n                intent = Intent.parseUri(intentUriString, Intent.URI_INTENT_SCHEME);\n                intent.setData(data);\n            } catch (URISyntaxException e) {\n                Log.e(TAG, \"Failed to parse deep link intent: \" + e);\n                finish();\n                return;\n            }\n        }\n\n        intent.addFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT);\n\n        if (!ActivityEmbeddingUtils.isEmbeddingActivityEnabled(this)\n                || ActivityEmbeddingUtils.isAlreadyEmbedded(this)) {\n            startActivity(intent);\n        } else if (isSettingsIntelligence(callerPackage)) {\n            if (FeatureFlagUtils.isEnabled(this, FeatureFlags.SETTINGS_SEARCH_ALWAYS_EXPAND)) {\n                startActivity(SettingsActivity.getTrampolineIntent(intent, highlightMenuKey)\n                        .setClass(this, DeepLinkHomepageActivityInternal.class)\n                        .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK\n                                | Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS));\n            } else {\n                // Register SplitPairRule for SubSettings, set clearTop false to prevent unexpected\n                // back navigation behavior.\n                ActivityEmbeddingRulesController.registerSubSettingsPairRule(this,\n                        false /* clearTop */);\n\n                intent.setFlags(intent.getFlags() & ~Intent.FLAG_ACTIVITY_NEW_TASK);\n                startActivity(intent);\n\n                // Pass menu key to homepage\n                final SettingsHomepageActivity homeActivity =\n                        ((SettingsApplication) getApplicationContext()).getHomeActivity();\n                if (homeActivity != null) {\n                    homeActivity.getMainFragment().setHighlightMenuKey(highlightMenuKey,\n                            /* scrollNeeded= */ true);\n                }\n            }\n        } else {\n            // Two-pane case\n            startActivity(SettingsActivity.getTrampolineIntent(intent, highlightMenuKey)\n                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));\n        }\n\n        // Done.\n        finish();\n    }\n\n    private boolean isSettingsIntelligence(String callerPackage) {\n        return TextUtils.equals(\n                callerPackage,\n                FeatureFactory.getFactory(this).getSearchFeatureProvider()\n                        .getSettingsIntelligencePkgName(this));\n    }\n}",
                        "downstream_file_ground_truth_tokens": {
                            "openai": 1124,
                            "general": {
                                "word_based": 522,
                                "char_based": 1599
                            },
                            "gemini": 1436
                        },
                        "downstream_file_content_patched_upstream_only": "```java\n/*\n * Copyright (C) 2017 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.android.settings.search;\n\nimport static com.android.settings.SettingsActivity.EXTRA_SHOW_FRAGMENT_ARGUMENTS;\nimport static com.android.settings.SettingsActivity.EXTRA_SHOW_FRAGMENT_TAB;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.provider.Settings;\nimport android.text.TextUtils;\nimport android.util.FeatureFlagUtils;\nimport android.util.Log;\n\nimport com.android.settings.SettingsActivity;\nimport com.android.settings.SettingsApplication;\nimport com.android.settings.SubSettings;\nimport com.android.settings.activityembedding.ActivityEmbeddingRulesController;\nimport com.android.settings.activityembedding.ActivityEmbeddingUtils;\nimport com.android.settings.core.FeatureFlags;\nimport com.android.settings.homepage.DeepLinkHomepageActivityInternal;\nimport com.android.settings.homepage.SettingsHomepageActivity;\nimport com.android.settings.overlay.FeatureFactory;\n\nimport java.net.URISyntaxException;\n\n/**\n * A trampoline activity that launches setting result page.\n */\npublic class SearchResultTrampoline extends Activity {\n\n    private static final String TAG = \"SearchResultTrampoline\";\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        final ComponentName callingActivity = getCallingActivity();\n        // First make sure caller has privilege to launch a search result page.\n        FeatureFactory.getFactory(this)\n                .getSearchFeatureProvider()\n                .verifyLaunchSearchResultPageCaller(this, callingActivity);\n        // Didn't crash, proceed and launch the result as a subsetting.\n        Intent intent = getIntent();\n        final String highlightMenuKey = intent.getStringExtra(\n                Settings.EXTRA_SETTINGS_EMBEDDED_DEEP_LINK_HIGHLIGHT_MENU_KEY);\n\n        final String fragment = intent.getStringExtra(SettingsActivity.EXTRA_SHOW_FRAGMENT);\n        if (!TextUtils.isEmpty(fragment)) {\n            // Hack to take EXTRA_FRAGMENT_ARG_KEY from intent and set into\n            // EXTRA_SHOW_FRAGMENT_ARGUMENTS. This is necessary because intent could be from\n            // external caller and args may not persisted.\n            final String settingKey = intent.getStringExtra(\n                    SettingsActivity.EXTRA_FRAGMENT_ARG_KEY);\n            final int tab = intent.getIntExtra(EXTRA_SHOW_FRAGMENT_TAB, 0);\n            final Bundle args = new Bundle();\n            args.putString(SettingsActivity.EXTRA_FRAGMENT_ARG_KEY, settingKey);\n            args.putInt(EXTRA_SHOW_FRAGMENT_TAB, tab);\n            intent.putExtra(EXTRA_SHOW_FRAGMENT_ARGUMENTS, args);\n\n            // Reroute request to SubSetting.\n            intent.setClass(this /* context */, SubSettings.class);\n        } else {\n            // Direct link case\n            final String intentUriString = intent.getStringExtra(\n                    Settings.EXTRA_SETTINGS_EMBEDDED_DEEP_LINK_INTENT_URI);\n            if (TextUtils.isEmpty(intentUriString)) {\n                Log.e(TAG, \"No EXTRA_SETTINGS_EMBEDDED_DEEP_LINK_INTENT_URI for deep link\");\n                finish();\n                return;\n            }\n\n            final Uri data = intent.getParcelableExtra(\n                    SettingsHomepageActivity.EXTRA_SETTINGS_LARGE_SCREEN_DEEP_LINK_INTENT_DATA,\n                    Uri.class);\n            try {\n                intent = Intent.parseUri(intentUriString, Intent.URI_INTENT_SCHEME);\n                intent.setData(data);\n            } catch (URISyntaxException e) {\n                Log.e(TAG, \"Failed to parse deep link intent: \" + e);\n                finish();\n                return;\n            }\n        }\n\n        intent.addFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT);\n\n        if (!ActivityEmbeddingUtils.isEmbeddingActivityEnabled(this)\n                || ActivityEmbeddingUtils.isAlreadyEmbedded(this)) {\n            startActivity(intent);\n        } else if (isSettingsIntelligence(callerPackage)) {\n            if (FeatureFlagUtils.isEnabled(this, FeatureFlags.SETTINGS_SEARCH_ALWAYS_EXPAND)) {\n                startActivity(SettingsActivity.getTrampolineIntent(intent, highlightMenuKey)\n                        .setClass(this, DeepLinkHomepageActivityInternal.class)\n                        .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK\n                                | Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS));\n            } else {\n                // Register SplitPairRule for SubSettings, set clearTop false to prevent unexpected\n                // back navigation behavior.\n                ActivityEmbeddingRulesController.registerSubSettingsPairRule(this,\n                        false /* clearTop */);\n\n                intent.setFlags(intent.getFlags() & ~Intent.FLAG_ACTIVITY_NEW_TASK);\n                startActivity(intent);\n\n                // Pass menu key to homepage\n                final SettingsHomepageActivity homeActivity =\n                        ((SettingsApplication) getApplicationContext()).getHomeActivity();\n                if (homeActivity != null) {\n                    homeActivity.getMainFragment().setHighlightMenuKey(highlightMenuKey,\n                            /* scrollNeeded= */ true);\n                }\n            }\n        } else {\n            // Two-pane case\n            startActivity(SettingsActivity.getTrampolineIntent(intent, highlightMenuKey)\n                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));\n        }\n\n        // Done.\n        finish();\n    }\n\n    private boolean isSettingsIntelligence(ComponentName callingActivity) {\n        return callingActivity != null && TextUtils.equals(\n                callingActivity.getPackageName(),\n                FeatureFactory.getFactory(this).getSearchFeatureProvider()\n                        .getSettingsIntelligencePkgName(this));\n    }\n}\n```",
                        "diff_patched_upstream_only": "--- original_downstream_file\n+++ patched_upstream_only\n@@ -1,4 +1,3 @@\n-```java\n /*\n  * Copyright (C) 2017 The Android Open Source Project\n  *\n@@ -144,5 +143,4 @@\n                 FeatureFactory.getFactory(this).getSearchFeatureProvider()\n                         .getSettingsIntelligencePkgName(this));\n     }\n-}\n-```+}",
                        "llm_output_token_counts": {
                            "openai": 1128,
                            "general": {
                                "word_based": 521,
                                "char_based": 1603
                            },
                            "gemini": 11640
                        },
                        "downstream_patched_file_llm_output": "```java\n/*\n * Copyright (C) 2017 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.android.settings.search;\n\nimport static com.android.settings.SettingsActivity.EXTRA_SHOW_FRAGMENT_ARGUMENTS;\nimport static com.android.settings.SettingsActivity.EXTRA_SHOW_FRAGMENT_TAB;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.provider.Settings;\nimport android.text.TextUtils;\nimport android.util.FeatureFlagUtils;\nimport android.util.Log;\n\nimport com.android.settings.SettingsActivity;\nimport com.android.settings.SettingsApplication;\nimport com.android.settings.SubSettings;\nimport com.android.settings.activityembedding.ActivityEmbeddingRulesController;\nimport com.android.settings.activityembedding.ActivityEmbeddingUtils;\nimport com.android.settings.core.FeatureFlags;\nimport com.android.settings.homepage.DeepLinkHomepageActivityInternal;\nimport com.android.settings.homepage.SettingsHomepageActivity;\nimport com.android.settings.overlay.FeatureFactory;\n\nimport java.net.URISyntaxException;\n\n/**\n * A trampoline activity that launches setting result page.\n */\npublic class SearchResultTrampoline extends Activity {\n\n    private static final String TAG = \"SearchResultTrampoline\";\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        final String callerPackage = getLaunchedFromPackage();\n        // First make sure caller has privilege to launch a search result page.\n        FeatureFactory.getFeatureFactory()\n                .getSearchFeatureProvider()\n                .verifyLaunchSearchResultPageCaller(this, callerPackage);\n        // Didn't crash, proceed and launch the result as a subsetting.\n        Intent intent = getIntent();\n        final String highlightMenuKey = intent.getStringExtra(\n                Settings.EXTRA_SETTINGS_EMBEDDED_DEEP_LINK_HIGHLIGHT_MENU_KEY);\n\n        final String fragment = intent.getStringExtra(SettingsActivity.EXTRA_SHOW_FRAGMENT);\n        if (!TextUtils.isEmpty(fragment)) {\n            // Hack to take EXTRA_FRAGMENT_ARG_KEY from intent and set into\n            // EXTRA_SHOW_FRAGMENT_ARGUMENTS. This is necessary because intent could be from\n            // external caller and args may not persisted.\n            final String settingKey = intent.getStringExtra(\n                    SettingsActivity.EXTRA_FRAGMENT_ARG_KEY);\n            final int tab = intent.getIntExtra(EXTRA_SHOW_FRAGMENT_TAB, 0);\n            final Bundle args = new Bundle();\n            args.putString(SettingsActivity.EXTRA_FRAGMENT_ARG_KEY, settingKey);\n            args.putInt(EXTRA_SHOW_FRAGMENT_TAB, tab);\n            intent.putExtra(EXTRA_SHOW_FRAGMENT_ARGUMENTS, args);\n\n            // Reroute request to SubSetting.\n            intent.setClass(this /* context */, SubSettings.class);\n        } else {\n            // Direct link case\n            final String intentUriString = intent.getStringExtra(\n                    Settings.EXTRA_SETTINGS_EMBEDDED_DEEP_LINK_INTENT_URI);\n            if (TextUtils.isEmpty(intentUriString)) {\n                Log.e(TAG, \"No EXTRA_SETTINGS_EMBEDDED_DEEP_LINK_INTENT_URI for deep link\");\n                finish();\n                return;\n            }\n\n            final Uri data = intent.getParcelableExtra(\n                    SettingsHomepageActivity.EXTRA_SETTINGS_LARGE_SCREEN_DEEP_LINK_INTENT_DATA,\n                    Uri.class);\n            try {\n                intent = Intent.parseUri(intentUriString, Intent.URI_INTENT_SCHEME);\n                intent.setData(data);\n            } catch (URISyntaxException e) {\n                Log.e(TAG, \"Failed to parse deep link intent: \" + e);\n                finish();\n                return;\n            }\n        }\n\n        intent.addFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT);\n\n        if (!ActivityEmbeddingUtils.isEmbeddingActivityEnabled(this)\n                || ActivityEmbeddingUtils.isAlreadyEmbedded(this)) {\n            startActivity(intent);\n        } else if (isSettingsIntelligence(callerPackage)) {\n            if (FeatureFlagUtils.isEnabled(this, FeatureFlags.SETTINGS_SEARCH_ALWAYS_EXPAND)) {\n                startActivity(SettingsActivity.getTrampolineIntent(intent, highlightMenuKey)\n                        .setClass(this, DeepLinkHomepageActivityInternal.class)\n                        .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK\n                                | Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS));\n            } else {\n                // Register SplitPairRule for SubSettings, set clearTop false to prevent unexpected\n                // back navigation behavior.\n                ActivityEmbeddingRulesController.registerSubSettingsPairRule(this,\n                        false /* clearTop */);\n\n                intent.setFlags(intent.getFlags() & ~Intent.FLAG_ACTIVITY_NEW_TASK);\n                startActivity(intent);\n\n                // Pass menu key to homepage\n                final SettingsHomepageActivity homeActivity =\n                        ((SettingsApplication) getApplicationContext()).getHomeActivity();\n                if (homeActivity != null) {\n                    homeActivity.getMainFragment().setHighlightMenuKey(highlightMenuKey,\n                            /* scrollNeeded= */ true);\n                }\n            }\n        } else {\n            // Two-pane case\n            startActivity(SettingsActivity.getTrampolineIntent(intent, highlightMenuKey)\n                    .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));\n        }\n\n        // Done.\n        finish();\n    }\n\n    private boolean isSettingsIntelligence(String callerPackage) {\n        return TextUtils.equals(\n                callerPackage,\n                FeatureFactory.getFeatureFactory().getSearchFeatureProvider()\n                        .getSettingsIntelligencePkgName(this));\n    }\n}\n```",
                        "llm_time_taken_seconds": 79.48,
                        "LLM_diff_content": "--- original\n+++ patched\n@@ -52,11 +52,11 @@\n     protected void onCreate(Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n \n-        final ComponentName callingActivity = getCallingActivity();\n+        final String callerPackage = getLaunchedFromPackage();\n         // First make sure caller has privilege to launch a search result page.\n-        FeatureFactory.getFactory(this)\n+        FeatureFactory.getFeatureFactory()\n                 .getSearchFeatureProvider()\n-                .verifyLaunchSearchResultPageCaller(this, callingActivity);\n+                .verifyLaunchSearchResultPageCaller(this, callerPackage);\n         // Didn't crash, proceed and launch the result as a subsetting.\n         Intent intent = getIntent();\n         final String highlightMenuKey = intent.getStringExtra(\n@@ -138,10 +138,10 @@\n         finish();\n     }\n \n-    private boolean isSettingsIntelligence(ComponentName callingActivity) {\n-        return callingActivity != null && TextUtils.equals(\n-                callingActivity.getPackageName(),\n-                FeatureFactory.getFactory(this).getSearchFeatureProvider()\n+    private boolean isSettingsIntelligence(String callerPackage) {\n+        return TextUtils.equals(\n+                callerPackage,\n+                FeatureFactory.getFeatureFactory().getSearchFeatureProvider()\n                         .getSettingsIntelligencePkgName(this));\n     }\n }\n"
                    }
                ]
            }
        ]
    }
]