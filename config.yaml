# Configuration for the Vidar Patch Management Pipeline

# -- LLM Patch Correction Settings --
llm_runner:
  # The specific Gemini model to use for generating patch corrections.
  model_name: "gemini-2.5-pro-preview-05-06"

  # The temperature for LLM generation.
  temperature: 0.0

  # The maximum number of times the LLM will try to self-correct a failed patch.
  max_retries: 3

  # The number of concurrent LLM API calls to make.
  concurrency: 5

# -- Patch Adopter Settings --
patch_adopter:
  # The 'strip' level for the GNU patch command (-p option).
  strip_level: 1

  # The command to use for applying patches.
  patch_tool: "patch"

# -- Filesystem Paths --
# These paths define the inputs and outputs for each stage of the pipeline.
# They can be relative to the vidar directory or absolute.
paths:
  # Input for the entire pipeline
  vanir_source_report: "reports/vanir_output.json"

  # Output of vanir_report_parser.py, input for patch_fetcher.py
  parsed_vanir_report: "reports/parsed_report.json"

  # Output of patch_fetcher.py
  fetched_patches_dir: "patches/vanir"
  fetch_failures_report: "reports/fetch_failures.json"

  # Output of the first patch_adopter.py run
  vanir_patch_application_report: "reports/vanir_patch_application_report.json"

  # Input for llm_patch_runner.py (generated by pipeline_runner.py)
  llm_input_report: "reports/failed_patch.json"

  # Output of llm_patch_runner.py
  llm_generated_patches_dir: "patches/llm_generated"
  llm_successful_patches_report: "reports/successful_llm_patches.json"
  llm_detailed_output_report: "reports/llm_output_detailed.json"
  
  # Output of the second patch_adopter.py run
  llm_patch_application_report: "reports/llm_patch_application_report.json" 