{
  "cve_id": "CVE-2025-21629",
  "upstream_commit": "a8620de72e5676993ec3a3b975f7c10908f5f60f",
  "upstream_patch_content": "From 68e068cabd2c6c533ef934c2e5151609cf6ecc6d Mon Sep 17 00:00:00 2001\nFrom: Willem de Bruijn <willemb@google.com>\nDate: Wed, 1 Jan 2025 11:47:40 -0500\nSubject: [PATCH] net: reenable NETIF_F_IPV6_CSUM offload for BIG TCP packets\n\nThe blamed commit disabled hardware offoad of IPv6 packets with\nextension headers on devices that advertise NETIF_F_IPV6_CSUM,\nbased on the definition of that feature in skbuff.h:\n\n *   * - %NETIF_F_IPV6_CSUM\n *     - Driver (device) is only able to checksum plain\n *       TCP or UDP packets over IPv6. These are specifically\n *       unencapsulated packets of the form IPv6|TCP or\n *       IPv6|UDP where the Next Header field in the IPv6\n *       header is either TCP or UDP. IPv6 extension headers\n *       are not supported with this feature. This feature\n *       cannot be set in features for a device with\n *       NETIF_F_HW_CSUM also set. This feature is being\n *       DEPRECATED (see below).\n\nThe change causes skb_warn_bad_offload to fire for BIG TCP\npackets.\n\n[  496.310233] WARNING: CPU: 13 PID: 23472 at net/core/dev.c:3129 skb_warn_bad_offload+0xc4/0xe0\n\n[  496.310297]  ? skb_warn_bad_offload+0xc4/0xe0\n[  496.310300]  skb_checksum_help+0x129/0x1f0\n[  496.310303]  skb_csum_hwoffload_help+0x150/0x1b0\n[  496.310306]  validate_xmit_skb+0x159/0x270\n[  496.310309]  validate_xmit_skb_list+0x41/0x70\n[  496.310312]  sch_direct_xmit+0x5c/0x250\n[  496.310317]  __qdisc_run+0x388/0x620\n\nBIG TCP introduced an IPV6_TLV_JUMBO IPv6 extension header to\ncommunicate packet length, as this is an IPv6 jumbogram. But, the\nfeature is only enabled on devices that support BIG TCP TSO. The\nheader is only present for PF_PACKET taps like tcpdump, and not\ntransmitted by physical devices.\n\nFor this specific case of extension headers that are not\ntransmitted, return to the situation before the blamed commit\nand support hardware offload.\n\nipv6_has_hopopt_jumbo() tests not only whether this header is present,\nbut also that it is the only extension header before a terminal (L4)\nheader.\n\nFixes: 04c20a9356f2 (\"net: skip offload for NETIF_F_IPV6_CSUM if ipv6 header contains extension\")\nReported-by: syzbot <syzkaller@googlegroups.com>\nReported-by: Eric Dumazet <edumazet@google.com>\nCloses: https://lore.kernel.org/netdev/CANn89iK1hdC3Nt8KPhOtTF8vCPc1AHDCtse_BTNki1pWxAByTQ@mail.gmail.com/\nSigned-off-by: Willem de Bruijn <willemb@google.com>\nReviewed-by: Eric Dumazet <edumazet@google.com>\nLink: https://patch.msgid.link/20250101164909.1331680-1-willemdebruijn.kernel@gmail.com\nSigned-off-by: Jakub Kicinski <kuba@kernel.org>\n---\n net/core/dev.c | 4 +++-\n 1 file changed, 3 insertions(+), 1 deletion(-)\n\ndiff --git a/net/core/dev.c b/net/core/dev.c\nindex 45a8c3dd4a64..faa23042df38 100644\n--- a/net/core/dev.c\n+++ b/net/core/dev.c\n@@ -3642,8 +3642,10 @@ int skb_csum_hwoffload_help(struct sk_buff *skb,\n \n \tif (features & (NETIF_F_IP_CSUM | NETIF_F_IPV6_CSUM)) {\n \t\tif (vlan_get_protocol(skb) == htons(ETH_P_IPV6) &&\n-\t\t    skb_network_header_len(skb) != sizeof(struct ipv6hdr))\n+\t\t    skb_network_header_len(skb) != sizeof(struct ipv6hdr) &&\n+\t\t    !ipv6_has_hopopt_jumbo(skb))\n \t\t\tgoto sw_checksum;\n+\n \t\tswitch (skb->csum_offset) {\n \t\tcase offsetof(struct tcphdr, check):\n \t\tcase offsetof(struct udphdr, check):\n-- \n2.39.5 (Apple Git-154)\n\n",
  "successes": [
    {
      "downstream_version": "32e1e748a85bd52b20b3857d80fd166d22fa455a",
      "downstream_patch": "ac9cfef69565021c9e1022a493a9c40b03e2caf9",
      "commit_date": "2025-01-09 13:30:02 +0100",
      "result": "success",
      "downstream_patch_content": "commit ac9cfef69565021c9e1022a493a9c40b03e2caf9\nAuthor: Willem de Bruijn <willemb@google.com>\nDate:   Wed Jan 1 11:47:40 2025 -0500\n\n    net: reenable NETIF_F_IPV6_CSUM offload for BIG TCP packets\n    \n    [ Upstream commit 68e068cabd2c6c533ef934c2e5151609cf6ecc6d ]\n    \n    The blamed commit disabled hardware offoad of IPv6 packets with\n    extension headers on devices that advertise NETIF_F_IPV6_CSUM,\n    based on the definition of that feature in skbuff.h:\n    \n     *   * - %NETIF_F_IPV6_CSUM\n     *     - Driver (device) is only able to checksum plain\n     *       TCP or UDP packets over IPv6. These are specifically\n     *       unencapsulated packets of the form IPv6|TCP or\n     *       IPv6|UDP where the Next Header field in the IPv6\n     *       header is either TCP or UDP. IPv6 extension headers\n     *       are not supported with this feature. This feature\n     *       cannot be set in features for a device with\n     *       NETIF_F_HW_CSUM also set. This feature is being\n     *       DEPRECATED (see below).\n    \n    The change causes skb_warn_bad_offload to fire for BIG TCP\n    packets.\n    \n    [  496.310233] WARNING: CPU: 13 PID: 23472 at net/core/dev.c:3129 skb_warn_bad_offload+0xc4/0xe0\n    \n    [  496.310297]  ? skb_warn_bad_offload+0xc4/0xe0\n    [  496.310300]  skb_checksum_help+0x129/0x1f0\n    [  496.310303]  skb_csum_hwoffload_help+0x150/0x1b0\n    [  496.310306]  validate_xmit_skb+0x159/0x270\n    [  496.310309]  validate_xmit_skb_list+0x41/0x70\n    [  496.310312]  sch_direct_xmit+0x5c/0x250\n    [  496.310317]  __qdisc_run+0x388/0x620\n    \n    BIG TCP introduced an IPV6_TLV_JUMBO IPv6 extension header to\n    communicate packet length, as this is an IPv6 jumbogram. But, the\n    feature is only enabled on devices that support BIG TCP TSO. The\n    header is only present for PF_PACKET taps like tcpdump, and not\n    transmitted by physical devices.\n    \n    For this specific case of extension headers that are not\n    transmitted, return to the situation before the blamed commit\n    and support hardware offload.\n    \n    ipv6_has_hopopt_jumbo() tests not only whether this header is present,\n    but also that it is the only extension header before a terminal (L4)\n    header.\n    \n    Fixes: 04c20a9356f2 (\"net: skip offload for NETIF_F_IPV6_CSUM if ipv6 header contains extension\")\n    Reported-by: syzbot <syzkaller@googlegroups.com>\n    Reported-by: Eric Dumazet <edumazet@google.com>\n    Closes: https://lore.kernel.org/netdev/CANn89iK1hdC3Nt8KPhOtTF8vCPc1AHDCtse_BTNki1pWxAByTQ@mail.gmail.com/\n    Signed-off-by: Willem de Bruijn <willemb@google.com>\n    Reviewed-by: Eric Dumazet <edumazet@google.com>\n    Link: https://patch.msgid.link/20250101164909.1331680-1-willemdebruijn.kernel@gmail.com\n    Signed-off-by: Jakub Kicinski <kuba@kernel.org>\n    Signed-off-by: Sasha Levin <sashal@kernel.org>\n\ndiff --git a/net/core/dev.c b/net/core/dev.c\nindex 2ee1a535b3cb..90559cb66803 100644\n--- a/net/core/dev.c\n+++ b/net/core/dev.c\n@@ -3679,8 +3679,10 @@ int skb_csum_hwoffload_help(struct sk_buff *skb,\n \n \tif (features & (NETIF_F_IP_CSUM | NETIF_F_IPV6_CSUM)) {\n \t\tif (vlan_get_protocol(skb) == htons(ETH_P_IPV6) &&\n-\t\t    skb_network_header_len(skb) != sizeof(struct ipv6hdr))\n+\t\t    skb_network_header_len(skb) != sizeof(struct ipv6hdr) &&\n+\t\t    !ipv6_has_hopopt_jumbo(skb))\n \t\t\tgoto sw_checksum;\n+\n \t\tswitch (skb->csum_offset) {\n \t\tcase offsetof(struct tcphdr, check):\n \t\tcase offsetof(struct udphdr, check):\n"
    },
    {
      "downstream_version": "9eea3703c882876e5713071d51a510fecd3471d5",
      "downstream_patch": "95ccf006bbc8b59044313b8c309dcf29c546abd4",
      "commit_date": "2025-01-09 13:32:02 +0100",
      "result": "success",
      "downstream_patch_content": "commit 95ccf006bbc8b59044313b8c309dcf29c546abd4\nAuthor: Willem de Bruijn <willemb@google.com>\nDate:   Wed Jan 1 11:47:40 2025 -0500\n\n    net: reenable NETIF_F_IPV6_CSUM offload for BIG TCP packets\n    \n    [ Upstream commit 68e068cabd2c6c533ef934c2e5151609cf6ecc6d ]\n    \n    The blamed commit disabled hardware offoad of IPv6 packets with\n    extension headers on devices that advertise NETIF_F_IPV6_CSUM,\n    based on the definition of that feature in skbuff.h:\n    \n     *   * - %NETIF_F_IPV6_CSUM\n     *     - Driver (device) is only able to checksum plain\n     *       TCP or UDP packets over IPv6. These are specifically\n     *       unencapsulated packets of the form IPv6|TCP or\n     *       IPv6|UDP where the Next Header field in the IPv6\n     *       header is either TCP or UDP. IPv6 extension headers\n     *       are not supported with this feature. This feature\n     *       cannot be set in features for a device with\n     *       NETIF_F_HW_CSUM also set. This feature is being\n     *       DEPRECATED (see below).\n    \n    The change causes skb_warn_bad_offload to fire for BIG TCP\n    packets.\n    \n    [  496.310233] WARNING: CPU: 13 PID: 23472 at net/core/dev.c:3129 skb_warn_bad_offload+0xc4/0xe0\n    \n    [  496.310297]  ? skb_warn_bad_offload+0xc4/0xe0\n    [  496.310300]  skb_checksum_help+0x129/0x1f0\n    [  496.310303]  skb_csum_hwoffload_help+0x150/0x1b0\n    [  496.310306]  validate_xmit_skb+0x159/0x270\n    [  496.310309]  validate_xmit_skb_list+0x41/0x70\n    [  496.310312]  sch_direct_xmit+0x5c/0x250\n    [  496.310317]  __qdisc_run+0x388/0x620\n    \n    BIG TCP introduced an IPV6_TLV_JUMBO IPv6 extension header to\n    communicate packet length, as this is an IPv6 jumbogram. But, the\n    feature is only enabled on devices that support BIG TCP TSO. The\n    header is only present for PF_PACKET taps like tcpdump, and not\n    transmitted by physical devices.\n    \n    For this specific case of extension headers that are not\n    transmitted, return to the situation before the blamed commit\n    and support hardware offload.\n    \n    ipv6_has_hopopt_jumbo() tests not only whether this header is present,\n    but also that it is the only extension header before a terminal (L4)\n    header.\n    \n    Fixes: 04c20a9356f2 (\"net: skip offload for NETIF_F_IPV6_CSUM if ipv6 header contains extension\")\n    Reported-by: syzbot <syzkaller@googlegroups.com>\n    Reported-by: Eric Dumazet <edumazet@google.com>\n    Closes: https://lore.kernel.org/netdev/CANn89iK1hdC3Nt8KPhOtTF8vCPc1AHDCtse_BTNki1pWxAByTQ@mail.gmail.com/\n    Signed-off-by: Willem de Bruijn <willemb@google.com>\n    Reviewed-by: Eric Dumazet <edumazet@google.com>\n    Link: https://patch.msgid.link/20250101164909.1331680-1-willemdebruijn.kernel@gmail.com\n    Signed-off-by: Jakub Kicinski <kuba@kernel.org>\n    Signed-off-by: Sasha Levin <sashal@kernel.org>\n\ndiff --git a/net/core/dev.c b/net/core/dev.c\nindex 4beb9acf2c18..69da7b009f8b 100644\n--- a/net/core/dev.c\n+++ b/net/core/dev.c\n@@ -3628,8 +3628,10 @@ int skb_csum_hwoffload_help(struct sk_buff *skb,\n \n \tif (features & (NETIF_F_IP_CSUM | NETIF_F_IPV6_CSUM)) {\n \t\tif (vlan_get_protocol(skb) == htons(ETH_P_IPV6) &&\n-\t\t    skb_network_header_len(skb) != sizeof(struct ipv6hdr))\n+\t\t    skb_network_header_len(skb) != sizeof(struct ipv6hdr) &&\n+\t\t    !ipv6_has_hopopt_jumbo(skb))\n \t\t\tgoto sw_checksum;\n+\n \t\tswitch (skb->csum_offset) {\n \t\tcase offsetof(struct tcphdr, check):\n \t\tcase offsetof(struct udphdr, check):\n"
    },
    {
      "downstream_version": "05670a893565078ef75eaae6b60b84e540c73952",
      "downstream_patch": "d3b7a9c7597b779039a51d7b34116fbe424bf2b7",
      "commit_date": "2025-01-09 13:33:41 +0100",
      "result": "success",
      "downstream_patch_content": "commit d3b7a9c7597b779039a51d7b34116fbe424bf2b7\nAuthor: Willem de Bruijn <willemb@google.com>\nDate:   Wed Jan 1 11:47:40 2025 -0500\n\n    net: reenable NETIF_F_IPV6_CSUM offload for BIG TCP packets\n    \n    [ Upstream commit 68e068cabd2c6c533ef934c2e5151609cf6ecc6d ]\n    \n    The blamed commit disabled hardware offoad of IPv6 packets with\n    extension headers on devices that advertise NETIF_F_IPV6_CSUM,\n    based on the definition of that feature in skbuff.h:\n    \n     *   * - %NETIF_F_IPV6_CSUM\n     *     - Driver (device) is only able to checksum plain\n     *       TCP or UDP packets over IPv6. These are specifically\n     *       unencapsulated packets of the form IPv6|TCP or\n     *       IPv6|UDP where the Next Header field in the IPv6\n     *       header is either TCP or UDP. IPv6 extension headers\n     *       are not supported with this feature. This feature\n     *       cannot be set in features for a device with\n     *       NETIF_F_HW_CSUM also set. This feature is being\n     *       DEPRECATED (see below).\n    \n    The change causes skb_warn_bad_offload to fire for BIG TCP\n    packets.\n    \n    [  496.310233] WARNING: CPU: 13 PID: 23472 at net/core/dev.c:3129 skb_warn_bad_offload+0xc4/0xe0\n    \n    [  496.310297]  ? skb_warn_bad_offload+0xc4/0xe0\n    [  496.310300]  skb_checksum_help+0x129/0x1f0\n    [  496.310303]  skb_csum_hwoffload_help+0x150/0x1b0\n    [  496.310306]  validate_xmit_skb+0x159/0x270\n    [  496.310309]  validate_xmit_skb_list+0x41/0x70\n    [  496.310312]  sch_direct_xmit+0x5c/0x250\n    [  496.310317]  __qdisc_run+0x388/0x620\n    \n    BIG TCP introduced an IPV6_TLV_JUMBO IPv6 extension header to\n    communicate packet length, as this is an IPv6 jumbogram. But, the\n    feature is only enabled on devices that support BIG TCP TSO. The\n    header is only present for PF_PACKET taps like tcpdump, and not\n    transmitted by physical devices.\n    \n    For this specific case of extension headers that are not\n    transmitted, return to the situation before the blamed commit\n    and support hardware offload.\n    \n    ipv6_has_hopopt_jumbo() tests not only whether this header is present,\n    but also that it is the only extension header before a terminal (L4)\n    header.\n    \n    Fixes: 04c20a9356f2 (\"net: skip offload for NETIF_F_IPV6_CSUM if ipv6 header contains extension\")\n    Reported-by: syzbot <syzkaller@googlegroups.com>\n    Reported-by: Eric Dumazet <edumazet@google.com>\n    Closes: https://lore.kernel.org/netdev/CANn89iK1hdC3Nt8KPhOtTF8vCPc1AHDCtse_BTNki1pWxAByTQ@mail.gmail.com/\n    Signed-off-by: Willem de Bruijn <willemb@google.com>\n    Reviewed-by: Eric Dumazet <edumazet@google.com>\n    Link: https://patch.msgid.link/20250101164909.1331680-1-willemdebruijn.kernel@gmail.com\n    Signed-off-by: Jakub Kicinski <kuba@kernel.org>\n    Signed-off-by: Sasha Levin <sashal@kernel.org>\n\ndiff --git a/net/core/dev.c b/net/core/dev.c\nindex 8453e14d301b..f3fa8353d262 100644\n--- a/net/core/dev.c\n+++ b/net/core/dev.c\n@@ -3640,8 +3640,10 @@ int skb_csum_hwoffload_help(struct sk_buff *skb,\n \n \tif (features & (NETIF_F_IP_CSUM | NETIF_F_IPV6_CSUM)) {\n \t\tif (vlan_get_protocol(skb) == htons(ETH_P_IPV6) &&\n-\t\t    skb_network_header_len(skb) != sizeof(struct ipv6hdr))\n+\t\t    skb_network_header_len(skb) != sizeof(struct ipv6hdr) &&\n+\t\t    !ipv6_has_hopopt_jumbo(skb))\n \t\t\tgoto sw_checksum;\n+\n \t\tswitch (skb->csum_offset) {\n \t\tcase offsetof(struct tcphdr, check):\n \t\tcase offsetof(struct udphdr, check):\n"
    }
  ],
  "failures": []
}