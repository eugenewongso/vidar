{
  "cve_id": "CVE-2025-21631",
  "upstream_commit": "cc0331e29fce4c3c2eaedeb7029360be6ed1185c",
  "upstream_patch_content": "From fcede1f0a043ccefe9bc6ad57f12718e42f63f1d Mon Sep 17 00:00:00 2001\nFrom: Yu Kuai <yukuai3@huawei.com>\nDate: Wed, 8 Jan 2025 16:41:48 +0800\nSubject: [PATCH] block, bfq: fix waker_bfqq UAF after bfq_split_bfqq()\n\nOur syzkaller report a following UAF for v6.6:\n\nBUG: KASAN: slab-use-after-free in bfq_init_rq+0x175d/0x17a0 block/bfq-iosched.c:6958\nRead of size 8 at addr ffff8881b57147d8 by task fsstress/232726\n\nCPU: 2 PID: 232726 Comm: fsstress Not tainted 6.6.0-g3629d1885222 #39\nCall Trace:\n <TASK>\n __dump_stack lib/dump_stack.c:88 [inline]\n dump_stack_lvl+0x91/0xf0 lib/dump_stack.c:106\n print_address_description.constprop.0+0x66/0x300 mm/kasan/report.c:364\n print_report+0x3e/0x70 mm/kasan/report.c:475\n kasan_report+0xb8/0xf0 mm/kasan/report.c:588\n hlist_add_head include/linux/list.h:1023 [inline]\n bfq_init_rq+0x175d/0x17a0 block/bfq-iosched.c:6958\n bfq_insert_request.isra.0+0xe8/0xa20 block/bfq-iosched.c:6271\n bfq_insert_requests+0x27f/0x390 block/bfq-iosched.c:6323\n blk_mq_insert_request+0x290/0x8f0 block/blk-mq.c:2660\n blk_mq_submit_bio+0x1021/0x15e0 block/blk-mq.c:3143\n __submit_bio+0xa0/0x6b0 block/blk-core.c:639\n __submit_bio_noacct_mq block/blk-core.c:718 [inline]\n submit_bio_noacct_nocheck+0x5b7/0x810 block/blk-core.c:747\n submit_bio_noacct+0xca0/0x1990 block/blk-core.c:847\n __ext4_read_bh fs/ext4/super.c:205 [inline]\n ext4_read_bh+0x15e/0x2e0 fs/ext4/super.c:230\n __read_extent_tree_block+0x304/0x6f0 fs/ext4/extents.c:567\n ext4_find_extent+0x479/0xd20 fs/ext4/extents.c:947\n ext4_ext_map_blocks+0x1a3/0x2680 fs/ext4/extents.c:4182\n ext4_map_blocks+0x929/0x15a0 fs/ext4/inode.c:660\n ext4_iomap_begin_report+0x298/0x480 fs/ext4/inode.c:3569\n iomap_iter+0x3dd/0x1010 fs/iomap/iter.c:91\n iomap_fiemap+0x1f4/0x360 fs/iomap/fiemap.c:80\n ext4_fiemap+0x181/0x210 fs/ext4/extents.c:5051\n ioctl_fiemap.isra.0+0x1b4/0x290 fs/ioctl.c:220\n do_vfs_ioctl+0x31c/0x11a0 fs/ioctl.c:811\n __do_sys_ioctl fs/ioctl.c:869 [inline]\n __se_sys_ioctl+0xae/0x190 fs/ioctl.c:857\n do_syscall_x64 arch/x86/entry/common.c:51 [inline]\n do_syscall_64+0x70/0x120 arch/x86/entry/common.c:81\n entry_SYSCALL_64_after_hwframe+0x78/0xe2\n\nAllocated by task 232719:\n kasan_save_stack+0x22/0x50 mm/kasan/common.c:45\n kasan_set_track+0x25/0x30 mm/kasan/common.c:52\n __kasan_slab_alloc+0x87/0x90 mm/kasan/common.c:328\n kasan_slab_alloc include/linux/kasan.h:188 [inline]\n slab_post_alloc_hook mm/slab.h:768 [inline]\n slab_alloc_node mm/slub.c:3492 [inline]\n kmem_cache_alloc_node+0x1b8/0x6f0 mm/slub.c:3537\n bfq_get_queue+0x215/0x1f00 block/bfq-iosched.c:5869\n bfq_get_bfqq_handle_split+0x167/0x5f0 block/bfq-iosched.c:6776\n bfq_init_rq+0x13a4/0x17a0 block/bfq-iosched.c:6938\n bfq_insert_request.isra.0+0xe8/0xa20 block/bfq-iosched.c:6271\n bfq_insert_requests+0x27f/0x390 block/bfq-iosched.c:6323\n blk_mq_insert_request+0x290/0x8f0 block/blk-mq.c:2660\n blk_mq_submit_bio+0x1021/0x15e0 block/blk-mq.c:3143\n __submit_bio+0xa0/0x6b0 block/blk-core.c:639\n __submit_bio_noacct_mq block/blk-core.c:718 [inline]\n submit_bio_noacct_nocheck+0x5b7/0x810 block/blk-core.c:747\n submit_bio_noacct+0xca0/0x1990 block/blk-core.c:847\n __ext4_read_bh fs/ext4/super.c:205 [inline]\n ext4_read_bh_nowait+0x15a/0x240 fs/ext4/super.c:217\n ext4_read_bh_lock+0xac/0xd0 fs/ext4/super.c:242\n ext4_bread_batch+0x268/0x500 fs/ext4/inode.c:958\n __ext4_find_entry+0x448/0x10f0 fs/ext4/namei.c:1671\n ext4_lookup_entry fs/ext4/namei.c:1774 [inline]\n ext4_lookup.part.0+0x359/0x6f0 fs/ext4/namei.c:1842\n ext4_lookup+0x72/0x90 fs/ext4/namei.c:1839\n __lookup_slow+0x257/0x480 fs/namei.c:1696\n lookup_slow fs/namei.c:1713 [inline]\n walk_component+0x454/0x5c0 fs/namei.c:2004\n link_path_walk.part.0+0x773/0xda0 fs/namei.c:2331\n link_path_walk fs/namei.c:3826 [inline]\n path_openat+0x1b9/0x520 fs/namei.c:3826\n do_filp_open+0x1b7/0x400 fs/namei.c:3857\n do_sys_openat2+0x5dc/0x6e0 fs/open.c:1428\n do_sys_open fs/open.c:1443 [inline]\n __do_sys_openat fs/open.c:1459 [inline]\n __se_sys_openat fs/open.c:1454 [inline]\n __x64_sys_openat+0x148/0x200 fs/open.c:1454\n do_syscall_x64 arch/x86/entry/common.c:51 [inline]\n do_syscall_64+0x70/0x120 arch/x86/entry/common.c:81\n entry_SYSCALL_64_after_hwframe+0x78/0xe2\n\nFreed by task 232726:\n kasan_save_stack+0x22/0x50 mm/kasan/common.c:45\n kasan_set_track+0x25/0x30 mm/kasan/common.c:52\n kasan_save_free_info+0x2b/0x50 mm/kasan/generic.c:522\n ____kasan_slab_free mm/kasan/common.c:236 [inline]\n __kasan_slab_free+0x12a/0x1b0 mm/kasan/common.c:244\n kasan_slab_free include/linux/kasan.h:164 [inline]\n slab_free_hook mm/slub.c:1827 [inline]\n slab_free_freelist_hook mm/slub.c:1853 [inline]\n slab_free mm/slub.c:3820 [inline]\n kmem_cache_free+0x110/0x760 mm/slub.c:3842\n bfq_put_queue+0x6a7/0xfb0 block/bfq-iosched.c:5428\n bfq_forget_entity block/bfq-wf2q.c:634 [inline]\n bfq_put_idle_entity+0x142/0x240 block/bfq-wf2q.c:645\n bfq_forget_idle+0x189/0x1e0 block/bfq-wf2q.c:671\n bfq_update_vtime block/bfq-wf2q.c:1280 [inline]\n __bfq_lookup_next_entity block/bfq-wf2q.c:1374 [inline]\n bfq_lookup_next_entity+0x350/0x480 block/bfq-wf2q.c:1433\n bfq_update_next_in_service+0x1c0/0x4f0 block/bfq-wf2q.c:128\n bfq_deactivate_entity+0x10a/0x240 block/bfq-wf2q.c:1188\n bfq_deactivate_bfqq block/bfq-wf2q.c:1592 [inline]\n bfq_del_bfqq_busy+0x2e8/0xad0 block/bfq-wf2q.c:1659\n bfq_release_process_ref+0x1cc/0x220 block/bfq-iosched.c:3139\n bfq_split_bfqq+0x481/0xdf0 block/bfq-iosched.c:6754\n bfq_init_rq+0xf29/0x17a0 block/bfq-iosched.c:6934\n bfq_insert_request.isra.0+0xe8/0xa20 block/bfq-iosched.c:6271\n bfq_insert_requests+0x27f/0x390 block/bfq-iosched.c:6323\n blk_mq_insert_request+0x290/0x8f0 block/blk-mq.c:2660\n blk_mq_submit_bio+0x1021/0x15e0 block/blk-mq.c:3143\n __submit_bio+0xa0/0x6b0 block/blk-core.c:639\n __submit_bio_noacct_mq block/blk-core.c:718 [inline]\n submit_bio_noacct_nocheck+0x5b7/0x810 block/blk-core.c:747\n submit_bio_noacct+0xca0/0x1990 block/blk-core.c:847\n __ext4_read_bh fs/ext4/super.c:205 [inline]\n ext4_read_bh+0x15e/0x2e0 fs/ext4/super.c:230\n __read_extent_tree_block+0x304/0x6f0 fs/ext4/extents.c:567\n ext4_find_extent+0x479/0xd20 fs/ext4/extents.c:947\n ext4_ext_map_blocks+0x1a3/0x2680 fs/ext4/extents.c:4182\n ext4_map_blocks+0x929/0x15a0 fs/ext4/inode.c:660\n ext4_iomap_begin_report+0x298/0x480 fs/ext4/inode.c:3569\n iomap_iter+0x3dd/0x1010 fs/iomap/iter.c:91\n iomap_fiemap+0x1f4/0x360 fs/iomap/fiemap.c:80\n ext4_fiemap+0x181/0x210 fs/ext4/extents.c:5051\n ioctl_fiemap.isra.0+0x1b4/0x290 fs/ioctl.c:220\n do_vfs_ioctl+0x31c/0x11a0 fs/ioctl.c:811\n __do_sys_ioctl fs/ioctl.c:869 [inline]\n __se_sys_ioctl+0xae/0x190 fs/ioctl.c:857\n do_syscall_x64 arch/x86/entry/common.c:51 [inline]\n do_syscall_64+0x70/0x120 arch/x86/entry/common.c:81\n entry_SYSCALL_64_after_hwframe+0x78/0xe2\n\ncommit 1ba0403ac644 (\"block, bfq: fix uaf for accessing waker_bfqq after\nsplitting\") fix the problem that if waker_bfqq is in the merge chain,\nand current is the only procress, waker_bfqq can be freed from\nbfq_split_bfqq(). However, the case that waker_bfqq is not in the merge\nchain is missed, and if the procress reference of waker_bfqq is 0,\nwaker_bfqq can be freed as well.\n\nFix the problem by checking procress reference if waker_bfqq is not in\nthe merge_chain.\n\nFixes: 1ba0403ac644 (\"block, bfq: fix uaf for accessing waker_bfqq after splitting\")\nSigned-off-by: Hou Tao <houtao1@huawei.com>\nSigned-off-by: Yu Kuai <yukuai3@huawei.com>\nReviewed-by: Jan Kara <jack@suse.cz>\nLink: https://lore.kernel.org/r/20250108084148.1549973-1-yukuai1@huaweicloud.com\nSigned-off-by: Jens Axboe <axboe@kernel.dk>\n---\n block/bfq-iosched.c | 12 ++++++++++--\n 1 file changed, 10 insertions(+), 2 deletions(-)\n\ndiff --git a/block/bfq-iosched.c b/block/bfq-iosched.c\nindex 95dd7b795935..cad16c163611 100644\n--- a/block/bfq-iosched.c\n+++ b/block/bfq-iosched.c\n@@ -6844,16 +6844,24 @@ static struct bfq_queue *bfq_waker_bfqq(struct bfq_queue *bfqq)\n \t\tif (new_bfqq == waker_bfqq) {\n \t\t\t/*\n \t\t\t * If waker_bfqq is in the merge chain, and current\n-\t\t\t * is the only procress.\n+\t\t\t * is the only process, waker_bfqq can be freed.\n \t\t\t */\n \t\t\tif (bfqq_process_refs(waker_bfqq) == 1)\n \t\t\t\treturn NULL;\n-\t\t\tbreak;\n+\n+\t\t\treturn waker_bfqq;\n \t\t}\n \n \t\tnew_bfqq = new_bfqq->new_bfqq;\n \t}\n \n+\t/*\n+\t * If waker_bfqq is not in the merge chain, and it's procress reference\n+\t * is 0, waker_bfqq can be freed.\n+\t */\n+\tif (bfqq_process_refs(waker_bfqq) == 0)\n+\t\treturn NULL;\n+\n \treturn waker_bfqq;\n }\n \n-- \n2.39.5 (Apple Git-154)\n\n",
  "successes": [
    {
      "downstream_version": "64b0aebed9455477b1900fb34751e9ec4428e675",
      "downstream_patch": "2550149fcdf2934155ff625d76ad4e3d4b25bbc6",
      "commit_date": "2025-01-17 13:34:47 +0100",
      "result": "success",
      "downstream_patch_content": "commit 2550149fcdf2934155ff625d76ad4e3d4b25bbc6\nAuthor: Yu Kuai <yukuai3@huawei.com>\nDate:   Wed Jan 8 16:41:48 2025 +0800\n\n    block, bfq: fix waker_bfqq UAF after bfq_split_bfqq()\n    \n    [ Upstream commit fcede1f0a043ccefe9bc6ad57f12718e42f63f1d ]\n    \n    Our syzkaller report a following UAF for v6.6:\n    \n    BUG: KASAN: slab-use-after-free in bfq_init_rq+0x175d/0x17a0 block/bfq-iosched.c:6958\n    Read of size 8 at addr ffff8881b57147d8 by task fsstress/232726\n    \n    CPU: 2 PID: 232726 Comm: fsstress Not tainted 6.6.0-g3629d1885222 #39\n    Call Trace:\n     <TASK>\n     __dump_stack lib/dump_stack.c:88 [inline]\n     dump_stack_lvl+0x91/0xf0 lib/dump_stack.c:106\n     print_address_description.constprop.0+0x66/0x300 mm/kasan/report.c:364\n     print_report+0x3e/0x70 mm/kasan/report.c:475\n     kasan_report+0xb8/0xf0 mm/kasan/report.c:588\n     hlist_add_head include/linux/list.h:1023 [inline]\n     bfq_init_rq+0x175d/0x17a0 block/bfq-iosched.c:6958\n     bfq_insert_request.isra.0+0xe8/0xa20 block/bfq-iosched.c:6271\n     bfq_insert_requests+0x27f/0x390 block/bfq-iosched.c:6323\n     blk_mq_insert_request+0x290/0x8f0 block/blk-mq.c:2660\n     blk_mq_submit_bio+0x1021/0x15e0 block/blk-mq.c:3143\n     __submit_bio+0xa0/0x6b0 block/blk-core.c:639\n     __submit_bio_noacct_mq block/blk-core.c:718 [inline]\n     submit_bio_noacct_nocheck+0x5b7/0x810 block/blk-core.c:747\n     submit_bio_noacct+0xca0/0x1990 block/blk-core.c:847\n     __ext4_read_bh fs/ext4/super.c:205 [inline]\n     ext4_read_bh+0x15e/0x2e0 fs/ext4/super.c:230\n     __read_extent_tree_block+0x304/0x6f0 fs/ext4/extents.c:567\n     ext4_find_extent+0x479/0xd20 fs/ext4/extents.c:947\n     ext4_ext_map_blocks+0x1a3/0x2680 fs/ext4/extents.c:4182\n     ext4_map_blocks+0x929/0x15a0 fs/ext4/inode.c:660\n     ext4_iomap_begin_report+0x298/0x480 fs/ext4/inode.c:3569\n     iomap_iter+0x3dd/0x1010 fs/iomap/iter.c:91\n     iomap_fiemap+0x1f4/0x360 fs/iomap/fiemap.c:80\n     ext4_fiemap+0x181/0x210 fs/ext4/extents.c:5051\n     ioctl_fiemap.isra.0+0x1b4/0x290 fs/ioctl.c:220\n     do_vfs_ioctl+0x31c/0x11a0 fs/ioctl.c:811\n     __do_sys_ioctl fs/ioctl.c:869 [inline]\n     __se_sys_ioctl+0xae/0x190 fs/ioctl.c:857\n     do_syscall_x64 arch/x86/entry/common.c:51 [inline]\n     do_syscall_64+0x70/0x120 arch/x86/entry/common.c:81\n     entry_SYSCALL_64_after_hwframe+0x78/0xe2\n    \n    Allocated by task 232719:\n     kasan_save_stack+0x22/0x50 mm/kasan/common.c:45\n     kasan_set_track+0x25/0x30 mm/kasan/common.c:52\n     __kasan_slab_alloc+0x87/0x90 mm/kasan/common.c:328\n     kasan_slab_alloc include/linux/kasan.h:188 [inline]\n     slab_post_alloc_hook mm/slab.h:768 [inline]\n     slab_alloc_node mm/slub.c:3492 [inline]\n     kmem_cache_alloc_node+0x1b8/0x6f0 mm/slub.c:3537\n     bfq_get_queue+0x215/0x1f00 block/bfq-iosched.c:5869\n     bfq_get_bfqq_handle_split+0x167/0x5f0 block/bfq-iosched.c:6776\n     bfq_init_rq+0x13a4/0x17a0 block/bfq-iosched.c:6938\n     bfq_insert_request.isra.0+0xe8/0xa20 block/bfq-iosched.c:6271\n     bfq_insert_requests+0x27f/0x390 block/bfq-iosched.c:6323\n     blk_mq_insert_request+0x290/0x8f0 block/blk-mq.c:2660\n     blk_mq_submit_bio+0x1021/0x15e0 block/blk-mq.c:3143\n     __submit_bio+0xa0/0x6b0 block/blk-core.c:639\n     __submit_bio_noacct_mq block/blk-core.c:718 [inline]\n     submit_bio_noacct_nocheck+0x5b7/0x810 block/blk-core.c:747\n     submit_bio_noacct+0xca0/0x1990 block/blk-core.c:847\n     __ext4_read_bh fs/ext4/super.c:205 [inline]\n     ext4_read_bh_nowait+0x15a/0x240 fs/ext4/super.c:217\n     ext4_read_bh_lock+0xac/0xd0 fs/ext4/super.c:242\n     ext4_bread_batch+0x268/0x500 fs/ext4/inode.c:958\n     __ext4_find_entry+0x448/0x10f0 fs/ext4/namei.c:1671\n     ext4_lookup_entry fs/ext4/namei.c:1774 [inline]\n     ext4_lookup.part.0+0x359/0x6f0 fs/ext4/namei.c:1842\n     ext4_lookup+0x72/0x90 fs/ext4/namei.c:1839\n     __lookup_slow+0x257/0x480 fs/namei.c:1696\n     lookup_slow fs/namei.c:1713 [inline]\n     walk_component+0x454/0x5c0 fs/namei.c:2004\n     link_path_walk.part.0+0x773/0xda0 fs/namei.c:2331\n     link_path_walk fs/namei.c:3826 [inline]\n     path_openat+0x1b9/0x520 fs/namei.c:3826\n     do_filp_open+0x1b7/0x400 fs/namei.c:3857\n     do_sys_openat2+0x5dc/0x6e0 fs/open.c:1428\n     do_sys_open fs/open.c:1443 [inline]\n     __do_sys_openat fs/open.c:1459 [inline]\n     __se_sys_openat fs/open.c:1454 [inline]\n     __x64_sys_openat+0x148/0x200 fs/open.c:1454\n     do_syscall_x64 arch/x86/entry/common.c:51 [inline]\n     do_syscall_64+0x70/0x120 arch/x86/entry/common.c:81\n     entry_SYSCALL_64_after_hwframe+0x78/0xe2\n    \n    Freed by task 232726:\n     kasan_save_stack+0x22/0x50 mm/kasan/common.c:45\n     kasan_set_track+0x25/0x30 mm/kasan/common.c:52\n     kasan_save_free_info+0x2b/0x50 mm/kasan/generic.c:522\n     ____kasan_slab_free mm/kasan/common.c:236 [inline]\n     __kasan_slab_free+0x12a/0x1b0 mm/kasan/common.c:244\n     kasan_slab_free include/linux/kasan.h:164 [inline]\n     slab_free_hook mm/slub.c:1827 [inline]\n     slab_free_freelist_hook mm/slub.c:1853 [inline]\n     slab_free mm/slub.c:3820 [inline]\n     kmem_cache_free+0x110/0x760 mm/slub.c:3842\n     bfq_put_queue+0x6a7/0xfb0 block/bfq-iosched.c:5428\n     bfq_forget_entity block/bfq-wf2q.c:634 [inline]\n     bfq_put_idle_entity+0x142/0x240 block/bfq-wf2q.c:645\n     bfq_forget_idle+0x189/0x1e0 block/bfq-wf2q.c:671\n     bfq_update_vtime block/bfq-wf2q.c:1280 [inline]\n     __bfq_lookup_next_entity block/bfq-wf2q.c:1374 [inline]\n     bfq_lookup_next_entity+0x350/0x480 block/bfq-wf2q.c:1433\n     bfq_update_next_in_service+0x1c0/0x4f0 block/bfq-wf2q.c:128\n     bfq_deactivate_entity+0x10a/0x240 block/bfq-wf2q.c:1188\n     bfq_deactivate_bfqq block/bfq-wf2q.c:1592 [inline]\n     bfq_del_bfqq_busy+0x2e8/0xad0 block/bfq-wf2q.c:1659\n     bfq_release_process_ref+0x1cc/0x220 block/bfq-iosched.c:3139\n     bfq_split_bfqq+0x481/0xdf0 block/bfq-iosched.c:6754\n     bfq_init_rq+0xf29/0x17a0 block/bfq-iosched.c:6934\n     bfq_insert_request.isra.0+0xe8/0xa20 block/bfq-iosched.c:6271\n     bfq_insert_requests+0x27f/0x390 block/bfq-iosched.c:6323\n     blk_mq_insert_request+0x290/0x8f0 block/blk-mq.c:2660\n     blk_mq_submit_bio+0x1021/0x15e0 block/blk-mq.c:3143\n     __submit_bio+0xa0/0x6b0 block/blk-core.c:639\n     __submit_bio_noacct_mq block/blk-core.c:718 [inline]\n     submit_bio_noacct_nocheck+0x5b7/0x810 block/blk-core.c:747\n     submit_bio_noacct+0xca0/0x1990 block/blk-core.c:847\n     __ext4_read_bh fs/ext4/super.c:205 [inline]\n     ext4_read_bh+0x15e/0x2e0 fs/ext4/super.c:230\n     __read_extent_tree_block+0x304/0x6f0 fs/ext4/extents.c:567\n     ext4_find_extent+0x479/0xd20 fs/ext4/extents.c:947\n     ext4_ext_map_blocks+0x1a3/0x2680 fs/ext4/extents.c:4182\n     ext4_map_blocks+0x929/0x15a0 fs/ext4/inode.c:660\n     ext4_iomap_begin_report+0x298/0x480 fs/ext4/inode.c:3569\n     iomap_iter+0x3dd/0x1010 fs/iomap/iter.c:91\n     iomap_fiemap+0x1f4/0x360 fs/iomap/fiemap.c:80\n     ext4_fiemap+0x181/0x210 fs/ext4/extents.c:5051\n     ioctl_fiemap.isra.0+0x1b4/0x290 fs/ioctl.c:220\n     do_vfs_ioctl+0x31c/0x11a0 fs/ioctl.c:811\n     __do_sys_ioctl fs/ioctl.c:869 [inline]\n     __se_sys_ioctl+0xae/0x190 fs/ioctl.c:857\n     do_syscall_x64 arch/x86/entry/common.c:51 [inline]\n     do_syscall_64+0x70/0x120 arch/x86/entry/common.c:81\n     entry_SYSCALL_64_after_hwframe+0x78/0xe2\n    \n    commit 1ba0403ac644 (\"block, bfq: fix uaf for accessing waker_bfqq after\n    splitting\") fix the problem that if waker_bfqq is in the merge chain,\n    and current is the only procress, waker_bfqq can be freed from\n    bfq_split_bfqq(). However, the case that waker_bfqq is not in the merge\n    chain is missed, and if the procress reference of waker_bfqq is 0,\n    waker_bfqq can be freed as well.\n    \n    Fix the problem by checking procress reference if waker_bfqq is not in\n    the merge_chain.\n    \n    Fixes: 1ba0403ac644 (\"block, bfq: fix uaf for accessing waker_bfqq after splitting\")\n    Signed-off-by: Hou Tao <houtao1@huawei.com>\n    Signed-off-by: Yu Kuai <yukuai3@huawei.com>\n    Reviewed-by: Jan Kara <jack@suse.cz>\n    Link: https://lore.kernel.org/r/20250108084148.1549973-1-yukuai1@huaweicloud.com\n    Signed-off-by: Jens Axboe <axboe@kernel.dk>\n    Signed-off-by: Sasha Levin <sashal@kernel.org>\n\ndiff --git a/block/bfq-iosched.c b/block/bfq-iosched.c\nindex 8e797782cfe3..f75945764653 100644\n--- a/block/bfq-iosched.c\n+++ b/block/bfq-iosched.c\n@@ -6733,16 +6733,24 @@ static struct bfq_queue *bfq_waker_bfqq(struct bfq_queue *bfqq)\n \t\tif (new_bfqq == waker_bfqq) {\n \t\t\t/*\n \t\t\t * If waker_bfqq is in the merge chain, and current\n-\t\t\t * is the only procress.\n+\t\t\t * is the only process, waker_bfqq can be freed.\n \t\t\t */\n \t\t\tif (bfqq_process_refs(waker_bfqq) == 1)\n \t\t\t\treturn NULL;\n-\t\t\tbreak;\n+\n+\t\t\treturn waker_bfqq;\n \t\t}\n \n \t\tnew_bfqq = new_bfqq->new_bfqq;\n \t}\n \n+\t/*\n+\t * If waker_bfqq is not in the merge chain, and it's procress reference\n+\t * is 0, waker_bfqq can be freed.\n+\t */\n+\tif (bfqq_process_refs(waker_bfqq) == 0)\n+\t\treturn NULL;\n+\n \treturn waker_bfqq;\n }\n \n"
    },
    {
      "downstream_version": "53e25b10a28edaf8c2a1d3916fd8929501a50dfc",
      "downstream_patch": "be3eed59ac01f429ac10aaa46e26f653bcf581ab",
      "commit_date": "2025-01-17 13:36:25 +0100",
      "result": "success",
      "downstream_patch_content": "commit be3eed59ac01f429ac10aaa46e26f653bcf581ab\nAuthor: Yu Kuai <yukuai3@huawei.com>\nDate:   Wed Jan 8 16:41:48 2025 +0800\n\n    block, bfq: fix waker_bfqq UAF after bfq_split_bfqq()\n    \n    [ Upstream commit fcede1f0a043ccefe9bc6ad57f12718e42f63f1d ]\n    \n    Our syzkaller report a following UAF for v6.6:\n    \n    BUG: KASAN: slab-use-after-free in bfq_init_rq+0x175d/0x17a0 block/bfq-iosched.c:6958\n    Read of size 8 at addr ffff8881b57147d8 by task fsstress/232726\n    \n    CPU: 2 PID: 232726 Comm: fsstress Not tainted 6.6.0-g3629d1885222 #39\n    Call Trace:\n     <TASK>\n     __dump_stack lib/dump_stack.c:88 [inline]\n     dump_stack_lvl+0x91/0xf0 lib/dump_stack.c:106\n     print_address_description.constprop.0+0x66/0x300 mm/kasan/report.c:364\n     print_report+0x3e/0x70 mm/kasan/report.c:475\n     kasan_report+0xb8/0xf0 mm/kasan/report.c:588\n     hlist_add_head include/linux/list.h:1023 [inline]\n     bfq_init_rq+0x175d/0x17a0 block/bfq-iosched.c:6958\n     bfq_insert_request.isra.0+0xe8/0xa20 block/bfq-iosched.c:6271\n     bfq_insert_requests+0x27f/0x390 block/bfq-iosched.c:6323\n     blk_mq_insert_request+0x290/0x8f0 block/blk-mq.c:2660\n     blk_mq_submit_bio+0x1021/0x15e0 block/blk-mq.c:3143\n     __submit_bio+0xa0/0x6b0 block/blk-core.c:639\n     __submit_bio_noacct_mq block/blk-core.c:718 [inline]\n     submit_bio_noacct_nocheck+0x5b7/0x810 block/blk-core.c:747\n     submit_bio_noacct+0xca0/0x1990 block/blk-core.c:847\n     __ext4_read_bh fs/ext4/super.c:205 [inline]\n     ext4_read_bh+0x15e/0x2e0 fs/ext4/super.c:230\n     __read_extent_tree_block+0x304/0x6f0 fs/ext4/extents.c:567\n     ext4_find_extent+0x479/0xd20 fs/ext4/extents.c:947\n     ext4_ext_map_blocks+0x1a3/0x2680 fs/ext4/extents.c:4182\n     ext4_map_blocks+0x929/0x15a0 fs/ext4/inode.c:660\n     ext4_iomap_begin_report+0x298/0x480 fs/ext4/inode.c:3569\n     iomap_iter+0x3dd/0x1010 fs/iomap/iter.c:91\n     iomap_fiemap+0x1f4/0x360 fs/iomap/fiemap.c:80\n     ext4_fiemap+0x181/0x210 fs/ext4/extents.c:5051\n     ioctl_fiemap.isra.0+0x1b4/0x290 fs/ioctl.c:220\n     do_vfs_ioctl+0x31c/0x11a0 fs/ioctl.c:811\n     __do_sys_ioctl fs/ioctl.c:869 [inline]\n     __se_sys_ioctl+0xae/0x190 fs/ioctl.c:857\n     do_syscall_x64 arch/x86/entry/common.c:51 [inline]\n     do_syscall_64+0x70/0x120 arch/x86/entry/common.c:81\n     entry_SYSCALL_64_after_hwframe+0x78/0xe2\n    \n    Allocated by task 232719:\n     kasan_save_stack+0x22/0x50 mm/kasan/common.c:45\n     kasan_set_track+0x25/0x30 mm/kasan/common.c:52\n     __kasan_slab_alloc+0x87/0x90 mm/kasan/common.c:328\n     kasan_slab_alloc include/linux/kasan.h:188 [inline]\n     slab_post_alloc_hook mm/slab.h:768 [inline]\n     slab_alloc_node mm/slub.c:3492 [inline]\n     kmem_cache_alloc_node+0x1b8/0x6f0 mm/slub.c:3537\n     bfq_get_queue+0x215/0x1f00 block/bfq-iosched.c:5869\n     bfq_get_bfqq_handle_split+0x167/0x5f0 block/bfq-iosched.c:6776\n     bfq_init_rq+0x13a4/0x17a0 block/bfq-iosched.c:6938\n     bfq_insert_request.isra.0+0xe8/0xa20 block/bfq-iosched.c:6271\n     bfq_insert_requests+0x27f/0x390 block/bfq-iosched.c:6323\n     blk_mq_insert_request+0x290/0x8f0 block/blk-mq.c:2660\n     blk_mq_submit_bio+0x1021/0x15e0 block/blk-mq.c:3143\n     __submit_bio+0xa0/0x6b0 block/blk-core.c:639\n     __submit_bio_noacct_mq block/blk-core.c:718 [inline]\n     submit_bio_noacct_nocheck+0x5b7/0x810 block/blk-core.c:747\n     submit_bio_noacct+0xca0/0x1990 block/blk-core.c:847\n     __ext4_read_bh fs/ext4/super.c:205 [inline]\n     ext4_read_bh_nowait+0x15a/0x240 fs/ext4/super.c:217\n     ext4_read_bh_lock+0xac/0xd0 fs/ext4/super.c:242\n     ext4_bread_batch+0x268/0x500 fs/ext4/inode.c:958\n     __ext4_find_entry+0x448/0x10f0 fs/ext4/namei.c:1671\n     ext4_lookup_entry fs/ext4/namei.c:1774 [inline]\n     ext4_lookup.part.0+0x359/0x6f0 fs/ext4/namei.c:1842\n     ext4_lookup+0x72/0x90 fs/ext4/namei.c:1839\n     __lookup_slow+0x257/0x480 fs/namei.c:1696\n     lookup_slow fs/namei.c:1713 [inline]\n     walk_component+0x454/0x5c0 fs/namei.c:2004\n     link_path_walk.part.0+0x773/0xda0 fs/namei.c:2331\n     link_path_walk fs/namei.c:3826 [inline]\n     path_openat+0x1b9/0x520 fs/namei.c:3826\n     do_filp_open+0x1b7/0x400 fs/namei.c:3857\n     do_sys_openat2+0x5dc/0x6e0 fs/open.c:1428\n     do_sys_open fs/open.c:1443 [inline]\n     __do_sys_openat fs/open.c:1459 [inline]\n     __se_sys_openat fs/open.c:1454 [inline]\n     __x64_sys_openat+0x148/0x200 fs/open.c:1454\n     do_syscall_x64 arch/x86/entry/common.c:51 [inline]\n     do_syscall_64+0x70/0x120 arch/x86/entry/common.c:81\n     entry_SYSCALL_64_after_hwframe+0x78/0xe2\n    \n    Freed by task 232726:\n     kasan_save_stack+0x22/0x50 mm/kasan/common.c:45\n     kasan_set_track+0x25/0x30 mm/kasan/common.c:52\n     kasan_save_free_info+0x2b/0x50 mm/kasan/generic.c:522\n     ____kasan_slab_free mm/kasan/common.c:236 [inline]\n     __kasan_slab_free+0x12a/0x1b0 mm/kasan/common.c:244\n     kasan_slab_free include/linux/kasan.h:164 [inline]\n     slab_free_hook mm/slub.c:1827 [inline]\n     slab_free_freelist_hook mm/slub.c:1853 [inline]\n     slab_free mm/slub.c:3820 [inline]\n     kmem_cache_free+0x110/0x760 mm/slub.c:3842\n     bfq_put_queue+0x6a7/0xfb0 block/bfq-iosched.c:5428\n     bfq_forget_entity block/bfq-wf2q.c:634 [inline]\n     bfq_put_idle_entity+0x142/0x240 block/bfq-wf2q.c:645\n     bfq_forget_idle+0x189/0x1e0 block/bfq-wf2q.c:671\n     bfq_update_vtime block/bfq-wf2q.c:1280 [inline]\n     __bfq_lookup_next_entity block/bfq-wf2q.c:1374 [inline]\n     bfq_lookup_next_entity+0x350/0x480 block/bfq-wf2q.c:1433\n     bfq_update_next_in_service+0x1c0/0x4f0 block/bfq-wf2q.c:128\n     bfq_deactivate_entity+0x10a/0x240 block/bfq-wf2q.c:1188\n     bfq_deactivate_bfqq block/bfq-wf2q.c:1592 [inline]\n     bfq_del_bfqq_busy+0x2e8/0xad0 block/bfq-wf2q.c:1659\n     bfq_release_process_ref+0x1cc/0x220 block/bfq-iosched.c:3139\n     bfq_split_bfqq+0x481/0xdf0 block/bfq-iosched.c:6754\n     bfq_init_rq+0xf29/0x17a0 block/bfq-iosched.c:6934\n     bfq_insert_request.isra.0+0xe8/0xa20 block/bfq-iosched.c:6271\n     bfq_insert_requests+0x27f/0x390 block/bfq-iosched.c:6323\n     blk_mq_insert_request+0x290/0x8f0 block/blk-mq.c:2660\n     blk_mq_submit_bio+0x1021/0x15e0 block/blk-mq.c:3143\n     __submit_bio+0xa0/0x6b0 block/blk-core.c:639\n     __submit_bio_noacct_mq block/blk-core.c:718 [inline]\n     submit_bio_noacct_nocheck+0x5b7/0x810 block/blk-core.c:747\n     submit_bio_noacct+0xca0/0x1990 block/blk-core.c:847\n     __ext4_read_bh fs/ext4/super.c:205 [inline]\n     ext4_read_bh+0x15e/0x2e0 fs/ext4/super.c:230\n     __read_extent_tree_block+0x304/0x6f0 fs/ext4/extents.c:567\n     ext4_find_extent+0x479/0xd20 fs/ext4/extents.c:947\n     ext4_ext_map_blocks+0x1a3/0x2680 fs/ext4/extents.c:4182\n     ext4_map_blocks+0x929/0x15a0 fs/ext4/inode.c:660\n     ext4_iomap_begin_report+0x298/0x480 fs/ext4/inode.c:3569\n     iomap_iter+0x3dd/0x1010 fs/iomap/iter.c:91\n     iomap_fiemap+0x1f4/0x360 fs/iomap/fiemap.c:80\n     ext4_fiemap+0x181/0x210 fs/ext4/extents.c:5051\n     ioctl_fiemap.isra.0+0x1b4/0x290 fs/ioctl.c:220\n     do_vfs_ioctl+0x31c/0x11a0 fs/ioctl.c:811\n     __do_sys_ioctl fs/ioctl.c:869 [inline]\n     __se_sys_ioctl+0xae/0x190 fs/ioctl.c:857\n     do_syscall_x64 arch/x86/entry/common.c:51 [inline]\n     do_syscall_64+0x70/0x120 arch/x86/entry/common.c:81\n     entry_SYSCALL_64_after_hwframe+0x78/0xe2\n    \n    commit 1ba0403ac644 (\"block, bfq: fix uaf for accessing waker_bfqq after\n    splitting\") fix the problem that if waker_bfqq is in the merge chain,\n    and current is the only procress, waker_bfqq can be freed from\n    bfq_split_bfqq(). However, the case that waker_bfqq is not in the merge\n    chain is missed, and if the procress reference of waker_bfqq is 0,\n    waker_bfqq can be freed as well.\n    \n    Fix the problem by checking procress reference if waker_bfqq is not in\n    the merge_chain.\n    \n    Fixes: 1ba0403ac644 (\"block, bfq: fix uaf for accessing waker_bfqq after splitting\")\n    Signed-off-by: Hou Tao <houtao1@huawei.com>\n    Signed-off-by: Yu Kuai <yukuai3@huawei.com>\n    Reviewed-by: Jan Kara <jack@suse.cz>\n    Link: https://lore.kernel.org/r/20250108084148.1549973-1-yukuai1@huaweicloud.com\n    Signed-off-by: Jens Axboe <axboe@kernel.dk>\n    Signed-off-by: Sasha Levin <sashal@kernel.org>\n\ndiff --git a/block/bfq-iosched.c b/block/bfq-iosched.c\nindex dd8ca3f7ba60..617d6802b8a0 100644\n--- a/block/bfq-iosched.c\n+++ b/block/bfq-iosched.c\n@@ -6843,16 +6843,24 @@ static struct bfq_queue *bfq_waker_bfqq(struct bfq_queue *bfqq)\n \t\tif (new_bfqq == waker_bfqq) {\n \t\t\t/*\n \t\t\t * If waker_bfqq is in the merge chain, and current\n-\t\t\t * is the only procress.\n+\t\t\t * is the only process, waker_bfqq can be freed.\n \t\t\t */\n \t\t\tif (bfqq_process_refs(waker_bfqq) == 1)\n \t\t\t\treturn NULL;\n-\t\t\tbreak;\n+\n+\t\t\treturn waker_bfqq;\n \t\t}\n \n \t\tnew_bfqq = new_bfqq->new_bfqq;\n \t}\n \n+\t/*\n+\t * If waker_bfqq is not in the merge chain, and it's procress reference\n+\t * is 0, waker_bfqq can be freed.\n+\t */\n+\tif (bfqq_process_refs(waker_bfqq) == 0)\n+\t\treturn NULL;\n+\n \treturn waker_bfqq;\n }\n \n"
    },
    {
      "downstream_version": "42268d885e44af875a6474f7bba519cc6cea6a9d",
      "downstream_patch": "bc2aeb35ff167e0c6b0cedf0c96a5c41e6cba1ed",
      "commit_date": "2025-01-17 13:40:59 +0100",
      "result": "success",
      "downstream_patch_content": "commit bc2aeb35ff167e0c6b0cedf0c96a5c41e6cba1ed\nAuthor: Yu Kuai <yukuai3@huawei.com>\nDate:   Wed Jan 8 16:41:48 2025 +0800\n\n    block, bfq: fix waker_bfqq UAF after bfq_split_bfqq()\n    \n    [ Upstream commit fcede1f0a043ccefe9bc6ad57f12718e42f63f1d ]\n    \n    Our syzkaller report a following UAF for v6.6:\n    \n    BUG: KASAN: slab-use-after-free in bfq_init_rq+0x175d/0x17a0 block/bfq-iosched.c:6958\n    Read of size 8 at addr ffff8881b57147d8 by task fsstress/232726\n    \n    CPU: 2 PID: 232726 Comm: fsstress Not tainted 6.6.0-g3629d1885222 #39\n    Call Trace:\n     <TASK>\n     __dump_stack lib/dump_stack.c:88 [inline]\n     dump_stack_lvl+0x91/0xf0 lib/dump_stack.c:106\n     print_address_description.constprop.0+0x66/0x300 mm/kasan/report.c:364\n     print_report+0x3e/0x70 mm/kasan/report.c:475\n     kasan_report+0xb8/0xf0 mm/kasan/report.c:588\n     hlist_add_head include/linux/list.h:1023 [inline]\n     bfq_init_rq+0x175d/0x17a0 block/bfq-iosched.c:6958\n     bfq_insert_request.isra.0+0xe8/0xa20 block/bfq-iosched.c:6271\n     bfq_insert_requests+0x27f/0x390 block/bfq-iosched.c:6323\n     blk_mq_insert_request+0x290/0x8f0 block/blk-mq.c:2660\n     blk_mq_submit_bio+0x1021/0x15e0 block/blk-mq.c:3143\n     __submit_bio+0xa0/0x6b0 block/blk-core.c:639\n     __submit_bio_noacct_mq block/blk-core.c:718 [inline]\n     submit_bio_noacct_nocheck+0x5b7/0x810 block/blk-core.c:747\n     submit_bio_noacct+0xca0/0x1990 block/blk-core.c:847\n     __ext4_read_bh fs/ext4/super.c:205 [inline]\n     ext4_read_bh+0x15e/0x2e0 fs/ext4/super.c:230\n     __read_extent_tree_block+0x304/0x6f0 fs/ext4/extents.c:567\n     ext4_find_extent+0x479/0xd20 fs/ext4/extents.c:947\n     ext4_ext_map_blocks+0x1a3/0x2680 fs/ext4/extents.c:4182\n     ext4_map_blocks+0x929/0x15a0 fs/ext4/inode.c:660\n     ext4_iomap_begin_report+0x298/0x480 fs/ext4/inode.c:3569\n     iomap_iter+0x3dd/0x1010 fs/iomap/iter.c:91\n     iomap_fiemap+0x1f4/0x360 fs/iomap/fiemap.c:80\n     ext4_fiemap+0x181/0x210 fs/ext4/extents.c:5051\n     ioctl_fiemap.isra.0+0x1b4/0x290 fs/ioctl.c:220\n     do_vfs_ioctl+0x31c/0x11a0 fs/ioctl.c:811\n     __do_sys_ioctl fs/ioctl.c:869 [inline]\n     __se_sys_ioctl+0xae/0x190 fs/ioctl.c:857\n     do_syscall_x64 arch/x86/entry/common.c:51 [inline]\n     do_syscall_64+0x70/0x120 arch/x86/entry/common.c:81\n     entry_SYSCALL_64_after_hwframe+0x78/0xe2\n    \n    Allocated by task 232719:\n     kasan_save_stack+0x22/0x50 mm/kasan/common.c:45\n     kasan_set_track+0x25/0x30 mm/kasan/common.c:52\n     __kasan_slab_alloc+0x87/0x90 mm/kasan/common.c:328\n     kasan_slab_alloc include/linux/kasan.h:188 [inline]\n     slab_post_alloc_hook mm/slab.h:768 [inline]\n     slab_alloc_node mm/slub.c:3492 [inline]\n     kmem_cache_alloc_node+0x1b8/0x6f0 mm/slub.c:3537\n     bfq_get_queue+0x215/0x1f00 block/bfq-iosched.c:5869\n     bfq_get_bfqq_handle_split+0x167/0x5f0 block/bfq-iosched.c:6776\n     bfq_init_rq+0x13a4/0x17a0 block/bfq-iosched.c:6938\n     bfq_insert_request.isra.0+0xe8/0xa20 block/bfq-iosched.c:6271\n     bfq_insert_requests+0x27f/0x390 block/bfq-iosched.c:6323\n     blk_mq_insert_request+0x290/0x8f0 block/blk-mq.c:2660\n     blk_mq_submit_bio+0x1021/0x15e0 block/blk-mq.c:3143\n     __submit_bio+0xa0/0x6b0 block/blk-core.c:639\n     __submit_bio_noacct_mq block/blk-core.c:718 [inline]\n     submit_bio_noacct_nocheck+0x5b7/0x810 block/blk-core.c:747\n     submit_bio_noacct+0xca0/0x1990 block/blk-core.c:847\n     __ext4_read_bh fs/ext4/super.c:205 [inline]\n     ext4_read_bh_nowait+0x15a/0x240 fs/ext4/super.c:217\n     ext4_read_bh_lock+0xac/0xd0 fs/ext4/super.c:242\n     ext4_bread_batch+0x268/0x500 fs/ext4/inode.c:958\n     __ext4_find_entry+0x448/0x10f0 fs/ext4/namei.c:1671\n     ext4_lookup_entry fs/ext4/namei.c:1774 [inline]\n     ext4_lookup.part.0+0x359/0x6f0 fs/ext4/namei.c:1842\n     ext4_lookup+0x72/0x90 fs/ext4/namei.c:1839\n     __lookup_slow+0x257/0x480 fs/namei.c:1696\n     lookup_slow fs/namei.c:1713 [inline]\n     walk_component+0x454/0x5c0 fs/namei.c:2004\n     link_path_walk.part.0+0x773/0xda0 fs/namei.c:2331\n     link_path_walk fs/namei.c:3826 [inline]\n     path_openat+0x1b9/0x520 fs/namei.c:3826\n     do_filp_open+0x1b7/0x400 fs/namei.c:3857\n     do_sys_openat2+0x5dc/0x6e0 fs/open.c:1428\n     do_sys_open fs/open.c:1443 [inline]\n     __do_sys_openat fs/open.c:1459 [inline]\n     __se_sys_openat fs/open.c:1454 [inline]\n     __x64_sys_openat+0x148/0x200 fs/open.c:1454\n     do_syscall_x64 arch/x86/entry/common.c:51 [inline]\n     do_syscall_64+0x70/0x120 arch/x86/entry/common.c:81\n     entry_SYSCALL_64_after_hwframe+0x78/0xe2\n    \n    Freed by task 232726:\n     kasan_save_stack+0x22/0x50 mm/kasan/common.c:45\n     kasan_set_track+0x25/0x30 mm/kasan/common.c:52\n     kasan_save_free_info+0x2b/0x50 mm/kasan/generic.c:522\n     ____kasan_slab_free mm/kasan/common.c:236 [inline]\n     __kasan_slab_free+0x12a/0x1b0 mm/kasan/common.c:244\n     kasan_slab_free include/linux/kasan.h:164 [inline]\n     slab_free_hook mm/slub.c:1827 [inline]\n     slab_free_freelist_hook mm/slub.c:1853 [inline]\n     slab_free mm/slub.c:3820 [inline]\n     kmem_cache_free+0x110/0x760 mm/slub.c:3842\n     bfq_put_queue+0x6a7/0xfb0 block/bfq-iosched.c:5428\n     bfq_forget_entity block/bfq-wf2q.c:634 [inline]\n     bfq_put_idle_entity+0x142/0x240 block/bfq-wf2q.c:645\n     bfq_forget_idle+0x189/0x1e0 block/bfq-wf2q.c:671\n     bfq_update_vtime block/bfq-wf2q.c:1280 [inline]\n     __bfq_lookup_next_entity block/bfq-wf2q.c:1374 [inline]\n     bfq_lookup_next_entity+0x350/0x480 block/bfq-wf2q.c:1433\n     bfq_update_next_in_service+0x1c0/0x4f0 block/bfq-wf2q.c:128\n     bfq_deactivate_entity+0x10a/0x240 block/bfq-wf2q.c:1188\n     bfq_deactivate_bfqq block/bfq-wf2q.c:1592 [inline]\n     bfq_del_bfqq_busy+0x2e8/0xad0 block/bfq-wf2q.c:1659\n     bfq_release_process_ref+0x1cc/0x220 block/bfq-iosched.c:3139\n     bfq_split_bfqq+0x481/0xdf0 block/bfq-iosched.c:6754\n     bfq_init_rq+0xf29/0x17a0 block/bfq-iosched.c:6934\n     bfq_insert_request.isra.0+0xe8/0xa20 block/bfq-iosched.c:6271\n     bfq_insert_requests+0x27f/0x390 block/bfq-iosched.c:6323\n     blk_mq_insert_request+0x290/0x8f0 block/blk-mq.c:2660\n     blk_mq_submit_bio+0x1021/0x15e0 block/blk-mq.c:3143\n     __submit_bio+0xa0/0x6b0 block/blk-core.c:639\n     __submit_bio_noacct_mq block/blk-core.c:718 [inline]\n     submit_bio_noacct_nocheck+0x5b7/0x810 block/blk-core.c:747\n     submit_bio_noacct+0xca0/0x1990 block/blk-core.c:847\n     __ext4_read_bh fs/ext4/super.c:205 [inline]\n     ext4_read_bh+0x15e/0x2e0 fs/ext4/super.c:230\n     __read_extent_tree_block+0x304/0x6f0 fs/ext4/extents.c:567\n     ext4_find_extent+0x479/0xd20 fs/ext4/extents.c:947\n     ext4_ext_map_blocks+0x1a3/0x2680 fs/ext4/extents.c:4182\n     ext4_map_blocks+0x929/0x15a0 fs/ext4/inode.c:660\n     ext4_iomap_begin_report+0x298/0x480 fs/ext4/inode.c:3569\n     iomap_iter+0x3dd/0x1010 fs/iomap/iter.c:91\n     iomap_fiemap+0x1f4/0x360 fs/iomap/fiemap.c:80\n     ext4_fiemap+0x181/0x210 fs/ext4/extents.c:5051\n     ioctl_fiemap.isra.0+0x1b4/0x290 fs/ioctl.c:220\n     do_vfs_ioctl+0x31c/0x11a0 fs/ioctl.c:811\n     __do_sys_ioctl fs/ioctl.c:869 [inline]\n     __se_sys_ioctl+0xae/0x190 fs/ioctl.c:857\n     do_syscall_x64 arch/x86/entry/common.c:51 [inline]\n     do_syscall_64+0x70/0x120 arch/x86/entry/common.c:81\n     entry_SYSCALL_64_after_hwframe+0x78/0xe2\n    \n    commit 1ba0403ac644 (\"block, bfq: fix uaf for accessing waker_bfqq after\n    splitting\") fix the problem that if waker_bfqq is in the merge chain,\n    and current is the only procress, waker_bfqq can be freed from\n    bfq_split_bfqq(). However, the case that waker_bfqq is not in the merge\n    chain is missed, and if the procress reference of waker_bfqq is 0,\n    waker_bfqq can be freed as well.\n    \n    Fix the problem by checking procress reference if waker_bfqq is not in\n    the merge_chain.\n    \n    Fixes: 1ba0403ac644 (\"block, bfq: fix uaf for accessing waker_bfqq after splitting\")\n    Signed-off-by: Hou Tao <houtao1@huawei.com>\n    Signed-off-by: Yu Kuai <yukuai3@huawei.com>\n    Reviewed-by: Jan Kara <jack@suse.cz>\n    Link: https://lore.kernel.org/r/20250108084148.1549973-1-yukuai1@huaweicloud.com\n    Signed-off-by: Jens Axboe <axboe@kernel.dk>\n    Signed-off-by: Sasha Levin <sashal@kernel.org>\n\ndiff --git a/block/bfq-iosched.c b/block/bfq-iosched.c\nindex 95dd7b795935..cad16c163611 100644\n--- a/block/bfq-iosched.c\n+++ b/block/bfq-iosched.c\n@@ -6844,16 +6844,24 @@ static struct bfq_queue *bfq_waker_bfqq(struct bfq_queue *bfqq)\n \t\tif (new_bfqq == waker_bfqq) {\n \t\t\t/*\n \t\t\t * If waker_bfqq is in the merge chain, and current\n-\t\t\t * is the only procress.\n+\t\t\t * is the only process, waker_bfqq can be freed.\n \t\t\t */\n \t\t\tif (bfqq_process_refs(waker_bfqq) == 1)\n \t\t\t\treturn NULL;\n-\t\t\tbreak;\n+\n+\t\t\treturn waker_bfqq;\n \t\t}\n \n \t\tnew_bfqq = new_bfqq->new_bfqq;\n \t}\n \n+\t/*\n+\t * If waker_bfqq is not in the merge chain, and it's procress reference\n+\t * is 0, waker_bfqq can be freed.\n+\t */\n+\tif (bfqq_process_refs(waker_bfqq) == 0)\n+\t\treturn NULL;\n+\n \treturn waker_bfqq;\n }\n \n"
    },
    {
      "downstream_version": "e43dfc4a9c15b92fed8d12d7b4a343824a8aac9b",
      "downstream_patch": "f587c1ac68956c4703857d650d9b1cd7bb2ac4d7",
      "commit_date": "2025-01-23 17:15:55 +0100",
      "result": "success",
      "downstream_patch_content": "commit f587c1ac68956c4703857d650d9b1cd7bb2ac4d7\nAuthor: Yu Kuai <yukuai3@huawei.com>\nDate:   Wed Jan 8 16:41:48 2025 +0800\n\n    block, bfq: fix waker_bfqq UAF after bfq_split_bfqq()\n    \n    [ Upstream commit fcede1f0a043ccefe9bc6ad57f12718e42f63f1d ]\n    \n    Our syzkaller report a following UAF for v6.6:\n    \n    BUG: KASAN: slab-use-after-free in bfq_init_rq+0x175d/0x17a0 block/bfq-iosched.c:6958\n    Read of size 8 at addr ffff8881b57147d8 by task fsstress/232726\n    \n    CPU: 2 PID: 232726 Comm: fsstress Not tainted 6.6.0-g3629d1885222 #39\n    Call Trace:\n     <TASK>\n     __dump_stack lib/dump_stack.c:88 [inline]\n     dump_stack_lvl+0x91/0xf0 lib/dump_stack.c:106\n     print_address_description.constprop.0+0x66/0x300 mm/kasan/report.c:364\n     print_report+0x3e/0x70 mm/kasan/report.c:475\n     kasan_report+0xb8/0xf0 mm/kasan/report.c:588\n     hlist_add_head include/linux/list.h:1023 [inline]\n     bfq_init_rq+0x175d/0x17a0 block/bfq-iosched.c:6958\n     bfq_insert_request.isra.0+0xe8/0xa20 block/bfq-iosched.c:6271\n     bfq_insert_requests+0x27f/0x390 block/bfq-iosched.c:6323\n     blk_mq_insert_request+0x290/0x8f0 block/blk-mq.c:2660\n     blk_mq_submit_bio+0x1021/0x15e0 block/blk-mq.c:3143\n     __submit_bio+0xa0/0x6b0 block/blk-core.c:639\n     __submit_bio_noacct_mq block/blk-core.c:718 [inline]\n     submit_bio_noacct_nocheck+0x5b7/0x810 block/blk-core.c:747\n     submit_bio_noacct+0xca0/0x1990 block/blk-core.c:847\n     __ext4_read_bh fs/ext4/super.c:205 [inline]\n     ext4_read_bh+0x15e/0x2e0 fs/ext4/super.c:230\n     __read_extent_tree_block+0x304/0x6f0 fs/ext4/extents.c:567\n     ext4_find_extent+0x479/0xd20 fs/ext4/extents.c:947\n     ext4_ext_map_blocks+0x1a3/0x2680 fs/ext4/extents.c:4182\n     ext4_map_blocks+0x929/0x15a0 fs/ext4/inode.c:660\n     ext4_iomap_begin_report+0x298/0x480 fs/ext4/inode.c:3569\n     iomap_iter+0x3dd/0x1010 fs/iomap/iter.c:91\n     iomap_fiemap+0x1f4/0x360 fs/iomap/fiemap.c:80\n     ext4_fiemap+0x181/0x210 fs/ext4/extents.c:5051\n     ioctl_fiemap.isra.0+0x1b4/0x290 fs/ioctl.c:220\n     do_vfs_ioctl+0x31c/0x11a0 fs/ioctl.c:811\n     __do_sys_ioctl fs/ioctl.c:869 [inline]\n     __se_sys_ioctl+0xae/0x190 fs/ioctl.c:857\n     do_syscall_x64 arch/x86/entry/common.c:51 [inline]\n     do_syscall_64+0x70/0x120 arch/x86/entry/common.c:81\n     entry_SYSCALL_64_after_hwframe+0x78/0xe2\n    \n    Allocated by task 232719:\n     kasan_save_stack+0x22/0x50 mm/kasan/common.c:45\n     kasan_set_track+0x25/0x30 mm/kasan/common.c:52\n     __kasan_slab_alloc+0x87/0x90 mm/kasan/common.c:328\n     kasan_slab_alloc include/linux/kasan.h:188 [inline]\n     slab_post_alloc_hook mm/slab.h:768 [inline]\n     slab_alloc_node mm/slub.c:3492 [inline]\n     kmem_cache_alloc_node+0x1b8/0x6f0 mm/slub.c:3537\n     bfq_get_queue+0x215/0x1f00 block/bfq-iosched.c:5869\n     bfq_get_bfqq_handle_split+0x167/0x5f0 block/bfq-iosched.c:6776\n     bfq_init_rq+0x13a4/0x17a0 block/bfq-iosched.c:6938\n     bfq_insert_request.isra.0+0xe8/0xa20 block/bfq-iosched.c:6271\n     bfq_insert_requests+0x27f/0x390 block/bfq-iosched.c:6323\n     blk_mq_insert_request+0x290/0x8f0 block/blk-mq.c:2660\n     blk_mq_submit_bio+0x1021/0x15e0 block/blk-mq.c:3143\n     __submit_bio+0xa0/0x6b0 block/blk-core.c:639\n     __submit_bio_noacct_mq block/blk-core.c:718 [inline]\n     submit_bio_noacct_nocheck+0x5b7/0x810 block/blk-core.c:747\n     submit_bio_noacct+0xca0/0x1990 block/blk-core.c:847\n     __ext4_read_bh fs/ext4/super.c:205 [inline]\n     ext4_read_bh_nowait+0x15a/0x240 fs/ext4/super.c:217\n     ext4_read_bh_lock+0xac/0xd0 fs/ext4/super.c:242\n     ext4_bread_batch+0x268/0x500 fs/ext4/inode.c:958\n     __ext4_find_entry+0x448/0x10f0 fs/ext4/namei.c:1671\n     ext4_lookup_entry fs/ext4/namei.c:1774 [inline]\n     ext4_lookup.part.0+0x359/0x6f0 fs/ext4/namei.c:1842\n     ext4_lookup+0x72/0x90 fs/ext4/namei.c:1839\n     __lookup_slow+0x257/0x480 fs/namei.c:1696\n     lookup_slow fs/namei.c:1713 [inline]\n     walk_component+0x454/0x5c0 fs/namei.c:2004\n     link_path_walk.part.0+0x773/0xda0 fs/namei.c:2331\n     link_path_walk fs/namei.c:3826 [inline]\n     path_openat+0x1b9/0x520 fs/namei.c:3826\n     do_filp_open+0x1b7/0x400 fs/namei.c:3857\n     do_sys_openat2+0x5dc/0x6e0 fs/open.c:1428\n     do_sys_open fs/open.c:1443 [inline]\n     __do_sys_openat fs/open.c:1459 [inline]\n     __se_sys_openat fs/open.c:1454 [inline]\n     __x64_sys_openat+0x148/0x200 fs/open.c:1454\n     do_syscall_x64 arch/x86/entry/common.c:51 [inline]\n     do_syscall_64+0x70/0x120 arch/x86/entry/common.c:81\n     entry_SYSCALL_64_after_hwframe+0x78/0xe2\n    \n    Freed by task 232726:\n     kasan_save_stack+0x22/0x50 mm/kasan/common.c:45\n     kasan_set_track+0x25/0x30 mm/kasan/common.c:52\n     kasan_save_free_info+0x2b/0x50 mm/kasan/generic.c:522\n     ____kasan_slab_free mm/kasan/common.c:236 [inline]\n     __kasan_slab_free+0x12a/0x1b0 mm/kasan/common.c:244\n     kasan_slab_free include/linux/kasan.h:164 [inline]\n     slab_free_hook mm/slub.c:1827 [inline]\n     slab_free_freelist_hook mm/slub.c:1853 [inline]\n     slab_free mm/slub.c:3820 [inline]\n     kmem_cache_free+0x110/0x760 mm/slub.c:3842\n     bfq_put_queue+0x6a7/0xfb0 block/bfq-iosched.c:5428\n     bfq_forget_entity block/bfq-wf2q.c:634 [inline]\n     bfq_put_idle_entity+0x142/0x240 block/bfq-wf2q.c:645\n     bfq_forget_idle+0x189/0x1e0 block/bfq-wf2q.c:671\n     bfq_update_vtime block/bfq-wf2q.c:1280 [inline]\n     __bfq_lookup_next_entity block/bfq-wf2q.c:1374 [inline]\n     bfq_lookup_next_entity+0x350/0x480 block/bfq-wf2q.c:1433\n     bfq_update_next_in_service+0x1c0/0x4f0 block/bfq-wf2q.c:128\n     bfq_deactivate_entity+0x10a/0x240 block/bfq-wf2q.c:1188\n     bfq_deactivate_bfqq block/bfq-wf2q.c:1592 [inline]\n     bfq_del_bfqq_busy+0x2e8/0xad0 block/bfq-wf2q.c:1659\n     bfq_release_process_ref+0x1cc/0x220 block/bfq-iosched.c:3139\n     bfq_split_bfqq+0x481/0xdf0 block/bfq-iosched.c:6754\n     bfq_init_rq+0xf29/0x17a0 block/bfq-iosched.c:6934\n     bfq_insert_request.isra.0+0xe8/0xa20 block/bfq-iosched.c:6271\n     bfq_insert_requests+0x27f/0x390 block/bfq-iosched.c:6323\n     blk_mq_insert_request+0x290/0x8f0 block/blk-mq.c:2660\n     blk_mq_submit_bio+0x1021/0x15e0 block/blk-mq.c:3143\n     __submit_bio+0xa0/0x6b0 block/blk-core.c:639\n     __submit_bio_noacct_mq block/blk-core.c:718 [inline]\n     submit_bio_noacct_nocheck+0x5b7/0x810 block/blk-core.c:747\n     submit_bio_noacct+0xca0/0x1990 block/blk-core.c:847\n     __ext4_read_bh fs/ext4/super.c:205 [inline]\n     ext4_read_bh+0x15e/0x2e0 fs/ext4/super.c:230\n     __read_extent_tree_block+0x304/0x6f0 fs/ext4/extents.c:567\n     ext4_find_extent+0x479/0xd20 fs/ext4/extents.c:947\n     ext4_ext_map_blocks+0x1a3/0x2680 fs/ext4/extents.c:4182\n     ext4_map_blocks+0x929/0x15a0 fs/ext4/inode.c:660\n     ext4_iomap_begin_report+0x298/0x480 fs/ext4/inode.c:3569\n     iomap_iter+0x3dd/0x1010 fs/iomap/iter.c:91\n     iomap_fiemap+0x1f4/0x360 fs/iomap/fiemap.c:80\n     ext4_fiemap+0x181/0x210 fs/ext4/extents.c:5051\n     ioctl_fiemap.isra.0+0x1b4/0x290 fs/ioctl.c:220\n     do_vfs_ioctl+0x31c/0x11a0 fs/ioctl.c:811\n     __do_sys_ioctl fs/ioctl.c:869 [inline]\n     __se_sys_ioctl+0xae/0x190 fs/ioctl.c:857\n     do_syscall_x64 arch/x86/entry/common.c:51 [inline]\n     do_syscall_64+0x70/0x120 arch/x86/entry/common.c:81\n     entry_SYSCALL_64_after_hwframe+0x78/0xe2\n    \n    commit 1ba0403ac644 (\"block, bfq: fix uaf for accessing waker_bfqq after\n    splitting\") fix the problem that if waker_bfqq is in the merge chain,\n    and current is the only procress, waker_bfqq can be freed from\n    bfq_split_bfqq(). However, the case that waker_bfqq is not in the merge\n    chain is missed, and if the procress reference of waker_bfqq is 0,\n    waker_bfqq can be freed as well.\n    \n    Fix the problem by checking procress reference if waker_bfqq is not in\n    the merge_chain.\n    \n    Fixes: 1ba0403ac644 (\"block, bfq: fix uaf for accessing waker_bfqq after splitting\")\n    Signed-off-by: Hou Tao <houtao1@huawei.com>\n    Signed-off-by: Yu Kuai <yukuai3@huawei.com>\n    Reviewed-by: Jan Kara <jack@suse.cz>\n    Link: https://lore.kernel.org/r/20250108084148.1549973-1-yukuai1@huaweicloud.com\n    Signed-off-by: Jens Axboe <axboe@kernel.dk>\n    Signed-off-by: Sasha Levin <sashal@kernel.org>\n\ndiff --git a/block/bfq-iosched.c b/block/bfq-iosched.c\nindex c985c944fa65..d830ed169e65 100644\n--- a/block/bfq-iosched.c\n+++ b/block/bfq-iosched.c\n@@ -6577,16 +6577,24 @@ static struct bfq_queue *bfq_waker_bfqq(struct bfq_queue *bfqq)\n \t\tif (new_bfqq == waker_bfqq) {\n \t\t\t/*\n \t\t\t * If waker_bfqq is in the merge chain, and current\n-\t\t\t * is the only procress.\n+\t\t\t * is the only process, waker_bfqq can be freed.\n \t\t\t */\n \t\t\tif (bfqq_process_refs(waker_bfqq) == 1)\n \t\t\t\treturn NULL;\n-\t\t\tbreak;\n+\n+\t\t\treturn waker_bfqq;\n \t\t}\n \n \t\tnew_bfqq = new_bfqq->new_bfqq;\n \t}\n \n+\t/*\n+\t * If waker_bfqq is not in the merge chain, and it's procress reference\n+\t * is 0, waker_bfqq can be freed.\n+\t */\n+\tif (bfqq_process_refs(waker_bfqq) == 0)\n+\t\treturn NULL;\n+\n \treturn waker_bfqq;\n }\n \n"
    }
  ],
  "failures": []
}