{
  "cve_id": "CVE-2025-21633",
  "upstream_commit": "c9a40292a44e78f71258b8522655bffaf5753bdb",
  "upstream_patch_content": "From 4b7cfa8b6c28a9fa22b86894166a1a34f6d630ba Mon Sep 17 00:00:00 2001\nFrom: Pavel Begunkov <asml.silence@gmail.com>\nDate: Fri, 10 Jan 2025 14:31:23 +0000\nSubject: [PATCH] io_uring/sqpoll: zero sqd->thread on tctx errors\n\nSyzkeller reports:\n\nBUG: KASAN: slab-use-after-free in thread_group_cputime+0x409/0x700 kernel/sched/cputime.c:341\nRead of size 8 at addr ffff88803578c510 by task syz.2.3223/27552\n Call Trace:\n  <TASK>\n  ...\n  kasan_report+0x143/0x180 mm/kasan/report.c:602\n  thread_group_cputime+0x409/0x700 kernel/sched/cputime.c:341\n  thread_group_cputime_adjusted+0xa6/0x340 kernel/sched/cputime.c:639\n  getrusage+0x1000/0x1340 kernel/sys.c:1863\n  io_uring_show_fdinfo+0xdfe/0x1770 io_uring/fdinfo.c:197\n  seq_show+0x608/0x770 fs/proc/fd.c:68\n  ...\n\nThat's due to sqd->task not being cleared properly in cases where\nSQPOLL task tctx setup fails, which can essentially only happen with\nfault injection to insert allocation errors.\n\nCc: stable@vger.kernel.org\nFixes: 1251d2025c3e1 (\"io_uring/sqpoll: early exit thread if task_context wasn't allocated\")\nReported-by: syzbot+3d92cfcfa84070b0a470@syzkaller.appspotmail.com\nSigned-off-by: Pavel Begunkov <asml.silence@gmail.com>\nLink: https://lore.kernel.org/r/efc7ec7010784463b2e7466d7b5c02c2cb381635.1736519461.git.asml.silence@gmail.com\nSigned-off-by: Jens Axboe <axboe@kernel.dk>\n---\n io_uring/sqpoll.c | 6 +++++-\n 1 file changed, 5 insertions(+), 1 deletion(-)\n\ndiff --git a/io_uring/sqpoll.c b/io_uring/sqpoll.c\nindex 9e5bd79fd2b5..8961a3c1e73c 100644\n--- a/io_uring/sqpoll.c\n+++ b/io_uring/sqpoll.c\n@@ -268,8 +268,12 @@ static int io_sq_thread(void *data)\n \tDEFINE_WAIT(wait);\n \n \t/* offload context creation failed, just exit */\n-\tif (!current->io_uring)\n+\tif (!current->io_uring) {\n+\t\tmutex_lock(&sqd->lock);\n+\t\tsqd->thread = NULL;\n+\t\tmutex_unlock(&sqd->lock);\n \t\tgoto err_out;\n+\t}\n \n \tsnprintf(buf, sizeof(buf), \"iou-sqp-%d\", sqd->task_pid);\n \tset_task_comm(current, buf);\n-- \n2.39.5 (Apple Git-154)\n\n",
  "successes": [
    {
      "downstream_version": "2b30bffd9a77a346343906b5f79f54bdee229eb8",
      "downstream_patch": "aa7496d668c30ca7421b3bfdcd948ee861a13d17",
      "commit_date": "2025-01-17 13:40:52 +0100",
      "result": "success",
      "downstream_patch_content": "commit aa7496d668c30ca7421b3bfdcd948ee861a13d17\nAuthor: Pavel Begunkov <asml.silence@gmail.com>\nDate:   Fri Jan 10 14:31:23 2025 +0000\n\n    io_uring/sqpoll: zero sqd->thread on tctx errors\n    \n    commit 4b7cfa8b6c28a9fa22b86894166a1a34f6d630ba upstream.\n    \n    Syzkeller reports:\n    \n    BUG: KASAN: slab-use-after-free in thread_group_cputime+0x409/0x700 kernel/sched/cputime.c:341\n    Read of size 8 at addr ffff88803578c510 by task syz.2.3223/27552\n     Call Trace:\n      <TASK>\n      ...\n      kasan_report+0x143/0x180 mm/kasan/report.c:602\n      thread_group_cputime+0x409/0x700 kernel/sched/cputime.c:341\n      thread_group_cputime_adjusted+0xa6/0x340 kernel/sched/cputime.c:639\n      getrusage+0x1000/0x1340 kernel/sys.c:1863\n      io_uring_show_fdinfo+0xdfe/0x1770 io_uring/fdinfo.c:197\n      seq_show+0x608/0x770 fs/proc/fd.c:68\n      ...\n    \n    That's due to sqd->task not being cleared properly in cases where\n    SQPOLL task tctx setup fails, which can essentially only happen with\n    fault injection to insert allocation errors.\n    \n    Cc: stable@vger.kernel.org\n    Fixes: 1251d2025c3e1 (\"io_uring/sqpoll: early exit thread if task_context wasn't allocated\")\n    Reported-by: syzbot+3d92cfcfa84070b0a470@syzkaller.appspotmail.com\n    Signed-off-by: Pavel Begunkov <asml.silence@gmail.com>\n    Link: https://lore.kernel.org/r/efc7ec7010784463b2e7466d7b5c02c2cb381635.1736519461.git.asml.silence@gmail.com\n    Signed-off-by: Jens Axboe <axboe@kernel.dk>\n    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>\n\ndiff --git a/io_uring/sqpoll.c b/io_uring/sqpoll.c\nindex 1cfcc735b8e3..5bc54c6df20f 100644\n--- a/io_uring/sqpoll.c\n+++ b/io_uring/sqpoll.c\n@@ -275,8 +275,12 @@ static int io_sq_thread(void *data)\n \tDEFINE_WAIT(wait);\n \n \t/* offload context creation failed, just exit */\n-\tif (!current->io_uring)\n+\tif (!current->io_uring) {\n+\t\tmutex_lock(&sqd->lock);\n+\t\tsqd->thread = NULL;\n+\t\tmutex_unlock(&sqd->lock);\n \t\tgoto err_out;\n+\t}\n \n \tsnprintf(buf, sizeof(buf), \"iou-sqp-%d\", sqd->task_pid);\n \tset_task_comm(current, buf);\n"
    }
  ],
  "failures": []
}