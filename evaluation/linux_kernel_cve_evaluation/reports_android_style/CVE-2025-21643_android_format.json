{
  "cve_id": "CVE-2025-21643",
  "upstream_commit": "482d520d86e889cf40d8173388a498375079cab6",
  "upstream_patch_content": "From 3f6bc9e3ab9b127171d39f9ac6eca1abb693b731 Mon Sep 17 00:00:00 2001\nFrom: David Howells <dhowells@redhat.com>\nDate: Tue, 7 Jan 2025 18:39:27 +0000\nSubject: [PATCH] netfs: Fix kernel async DIO\n\nNetfslib needs to be able to handle kernel-initiated asynchronous DIO that\nis supplied with a bio_vec[] array.  Currently, because of the async flag,\nthis gets passed to netfs_extract_user_iter() which throws a warning and\nfails because it only handles IOVEC and UBUF iterators.  This can be\ntriggered through a combination of cifs and a loopback blockdev with\nsomething like:\n\n        mount //my/cifs/share /foo\n        dd if=/dev/zero of=/foo/m0 bs=4K count=1K\n        losetup --sector-size 4096 --direct-io=on /dev/loop2046 /foo/m0\n        echo hello >/dev/loop2046\n\nThis causes the following to appear in syslog:\n\n        WARNING: CPU: 2 PID: 109 at fs/netfs/iterator.c:50 netfs_extract_user_iter+0x170/0x250 [netfs]\n\nand the write to fail.\n\nFix this by removing the check in netfs_unbuffered_write_iter_locked() that\ncauses async kernel DIO writes to be handled as userspace writes.  Note\nthat this change relies on the kernel caller maintaining the existence of\nthe bio_vec array (or kvec[] or folio_queue) until the op is complete.\n\nFixes: 153a9961b551 (\"netfs: Implement unbuffered/DIO write support\")\nReported-by: Nicolas Baranger <nicolas.baranger@3xo.fr>\nCloses: https://lore.kernel.org/r/fedd8a40d54b2969097ffa4507979858@3xo.fr/\nSigned-off-by: David Howells <dhowells@redhat.com>\nLink: https://lore.kernel.org/r/608725.1736275167@warthog.procyon.org.uk\nTested-by: Nicolas Baranger <nicolas.baranger@3xo.fr>\nAcked-by: Paulo Alcantara (Red Hat) <pc@manguebit.com>\ncc: Steve French <smfrench@gmail.com>\ncc: Jeff Layton <jlayton@kernel.org>\ncc: netfs@lists.linux.dev\ncc: linux-cifs@vger.kernel.org\ncc: linux-fsdevel@vger.kernel.org\nSigned-off-by: Christian Brauner <brauner@kernel.org>\n---\n fs/netfs/direct_write.c | 7 ++++++-\n 1 file changed, 6 insertions(+), 1 deletion(-)\n\ndiff --git a/fs/netfs/direct_write.c b/fs/netfs/direct_write.c\nindex 173e8b5e6a93..f9421f3e6d37 100644\n--- a/fs/netfs/direct_write.c\n+++ b/fs/netfs/direct_write.c\n@@ -67,7 +67,7 @@ ssize_t netfs_unbuffered_write_iter_locked(struct kiocb *iocb, struct iov_iter *\n \t\t * allocate a sufficiently large bvec array and may shorten the\n \t\t * request.\n \t\t */\n-\t\tif (async || user_backed_iter(iter)) {\n+\t\tif (user_backed_iter(iter)) {\n \t\t\tn = netfs_extract_user_iter(iter, len, &wreq->iter, 0);\n \t\t\tif (n < 0) {\n \t\t\t\tret = n;\n@@ -77,6 +77,11 @@ ssize_t netfs_unbuffered_write_iter_locked(struct kiocb *iocb, struct iov_iter *\n \t\t\twreq->direct_bv_count = n;\n \t\t\twreq->direct_bv_unpin = iov_iter_extract_will_pin(iter);\n \t\t} else {\n+\t\t\t/* If this is a kernel-generated async DIO request,\n+\t\t\t * assume that any resources the iterator points to\n+\t\t\t * (eg. a bio_vec array) will persist till the end of\n+\t\t\t * the op.\n+\t\t\t */\n \t\t\twreq->iter = *iter;\n \t\t}\n \n-- \n2.39.5 (Apple Git-154)\n\n",
  "successes": [
    {
      "downstream_version": "09b94ddc58c6640cbbc7775a61a5387b8be71488",
      "downstream_patch": "9f3a265836844eda30bf34c2584b8011fd4f0f49",
      "commit_date": "2025-01-17 13:40:45 +0100",
      "result": "success",
      "downstream_patch_content": "commit 9f3a265836844eda30bf34c2584b8011fd4f0f49\nAuthor: David Howells <dhowells@redhat.com>\nDate:   Tue Jan 7 18:39:27 2025 +0000\n\n    netfs: Fix kernel async DIO\n    \n    [ Upstream commit 3f6bc9e3ab9b127171d39f9ac6eca1abb693b731 ]\n    \n    Netfslib needs to be able to handle kernel-initiated asynchronous DIO that\n    is supplied with a bio_vec[] array.  Currently, because of the async flag,\n    this gets passed to netfs_extract_user_iter() which throws a warning and\n    fails because it only handles IOVEC and UBUF iterators.  This can be\n    triggered through a combination of cifs and a loopback blockdev with\n    something like:\n    \n            mount //my/cifs/share /foo\n            dd if=/dev/zero of=/foo/m0 bs=4K count=1K\n            losetup --sector-size 4096 --direct-io=on /dev/loop2046 /foo/m0\n            echo hello >/dev/loop2046\n    \n    This causes the following to appear in syslog:\n    \n            WARNING: CPU: 2 PID: 109 at fs/netfs/iterator.c:50 netfs_extract_user_iter+0x170/0x250 [netfs]\n    \n    and the write to fail.\n    \n    Fix this by removing the check in netfs_unbuffered_write_iter_locked() that\n    causes async kernel DIO writes to be handled as userspace writes.  Note\n    that this change relies on the kernel caller maintaining the existence of\n    the bio_vec array (or kvec[] or folio_queue) until the op is complete.\n    \n    Fixes: 153a9961b551 (\"netfs: Implement unbuffered/DIO write support\")\n    Reported-by: Nicolas Baranger <nicolas.baranger@3xo.fr>\n    Closes: https://lore.kernel.org/r/fedd8a40d54b2969097ffa4507979858@3xo.fr/\n    Signed-off-by: David Howells <dhowells@redhat.com>\n    Link: https://lore.kernel.org/r/608725.1736275167@warthog.procyon.org.uk\n    Tested-by: Nicolas Baranger <nicolas.baranger@3xo.fr>\n    Acked-by: Paulo Alcantara (Red Hat) <pc@manguebit.com>\n    cc: Steve French <smfrench@gmail.com>\n    cc: Jeff Layton <jlayton@kernel.org>\n    cc: netfs@lists.linux.dev\n    cc: linux-cifs@vger.kernel.org\n    cc: linux-fsdevel@vger.kernel.org\n    Signed-off-by: Christian Brauner <brauner@kernel.org>\n    Signed-off-by: Sasha Levin <sashal@kernel.org>\n\ndiff --git a/fs/netfs/direct_write.c b/fs/netfs/direct_write.c\nindex 88f2adfab75e..26cf9c94deeb 100644\n--- a/fs/netfs/direct_write.c\n+++ b/fs/netfs/direct_write.c\n@@ -67,7 +67,7 @@ ssize_t netfs_unbuffered_write_iter_locked(struct kiocb *iocb, struct iov_iter *\n \t\t * allocate a sufficiently large bvec array and may shorten the\n \t\t * request.\n \t\t */\n-\t\tif (async || user_backed_iter(iter)) {\n+\t\tif (user_backed_iter(iter)) {\n \t\t\tn = netfs_extract_user_iter(iter, len, &wreq->iter, 0);\n \t\t\tif (n < 0) {\n \t\t\t\tret = n;\n@@ -77,6 +77,11 @@ ssize_t netfs_unbuffered_write_iter_locked(struct kiocb *iocb, struct iov_iter *\n \t\t\twreq->direct_bv_count = n;\n \t\t\twreq->direct_bv_unpin = iov_iter_extract_will_pin(iter);\n \t\t} else {\n+\t\t\t/* If this is a kernel-generated async DIO request,\n+\t\t\t * assume that any resources the iterator points to\n+\t\t\t * (eg. a bio_vec array) will persist till the end of\n+\t\t\t * the op.\n+\t\t\t */\n \t\t\twreq->iter = *iter;\n \t\t}\n \n"
    }
  ],
  "failures": []
}