{
  "cve_id": "CVE-2025-21644",
  "upstream_commit": "f0ed39830e6064d62f9c5393505677a26569bb56",
  "upstream_patch_content": "From 9ab4981552930a9c45682d62424ba610edc3992d Mon Sep 17 00:00:00 2001\nFrom: Lucas De Marchi <lucas.demarchi@intel.com>\nDate: Thu, 2 Jan 2025 16:11:10 -0800\nSubject: [PATCH] drm/xe: Fix tlb invalidation when wedging\nMIME-Version: 1.0\nContent-Type: text/plain; charset=UTF-8\nContent-Transfer-Encoding: 8bit\n\nIf GuC fails to load, the driver wedges, but in the process it tries to\ndo stuff that may not be initialized yet. This moves the\nxe_gt_tlb_invalidation_init() to be done earlier: as its own doc says,\nit's a software-only initialization and should had been named with the\n_early() suffix.\n\nMove it to be called by xe_gt_init_early(), so the locks and seqno are\ninitialized, avoiding a NULL ptr deref when wedging:\n\n\txe 0000:03:00.0: [drm] *ERROR* GT0: load failed: status: Reset = 0, BootROM = 0x50, UKernel = 0x00, MIA = 0x00, Auth = 0x01\n\txe 0000:03:00.0: [drm] *ERROR* GT0: firmware signature verification failed\n\txe 0000:03:00.0: [drm] *ERROR* CRITICAL: Xe has declared device 0000:03:00.0 as wedged.\n\t...\n\tBUG: kernel NULL pointer dereference, address: 0000000000000000\n\t#PF: supervisor read access in kernel mode\n\t#PF: error_code(0x0000) - not-present page\n\tPGD 0 P4D 0\n\tOops: Oops: 0000 [#1] PREEMPT SMP NOPTI\n\tCPU: 9 UID: 0 PID: 3908 Comm: modprobe Tainted: G     U  W          6.13.0-rc4-xe+ #3\n\tTainted: [U]=USER, [W]=WARN\n\tHardware name: Intel Corporation Alder Lake Client Platform/AlderLake-S ADP-S DDR5 UDIMM CRB, BIOS ADLSFWI1.R00.3275.A00.2207010640 07/01/2022\n\tRIP: 0010:xe_gt_tlb_invalidation_reset+0x75/0x110 [xe]\n\nThis can be easily triggered by poking the GuC binary to force a\nsignature failure. There will still be an extra message,\n\n\txe 0000:03:00.0: [drm] *ERROR* GT0: GuC mmio request 0x4100: no reply 0x4100\n\nbut that's better than a NULL ptr deref.\n\nCloses: https://gitlab.freedesktop.org/drm/xe/kernel/-/issues/3956\nFixes: c9474b726b93 (\"drm/xe: Wedge the entire device\")\nReviewed-by: Matthew Brost <matthew.brost@intel.com>\nLink: https://patchwork.freedesktop.org/patch/msgid/20250103001111.331684-2-lucas.demarchi@intel.com\nSigned-off-by: Lucas De Marchi <lucas.demarchi@intel.com>\n(cherry picked from commit 5001ef3af8f2c972d6fd9c5221a8457556f8bea6)\nSigned-off-by: Thomas Hellstr\u00f6m <thomas.hellstrom@linux.intel.com>\n---\n drivers/gpu/drm/xe/xe_gt.c                  | 8 ++++----\n drivers/gpu/drm/xe/xe_gt_tlb_invalidation.c | 4 ++--\n drivers/gpu/drm/xe/xe_gt_tlb_invalidation.h | 3 ++-\n 3 files changed, 8 insertions(+), 7 deletions(-)\n\ndiff --git a/drivers/gpu/drm/xe/xe_gt.c b/drivers/gpu/drm/xe/xe_gt.c\nindex d6744be01a68..94d468d01253 100644\n--- a/drivers/gpu/drm/xe/xe_gt.c\n+++ b/drivers/gpu/drm/xe/xe_gt.c\n@@ -387,6 +387,10 @@ int xe_gt_init_early(struct xe_gt *gt)\n \txe_force_wake_init_gt(gt, gt_to_fw(gt));\n \tspin_lock_init(&gt->global_invl_lock);\n \n+\terr = xe_gt_tlb_invalidation_init_early(gt);\n+\tif (err)\n+\t\treturn err;\n+\n \treturn 0;\n }\n \n@@ -588,10 +592,6 @@ int xe_gt_init(struct xe_gt *gt)\n \t\txe_hw_fence_irq_init(&gt->fence_irq[i]);\n \t}\n \n-\terr = xe_gt_tlb_invalidation_init(gt);\n-\tif (err)\n-\t\treturn err;\n-\n \terr = xe_gt_pagefault_init(gt);\n \tif (err)\n \t\treturn err;\ndiff --git a/drivers/gpu/drm/xe/xe_gt_tlb_invalidation.c b/drivers/gpu/drm/xe/xe_gt_tlb_invalidation.c\nindex 6146d1776bda..0a0af413770e 100644\n--- a/drivers/gpu/drm/xe/xe_gt_tlb_invalidation.c\n+++ b/drivers/gpu/drm/xe/xe_gt_tlb_invalidation.c\n@@ -106,7 +106,7 @@ static void xe_gt_tlb_fence_timeout(struct work_struct *work)\n }\n \n /**\n- * xe_gt_tlb_invalidation_init - Initialize GT TLB invalidation state\n+ * xe_gt_tlb_invalidation_init_early - Initialize GT TLB invalidation state\n  * @gt: graphics tile\n  *\n  * Initialize GT TLB invalidation state, purely software initialization, should\n@@ -114,7 +114,7 @@ static void xe_gt_tlb_fence_timeout(struct work_struct *work)\n  *\n  * Return: 0 on success, negative error code on error.\n  */\n-int xe_gt_tlb_invalidation_init(struct xe_gt *gt)\n+int xe_gt_tlb_invalidation_init_early(struct xe_gt *gt)\n {\n \tgt->tlb_invalidation.seqno = 1;\n \tINIT_LIST_HEAD(&gt->tlb_invalidation.pending_fences);\ndiff --git a/drivers/gpu/drm/xe/xe_gt_tlb_invalidation.h b/drivers/gpu/drm/xe/xe_gt_tlb_invalidation.h\nindex 00b1c6c01e8d..672acfcdf0d7 100644\n--- a/drivers/gpu/drm/xe/xe_gt_tlb_invalidation.h\n+++ b/drivers/gpu/drm/xe/xe_gt_tlb_invalidation.h\n@@ -14,7 +14,8 @@ struct xe_gt;\n struct xe_guc;\n struct xe_vma;\n \n-int xe_gt_tlb_invalidation_init(struct xe_gt *gt);\n+int xe_gt_tlb_invalidation_init_early(struct xe_gt *gt);\n+\n void xe_gt_tlb_invalidation_reset(struct xe_gt *gt);\n int xe_gt_tlb_invalidation_ggtt(struct xe_gt *gt);\n int xe_gt_tlb_invalidation_vma(struct xe_gt *gt,\n-- \n2.39.5 (Apple Git-154)\n\n",
  "successes": [
    {
      "downstream_version": "53a56817755ed7ed2c046e9592071e77d6b31072",
      "downstream_patch": "09b94ddc58c6640cbbc7775a61a5387b8be71488",
      "commit_date": "2025-01-17 13:40:44 +0100",
      "result": "success",
      "downstream_patch_content": "commit 09b94ddc58c6640cbbc7775a61a5387b8be71488\nAuthor: Lucas De Marchi <lucas.demarchi@intel.com>\nDate:   Thu Jan 2 16:11:10 2025 -0800\n\n    drm/xe: Fix tlb invalidation when wedging\n    \n    [ Upstream commit 9ab4981552930a9c45682d62424ba610edc3992d ]\n    \n    If GuC fails to load, the driver wedges, but in the process it tries to\n    do stuff that may not be initialized yet. This moves the\n    xe_gt_tlb_invalidation_init() to be done earlier: as its own doc says,\n    it's a software-only initialization and should had been named with the\n    _early() suffix.\n    \n    Move it to be called by xe_gt_init_early(), so the locks and seqno are\n    initialized, avoiding a NULL ptr deref when wedging:\n    \n            xe 0000:03:00.0: [drm] *ERROR* GT0: load failed: status: Reset = 0, BootROM = 0x50, UKernel = 0x00, MIA = 0x00, Auth = 0x01\n            xe 0000:03:00.0: [drm] *ERROR* GT0: firmware signature verification failed\n            xe 0000:03:00.0: [drm] *ERROR* CRITICAL: Xe has declared device 0000:03:00.0 as wedged.\n            ...\n            BUG: kernel NULL pointer dereference, address: 0000000000000000\n            #PF: supervisor read access in kernel mode\n            #PF: error_code(0x0000) - not-present page\n            PGD 0 P4D 0\n            Oops: Oops: 0000 [#1] PREEMPT SMP NOPTI\n            CPU: 9 UID: 0 PID: 3908 Comm: modprobe Tainted: G     U  W          6.13.0-rc4-xe+ #3\n            Tainted: [U]=USER, [W]=WARN\n            Hardware name: Intel Corporation Alder Lake Client Platform/AlderLake-S ADP-S DDR5 UDIMM CRB, BIOS ADLSFWI1.R00.3275.A00.2207010640 07/01/2022\n            RIP: 0010:xe_gt_tlb_invalidation_reset+0x75/0x110 [xe]\n    \n    This can be easily triggered by poking the GuC binary to force a\n    signature failure. There will still be an extra message,\n    \n            xe 0000:03:00.0: [drm] *ERROR* GT0: GuC mmio request 0x4100: no reply 0x4100\n    \n    but that's better than a NULL ptr deref.\n    \n    Closes: https://gitlab.freedesktop.org/drm/xe/kernel/-/issues/3956\n    Fixes: c9474b726b93 (\"drm/xe: Wedge the entire device\")\n    Reviewed-by: Matthew Brost <matthew.brost@intel.com>\n    Link: https://patchwork.freedesktop.org/patch/msgid/20250103001111.331684-2-lucas.demarchi@intel.com\n    Signed-off-by: Lucas De Marchi <lucas.demarchi@intel.com>\n    (cherry picked from commit 5001ef3af8f2c972d6fd9c5221a8457556f8bea6)\n    Signed-off-by: Thomas Hellstr\u00f6m <thomas.hellstrom@linux.intel.com>\n    Signed-off-by: Sasha Levin <sashal@kernel.org>\n\ndiff --git a/drivers/gpu/drm/xe/xe_gt.c b/drivers/gpu/drm/xe/xe_gt.c\nindex d5fd6a089b7c..b940688c3613 100644\n--- a/drivers/gpu/drm/xe/xe_gt.c\n+++ b/drivers/gpu/drm/xe/xe_gt.c\n@@ -386,6 +386,10 @@ int xe_gt_init_early(struct xe_gt *gt)\n \txe_force_wake_init_gt(gt, gt_to_fw(gt));\n \tspin_lock_init(&gt->global_invl_lock);\n \n+\terr = xe_gt_tlb_invalidation_init_early(gt);\n+\tif (err)\n+\t\treturn err;\n+\n \treturn 0;\n }\n \n@@ -585,10 +589,6 @@ int xe_gt_init(struct xe_gt *gt)\n \t\txe_hw_fence_irq_init(&gt->fence_irq[i]);\n \t}\n \n-\terr = xe_gt_tlb_invalidation_init(gt);\n-\tif (err)\n-\t\treturn err;\n-\n \terr = xe_gt_pagefault_init(gt);\n \tif (err)\n \t\treturn err;\ndiff --git a/drivers/gpu/drm/xe/xe_gt_tlb_invalidation.c b/drivers/gpu/drm/xe/xe_gt_tlb_invalidation.c\nindex 7e385940df08..ace1fe831a7b 100644\n--- a/drivers/gpu/drm/xe/xe_gt_tlb_invalidation.c\n+++ b/drivers/gpu/drm/xe/xe_gt_tlb_invalidation.c\n@@ -106,7 +106,7 @@ static void xe_gt_tlb_fence_timeout(struct work_struct *work)\n }\n \n /**\n- * xe_gt_tlb_invalidation_init - Initialize GT TLB invalidation state\n+ * xe_gt_tlb_invalidation_init_early - Initialize GT TLB invalidation state\n  * @gt: graphics tile\n  *\n  * Initialize GT TLB invalidation state, purely software initialization, should\n@@ -114,7 +114,7 @@ static void xe_gt_tlb_fence_timeout(struct work_struct *work)\n  *\n  * Return: 0 on success, negative error code on error.\n  */\n-int xe_gt_tlb_invalidation_init(struct xe_gt *gt)\n+int xe_gt_tlb_invalidation_init_early(struct xe_gt *gt)\n {\n \tgt->tlb_invalidation.seqno = 1;\n \tINIT_LIST_HEAD(&gt->tlb_invalidation.pending_fences);\ndiff --git a/drivers/gpu/drm/xe/xe_gt_tlb_invalidation.h b/drivers/gpu/drm/xe/xe_gt_tlb_invalidation.h\nindex 00b1c6c01e8d..672acfcdf0d7 100644\n--- a/drivers/gpu/drm/xe/xe_gt_tlb_invalidation.h\n+++ b/drivers/gpu/drm/xe/xe_gt_tlb_invalidation.h\n@@ -14,7 +14,8 @@ struct xe_gt;\n struct xe_guc;\n struct xe_vma;\n \n-int xe_gt_tlb_invalidation_init(struct xe_gt *gt);\n+int xe_gt_tlb_invalidation_init_early(struct xe_gt *gt);\n+\n void xe_gt_tlb_invalidation_reset(struct xe_gt *gt);\n int xe_gt_tlb_invalidation_ggtt(struct xe_gt *gt);\n int xe_gt_tlb_invalidation_vma(struct xe_gt *gt,\n"
    }
  ],
  "failures": []
}