{
  "cve_id": "CVE-2025-21646",
  "upstream_commit": "3ff93c5935610f1f53f4b730d9b7b76a9559968a",
  "upstream_patch_content": "From 8fd56ad6e7c90ac2bddb0741c6b248c8c5d56ac8 Mon Sep 17 00:00:00 2001\nFrom: David Howells <dhowells@redhat.com>\nDate: Mon, 6 Jan 2025 16:21:00 +0000\nSubject: [PATCH] afs: Fix the maximum cell name length\n\nThe kafs filesystem limits the maximum length of a cell to 256 bytes, but a\nproblem occurs if someone actually does that: kafs tries to create a\ndirectory under /proc/net/afs/ with the name of the cell, but that fails\nwith a warning:\n\n        WARNING: CPU: 0 PID: 9 at fs/proc/generic.c:405\n\nbecause procfs limits the maximum filename length to 255.\n\nHowever, the DNS limits the maximum lookup length and, by extension, the\nmaximum cell name, to 255 less two (length count and trailing NUL).\n\nFix this by limiting the maximum acceptable cellname length to 253.  This\nalso allows us to be sure we can create the \"/afs/.<cell>/\" mountpoint too.\n\nFurther, split the YFS VL record cell name maximum to be the 256 allowed by\nthe protocol and ignore the record retrieved by YFSVL.GetCellName if it\nexceeds 253.\n\nFixes: c3e9f888263b (\"afs: Implement client support for the YFSVL.GetCellName RPC op\")\nReported-by: syzbot+7848fee1f1e5c53f912b@syzkaller.appspotmail.com\nCloses: https://lore.kernel.org/r/6776d25d.050a0220.3a8527.0048.GAE@google.com/\nSigned-off-by: David Howells <dhowells@redhat.com>\nLink: https://lore.kernel.org/r/376236.1736180460@warthog.procyon.org.uk\nTested-by: syzbot+7848fee1f1e5c53f912b@syzkaller.appspotmail.com\ncc: Marc Dionne <marc.dionne@auristor.com>\ncc: linux-afs@lists.infradead.org\nSigned-off-by: Christian Brauner <brauner@kernel.org>\n---\n fs/afs/afs.h      | 2 +-\n fs/afs/afs_vl.h   | 1 +\n fs/afs/vl_alias.c | 8 ++++++--\n fs/afs/vlclient.c | 2 +-\n 4 files changed, 9 insertions(+), 4 deletions(-)\n\ndiff --git a/fs/afs/afs.h b/fs/afs/afs.h\nindex b488072aee87..ec3db00bd081 100644\n--- a/fs/afs/afs.h\n+++ b/fs/afs/afs.h\n@@ -10,7 +10,7 @@\n \n #include <linux/in.h>\n \n-#define AFS_MAXCELLNAME\t\t256  \t/* Maximum length of a cell name */\n+#define AFS_MAXCELLNAME\t\t253  \t/* Maximum length of a cell name (DNS limited) */\n #define AFS_MAXVOLNAME\t\t64  \t/* Maximum length of a volume name */\n #define AFS_MAXNSERVERS\t\t8   \t/* Maximum servers in a basic volume record */\n #define AFS_NMAXNSERVERS\t13  \t/* Maximum servers in a N/U-class volume record */\ndiff --git a/fs/afs/afs_vl.h b/fs/afs/afs_vl.h\nindex a06296c8827d..b835e25a2c02 100644\n--- a/fs/afs/afs_vl.h\n+++ b/fs/afs/afs_vl.h\n@@ -13,6 +13,7 @@\n #define AFS_VL_PORT\t\t7003\t/* volume location service port */\n #define VL_SERVICE\t\t52\t/* RxRPC service ID for the Volume Location service */\n #define YFS_VL_SERVICE\t\t2503\t/* Service ID for AuriStor upgraded VL service */\n+#define YFS_VL_MAXCELLNAME\t256  \t/* Maximum length of a cell name in YFS protocol */\n \n enum AFSVL_Operations {\n \tVLGETENTRYBYID\t\t= 503,\t/* AFS Get VLDB entry by ID */\ndiff --git a/fs/afs/vl_alias.c b/fs/afs/vl_alias.c\nindex 9f36e14f1c2d..f9e76b604f31 100644\n--- a/fs/afs/vl_alias.c\n+++ b/fs/afs/vl_alias.c\n@@ -253,6 +253,7 @@ static char *afs_vl_get_cell_name(struct afs_cell *cell, struct key *key)\n static int yfs_check_canonical_cell_name(struct afs_cell *cell, struct key *key)\n {\n \tstruct afs_cell *master;\n+\tsize_t name_len;\n \tchar *cell_name;\n \n \tcell_name = afs_vl_get_cell_name(cell, key);\n@@ -264,8 +265,11 @@ static int yfs_check_canonical_cell_name(struct afs_cell *cell, struct key *key)\n \t\treturn 0;\n \t}\n \n-\tmaster = afs_lookup_cell(cell->net, cell_name, strlen(cell_name),\n-\t\t\t\t NULL, false);\n+\tname_len = strlen(cell_name);\n+\tif (!name_len || name_len > AFS_MAXCELLNAME)\n+\t\tmaster = ERR_PTR(-EOPNOTSUPP);\n+\telse\n+\t\tmaster = afs_lookup_cell(cell->net, cell_name, name_len, NULL, false);\n \tkfree(cell_name);\n \tif (IS_ERR(master))\n \t\treturn PTR_ERR(master);\ndiff --git a/fs/afs/vlclient.c b/fs/afs/vlclient.c\nindex cac75f89b64a..55dd0fc5aad7 100644\n--- a/fs/afs/vlclient.c\n+++ b/fs/afs/vlclient.c\n@@ -697,7 +697,7 @@ static int afs_deliver_yfsvl_get_cell_name(struct afs_call *call)\n \t\t\treturn ret;\n \n \t\tnamesz = ntohl(call->tmp);\n-\t\tif (namesz > AFS_MAXCELLNAME)\n+\t\tif (namesz > YFS_VL_MAXCELLNAME)\n \t\t\treturn afs_protocol_error(call, afs_eproto_cellname_len);\n \t\tpaddedsz = (namesz + 3) & ~3;\n \t\tcall->count = namesz;\n-- \n2.39.5 (Apple Git-154)\n\n",
  "successes": [
    {
      "downstream_version": "ee7e40f7fb17f08a8cbae50553e5c2e10ae32fce",
      "downstream_patch": "aabe47cf5ac5e1db2ae0635f189d836f67024904",
      "commit_date": "2025-01-17 13:34:40 +0100",
      "result": "success",
      "downstream_patch_content": "commit aabe47cf5ac5e1db2ae0635f189d836f67024904\nAuthor: David Howells <dhowells@redhat.com>\nDate:   Mon Jan 6 16:21:00 2025 +0000\n\n    afs: Fix the maximum cell name length\n    \n    [ Upstream commit 8fd56ad6e7c90ac2bddb0741c6b248c8c5d56ac8 ]\n    \n    The kafs filesystem limits the maximum length of a cell to 256 bytes, but a\n    problem occurs if someone actually does that: kafs tries to create a\n    directory under /proc/net/afs/ with the name of the cell, but that fails\n    with a warning:\n    \n            WARNING: CPU: 0 PID: 9 at fs/proc/generic.c:405\n    \n    because procfs limits the maximum filename length to 255.\n    \n    However, the DNS limits the maximum lookup length and, by extension, the\n    maximum cell name, to 255 less two (length count and trailing NUL).\n    \n    Fix this by limiting the maximum acceptable cellname length to 253.  This\n    also allows us to be sure we can create the \"/afs/.<cell>/\" mountpoint too.\n    \n    Further, split the YFS VL record cell name maximum to be the 256 allowed by\n    the protocol and ignore the record retrieved by YFSVL.GetCellName if it\n    exceeds 253.\n    \n    Fixes: c3e9f888263b (\"afs: Implement client support for the YFSVL.GetCellName RPC op\")\n    Reported-by: syzbot+7848fee1f1e5c53f912b@syzkaller.appspotmail.com\n    Closes: https://lore.kernel.org/r/6776d25d.050a0220.3a8527.0048.GAE@google.com/\n    Signed-off-by: David Howells <dhowells@redhat.com>\n    Link: https://lore.kernel.org/r/376236.1736180460@warthog.procyon.org.uk\n    Tested-by: syzbot+7848fee1f1e5c53f912b@syzkaller.appspotmail.com\n    cc: Marc Dionne <marc.dionne@auristor.com>\n    cc: linux-afs@lists.infradead.org\n    Signed-off-by: Christian Brauner <brauner@kernel.org>\n    Signed-off-by: Sasha Levin <sashal@kernel.org>\n\ndiff --git a/fs/afs/afs.h b/fs/afs/afs.h\nindex 432cb4b23961..3ea5f3e3c922 100644\n--- a/fs/afs/afs.h\n+++ b/fs/afs/afs.h\n@@ -10,7 +10,7 @@\n \n #include <linux/in.h>\n \n-#define AFS_MAXCELLNAME\t\t256  \t/* Maximum length of a cell name */\n+#define AFS_MAXCELLNAME\t\t253  \t/* Maximum length of a cell name (DNS limited) */\n #define AFS_MAXVOLNAME\t\t64  \t/* Maximum length of a volume name */\n #define AFS_MAXNSERVERS\t\t8   \t/* Maximum servers in a basic volume record */\n #define AFS_NMAXNSERVERS\t13  \t/* Maximum servers in a N/U-class volume record */\ndiff --git a/fs/afs/afs_vl.h b/fs/afs/afs_vl.h\nindex 9c65ffb8a523..8da0899fbc08 100644\n--- a/fs/afs/afs_vl.h\n+++ b/fs/afs/afs_vl.h\n@@ -13,6 +13,7 @@\n #define AFS_VL_PORT\t\t7003\t/* volume location service port */\n #define VL_SERVICE\t\t52\t/* RxRPC service ID for the Volume Location service */\n #define YFS_VL_SERVICE\t\t2503\t/* Service ID for AuriStor upgraded VL service */\n+#define YFS_VL_MAXCELLNAME\t256  \t/* Maximum length of a cell name in YFS protocol */\n \n enum AFSVL_Operations {\n \tVLGETENTRYBYID\t\t= 503,\t/* AFS Get VLDB entry by ID */\ndiff --git a/fs/afs/vl_alias.c b/fs/afs/vl_alias.c\nindex f04a80e4f5c3..83cf1bfbe343 100644\n--- a/fs/afs/vl_alias.c\n+++ b/fs/afs/vl_alias.c\n@@ -302,6 +302,7 @@ static char *afs_vl_get_cell_name(struct afs_cell *cell, struct key *key)\n static int yfs_check_canonical_cell_name(struct afs_cell *cell, struct key *key)\n {\n \tstruct afs_cell *master;\n+\tsize_t name_len;\n \tchar *cell_name;\n \n \tcell_name = afs_vl_get_cell_name(cell, key);\n@@ -313,8 +314,11 @@ static int yfs_check_canonical_cell_name(struct afs_cell *cell, struct key *key)\n \t\treturn 0;\n \t}\n \n-\tmaster = afs_lookup_cell(cell->net, cell_name, strlen(cell_name),\n-\t\t\t\t NULL, false);\n+\tname_len = strlen(cell_name);\n+\tif (!name_len || name_len > AFS_MAXCELLNAME)\n+\t\tmaster = ERR_PTR(-EOPNOTSUPP);\n+\telse\n+\t\tmaster = afs_lookup_cell(cell->net, cell_name, name_len, NULL, false);\n \tkfree(cell_name);\n \tif (IS_ERR(master))\n \t\treturn PTR_ERR(master);\ndiff --git a/fs/afs/vlclient.c b/fs/afs/vlclient.c\nindex 00fca3c66ba6..16653f2ffe4f 100644\n--- a/fs/afs/vlclient.c\n+++ b/fs/afs/vlclient.c\n@@ -671,7 +671,7 @@ static int afs_deliver_yfsvl_get_cell_name(struct afs_call *call)\n \t\t\treturn ret;\n \n \t\tnamesz = ntohl(call->tmp);\n-\t\tif (namesz > AFS_MAXCELLNAME)\n+\t\tif (namesz > YFS_VL_MAXCELLNAME)\n \t\t\treturn afs_protocol_error(call, afs_eproto_cellname_len);\n \t\tpaddedsz = (namesz + 3) & ~3;\n \t\tcall->count = namesz;\n"
    },
    {
      "downstream_version": "271ae0edbfc942795c162e6cf20d2bc02bd7fde4",
      "downstream_patch": "7673030efe0f8ca1056d3849d61784c6caa052af",
      "commit_date": "2025-01-17 13:36:16 +0100",
      "result": "success",
      "downstream_patch_content": "commit 7673030efe0f8ca1056d3849d61784c6caa052af\nAuthor: David Howells <dhowells@redhat.com>\nDate:   Mon Jan 6 16:21:00 2025 +0000\n\n    afs: Fix the maximum cell name length\n    \n    [ Upstream commit 8fd56ad6e7c90ac2bddb0741c6b248c8c5d56ac8 ]\n    \n    The kafs filesystem limits the maximum length of a cell to 256 bytes, but a\n    problem occurs if someone actually does that: kafs tries to create a\n    directory under /proc/net/afs/ with the name of the cell, but that fails\n    with a warning:\n    \n            WARNING: CPU: 0 PID: 9 at fs/proc/generic.c:405\n    \n    because procfs limits the maximum filename length to 255.\n    \n    However, the DNS limits the maximum lookup length and, by extension, the\n    maximum cell name, to 255 less two (length count and trailing NUL).\n    \n    Fix this by limiting the maximum acceptable cellname length to 253.  This\n    also allows us to be sure we can create the \"/afs/.<cell>/\" mountpoint too.\n    \n    Further, split the YFS VL record cell name maximum to be the 256 allowed by\n    the protocol and ignore the record retrieved by YFSVL.GetCellName if it\n    exceeds 253.\n    \n    Fixes: c3e9f888263b (\"afs: Implement client support for the YFSVL.GetCellName RPC op\")\n    Reported-by: syzbot+7848fee1f1e5c53f912b@syzkaller.appspotmail.com\n    Closes: https://lore.kernel.org/r/6776d25d.050a0220.3a8527.0048.GAE@google.com/\n    Signed-off-by: David Howells <dhowells@redhat.com>\n    Link: https://lore.kernel.org/r/376236.1736180460@warthog.procyon.org.uk\n    Tested-by: syzbot+7848fee1f1e5c53f912b@syzkaller.appspotmail.com\n    cc: Marc Dionne <marc.dionne@auristor.com>\n    cc: linux-afs@lists.infradead.org\n    Signed-off-by: Christian Brauner <brauner@kernel.org>\n    Signed-off-by: Sasha Levin <sashal@kernel.org>\n\ndiff --git a/fs/afs/afs.h b/fs/afs/afs.h\nindex 81815724db6c..25c17100798b 100644\n--- a/fs/afs/afs.h\n+++ b/fs/afs/afs.h\n@@ -10,7 +10,7 @@\n \n #include <linux/in.h>\n \n-#define AFS_MAXCELLNAME\t\t256  \t/* Maximum length of a cell name */\n+#define AFS_MAXCELLNAME\t\t253  \t/* Maximum length of a cell name (DNS limited) */\n #define AFS_MAXVOLNAME\t\t64  \t/* Maximum length of a volume name */\n #define AFS_MAXNSERVERS\t\t8   \t/* Maximum servers in a basic volume record */\n #define AFS_NMAXNSERVERS\t13  \t/* Maximum servers in a N/U-class volume record */\ndiff --git a/fs/afs/afs_vl.h b/fs/afs/afs_vl.h\nindex 9c65ffb8a523..8da0899fbc08 100644\n--- a/fs/afs/afs_vl.h\n+++ b/fs/afs/afs_vl.h\n@@ -13,6 +13,7 @@\n #define AFS_VL_PORT\t\t7003\t/* volume location service port */\n #define VL_SERVICE\t\t52\t/* RxRPC service ID for the Volume Location service */\n #define YFS_VL_SERVICE\t\t2503\t/* Service ID for AuriStor upgraded VL service */\n+#define YFS_VL_MAXCELLNAME\t256  \t/* Maximum length of a cell name in YFS protocol */\n \n enum AFSVL_Operations {\n \tVLGETENTRYBYID\t\t= 503,\t/* AFS Get VLDB entry by ID */\ndiff --git a/fs/afs/vl_alias.c b/fs/afs/vl_alias.c\nindex f04a80e4f5c3..83cf1bfbe343 100644\n--- a/fs/afs/vl_alias.c\n+++ b/fs/afs/vl_alias.c\n@@ -302,6 +302,7 @@ static char *afs_vl_get_cell_name(struct afs_cell *cell, struct key *key)\n static int yfs_check_canonical_cell_name(struct afs_cell *cell, struct key *key)\n {\n \tstruct afs_cell *master;\n+\tsize_t name_len;\n \tchar *cell_name;\n \n \tcell_name = afs_vl_get_cell_name(cell, key);\n@@ -313,8 +314,11 @@ static int yfs_check_canonical_cell_name(struct afs_cell *cell, struct key *key)\n \t\treturn 0;\n \t}\n \n-\tmaster = afs_lookup_cell(cell->net, cell_name, strlen(cell_name),\n-\t\t\t\t NULL, false);\n+\tname_len = strlen(cell_name);\n+\tif (!name_len || name_len > AFS_MAXCELLNAME)\n+\t\tmaster = ERR_PTR(-EOPNOTSUPP);\n+\telse\n+\t\tmaster = afs_lookup_cell(cell->net, cell_name, name_len, NULL, false);\n \tkfree(cell_name);\n \tif (IS_ERR(master))\n \t\treturn PTR_ERR(master);\ndiff --git a/fs/afs/vlclient.c b/fs/afs/vlclient.c\nindex 00fca3c66ba6..16653f2ffe4f 100644\n--- a/fs/afs/vlclient.c\n+++ b/fs/afs/vlclient.c\n@@ -671,7 +671,7 @@ static int afs_deliver_yfsvl_get_cell_name(struct afs_call *call)\n \t\t\treturn ret;\n \n \t\tnamesz = ntohl(call->tmp);\n-\t\tif (namesz > AFS_MAXCELLNAME)\n+\t\tif (namesz > YFS_VL_MAXCELLNAME)\n \t\t\treturn afs_protocol_error(call, afs_eproto_cellname_len);\n \t\tpaddedsz = (namesz + 3) & ~3;\n \t\tcall->count = namesz;\n"
    },
    {
      "downstream_version": "2976e91a3e569cf2c92c9f71512c0ab1312fe965",
      "downstream_patch": "7922b1f058fe24a93730511dd0ae2e1630920096",
      "commit_date": "2025-01-17 13:40:43 +0100",
      "result": "success",
      "downstream_patch_content": "commit 7922b1f058fe24a93730511dd0ae2e1630920096\nAuthor: David Howells <dhowells@redhat.com>\nDate:   Mon Jan 6 16:21:00 2025 +0000\n\n    afs: Fix the maximum cell name length\n    \n    [ Upstream commit 8fd56ad6e7c90ac2bddb0741c6b248c8c5d56ac8 ]\n    \n    The kafs filesystem limits the maximum length of a cell to 256 bytes, but a\n    problem occurs if someone actually does that: kafs tries to create a\n    directory under /proc/net/afs/ with the name of the cell, but that fails\n    with a warning:\n    \n            WARNING: CPU: 0 PID: 9 at fs/proc/generic.c:405\n    \n    because procfs limits the maximum filename length to 255.\n    \n    However, the DNS limits the maximum lookup length and, by extension, the\n    maximum cell name, to 255 less two (length count and trailing NUL).\n    \n    Fix this by limiting the maximum acceptable cellname length to 253.  This\n    also allows us to be sure we can create the \"/afs/.<cell>/\" mountpoint too.\n    \n    Further, split the YFS VL record cell name maximum to be the 256 allowed by\n    the protocol and ignore the record retrieved by YFSVL.GetCellName if it\n    exceeds 253.\n    \n    Fixes: c3e9f888263b (\"afs: Implement client support for the YFSVL.GetCellName RPC op\")\n    Reported-by: syzbot+7848fee1f1e5c53f912b@syzkaller.appspotmail.com\n    Closes: https://lore.kernel.org/r/6776d25d.050a0220.3a8527.0048.GAE@google.com/\n    Signed-off-by: David Howells <dhowells@redhat.com>\n    Link: https://lore.kernel.org/r/376236.1736180460@warthog.procyon.org.uk\n    Tested-by: syzbot+7848fee1f1e5c53f912b@syzkaller.appspotmail.com\n    cc: Marc Dionne <marc.dionne@auristor.com>\n    cc: linux-afs@lists.infradead.org\n    Signed-off-by: Christian Brauner <brauner@kernel.org>\n    Signed-off-by: Sasha Levin <sashal@kernel.org>\n\ndiff --git a/fs/afs/afs.h b/fs/afs/afs.h\nindex b488072aee87..ec3db00bd081 100644\n--- a/fs/afs/afs.h\n+++ b/fs/afs/afs.h\n@@ -10,7 +10,7 @@\n \n #include <linux/in.h>\n \n-#define AFS_MAXCELLNAME\t\t256  \t/* Maximum length of a cell name */\n+#define AFS_MAXCELLNAME\t\t253  \t/* Maximum length of a cell name (DNS limited) */\n #define AFS_MAXVOLNAME\t\t64  \t/* Maximum length of a volume name */\n #define AFS_MAXNSERVERS\t\t8   \t/* Maximum servers in a basic volume record */\n #define AFS_NMAXNSERVERS\t13  \t/* Maximum servers in a N/U-class volume record */\ndiff --git a/fs/afs/afs_vl.h b/fs/afs/afs_vl.h\nindex a06296c8827d..b835e25a2c02 100644\n--- a/fs/afs/afs_vl.h\n+++ b/fs/afs/afs_vl.h\n@@ -13,6 +13,7 @@\n #define AFS_VL_PORT\t\t7003\t/* volume location service port */\n #define VL_SERVICE\t\t52\t/* RxRPC service ID for the Volume Location service */\n #define YFS_VL_SERVICE\t\t2503\t/* Service ID for AuriStor upgraded VL service */\n+#define YFS_VL_MAXCELLNAME\t256  \t/* Maximum length of a cell name in YFS protocol */\n \n enum AFSVL_Operations {\n \tVLGETENTRYBYID\t\t= 503,\t/* AFS Get VLDB entry by ID */\ndiff --git a/fs/afs/vl_alias.c b/fs/afs/vl_alias.c\nindex 9f36e14f1c2d..f9e76b604f31 100644\n--- a/fs/afs/vl_alias.c\n+++ b/fs/afs/vl_alias.c\n@@ -253,6 +253,7 @@ static char *afs_vl_get_cell_name(struct afs_cell *cell, struct key *key)\n static int yfs_check_canonical_cell_name(struct afs_cell *cell, struct key *key)\n {\n \tstruct afs_cell *master;\n+\tsize_t name_len;\n \tchar *cell_name;\n \n \tcell_name = afs_vl_get_cell_name(cell, key);\n@@ -264,8 +265,11 @@ static int yfs_check_canonical_cell_name(struct afs_cell *cell, struct key *key)\n \t\treturn 0;\n \t}\n \n-\tmaster = afs_lookup_cell(cell->net, cell_name, strlen(cell_name),\n-\t\t\t\t NULL, false);\n+\tname_len = strlen(cell_name);\n+\tif (!name_len || name_len > AFS_MAXCELLNAME)\n+\t\tmaster = ERR_PTR(-EOPNOTSUPP);\n+\telse\n+\t\tmaster = afs_lookup_cell(cell->net, cell_name, name_len, NULL, false);\n \tkfree(cell_name);\n \tif (IS_ERR(master))\n \t\treturn PTR_ERR(master);\ndiff --git a/fs/afs/vlclient.c b/fs/afs/vlclient.c\nindex cac75f89b64a..55dd0fc5aad7 100644\n--- a/fs/afs/vlclient.c\n+++ b/fs/afs/vlclient.c\n@@ -697,7 +697,7 @@ static int afs_deliver_yfsvl_get_cell_name(struct afs_call *call)\n \t\t\treturn ret;\n \n \t\tnamesz = ntohl(call->tmp);\n-\t\tif (namesz > AFS_MAXCELLNAME)\n+\t\tif (namesz > YFS_VL_MAXCELLNAME)\n \t\t\treturn afs_protocol_error(call, afs_eproto_cellname_len);\n \t\tpaddedsz = (namesz + 3) & ~3;\n \t\tcall->count = namesz;\n"
    },
    {
      "downstream_version": "781c743e18bfd9b7dc0383f036ae952bd1486f21",
      "downstream_patch": "7cb3e77e9b4e6ffa325a5559393d3283c9af3d01",
      "commit_date": "2025-01-23 17:15:50 +0100",
      "result": "success",
      "downstream_patch_content": "commit 7cb3e77e9b4e6ffa325a5559393d3283c9af3d01\nAuthor: David Howells <dhowells@redhat.com>\nDate:   Mon Jan 6 16:21:00 2025 +0000\n\n    afs: Fix the maximum cell name length\n    \n    [ Upstream commit 8fd56ad6e7c90ac2bddb0741c6b248c8c5d56ac8 ]\n    \n    The kafs filesystem limits the maximum length of a cell to 256 bytes, but a\n    problem occurs if someone actually does that: kafs tries to create a\n    directory under /proc/net/afs/ with the name of the cell, but that fails\n    with a warning:\n    \n            WARNING: CPU: 0 PID: 9 at fs/proc/generic.c:405\n    \n    because procfs limits the maximum filename length to 255.\n    \n    However, the DNS limits the maximum lookup length and, by extension, the\n    maximum cell name, to 255 less two (length count and trailing NUL).\n    \n    Fix this by limiting the maximum acceptable cellname length to 253.  This\n    also allows us to be sure we can create the \"/afs/.<cell>/\" mountpoint too.\n    \n    Further, split the YFS VL record cell name maximum to be the 256 allowed by\n    the protocol and ignore the record retrieved by YFSVL.GetCellName if it\n    exceeds 253.\n    \n    Fixes: c3e9f888263b (\"afs: Implement client support for the YFSVL.GetCellName RPC op\")\n    Reported-by: syzbot+7848fee1f1e5c53f912b@syzkaller.appspotmail.com\n    Closes: https://lore.kernel.org/r/6776d25d.050a0220.3a8527.0048.GAE@google.com/\n    Signed-off-by: David Howells <dhowells@redhat.com>\n    Link: https://lore.kernel.org/r/376236.1736180460@warthog.procyon.org.uk\n    Tested-by: syzbot+7848fee1f1e5c53f912b@syzkaller.appspotmail.com\n    cc: Marc Dionne <marc.dionne@auristor.com>\n    cc: linux-afs@lists.infradead.org\n    Signed-off-by: Christian Brauner <brauner@kernel.org>\n    Signed-off-by: Sasha Levin <sashal@kernel.org>\n\ndiff --git a/fs/afs/afs.h b/fs/afs/afs.h\nindex 432cb4b23961..3ea5f3e3c922 100644\n--- a/fs/afs/afs.h\n+++ b/fs/afs/afs.h\n@@ -10,7 +10,7 @@\n \n #include <linux/in.h>\n \n-#define AFS_MAXCELLNAME\t\t256  \t/* Maximum length of a cell name */\n+#define AFS_MAXCELLNAME\t\t253  \t/* Maximum length of a cell name (DNS limited) */\n #define AFS_MAXVOLNAME\t\t64  \t/* Maximum length of a volume name */\n #define AFS_MAXNSERVERS\t\t8   \t/* Maximum servers in a basic volume record */\n #define AFS_NMAXNSERVERS\t13  \t/* Maximum servers in a N/U-class volume record */\ndiff --git a/fs/afs/afs_vl.h b/fs/afs/afs_vl.h\nindex 9c65ffb8a523..8da0899fbc08 100644\n--- a/fs/afs/afs_vl.h\n+++ b/fs/afs/afs_vl.h\n@@ -13,6 +13,7 @@\n #define AFS_VL_PORT\t\t7003\t/* volume location service port */\n #define VL_SERVICE\t\t52\t/* RxRPC service ID for the Volume Location service */\n #define YFS_VL_SERVICE\t\t2503\t/* Service ID for AuriStor upgraded VL service */\n+#define YFS_VL_MAXCELLNAME\t256  \t/* Maximum length of a cell name in YFS protocol */\n \n enum AFSVL_Operations {\n \tVLGETENTRYBYID\t\t= 503,\t/* AFS Get VLDB entry by ID */\ndiff --git a/fs/afs/vl_alias.c b/fs/afs/vl_alias.c\nindex f04a80e4f5c3..83cf1bfbe343 100644\n--- a/fs/afs/vl_alias.c\n+++ b/fs/afs/vl_alias.c\n@@ -302,6 +302,7 @@ static char *afs_vl_get_cell_name(struct afs_cell *cell, struct key *key)\n static int yfs_check_canonical_cell_name(struct afs_cell *cell, struct key *key)\n {\n \tstruct afs_cell *master;\n+\tsize_t name_len;\n \tchar *cell_name;\n \n \tcell_name = afs_vl_get_cell_name(cell, key);\n@@ -313,8 +314,11 @@ static int yfs_check_canonical_cell_name(struct afs_cell *cell, struct key *key)\n \t\treturn 0;\n \t}\n \n-\tmaster = afs_lookup_cell(cell->net, cell_name, strlen(cell_name),\n-\t\t\t\t NULL, false);\n+\tname_len = strlen(cell_name);\n+\tif (!name_len || name_len > AFS_MAXCELLNAME)\n+\t\tmaster = ERR_PTR(-EOPNOTSUPP);\n+\telse\n+\t\tmaster = afs_lookup_cell(cell->net, cell_name, name_len, NULL, false);\n \tkfree(cell_name);\n \tif (IS_ERR(master))\n \t\treturn PTR_ERR(master);\ndiff --git a/fs/afs/vlclient.c b/fs/afs/vlclient.c\nindex 00fca3c66ba6..16653f2ffe4f 100644\n--- a/fs/afs/vlclient.c\n+++ b/fs/afs/vlclient.c\n@@ -671,7 +671,7 @@ static int afs_deliver_yfsvl_get_cell_name(struct afs_call *call)\n \t\t\treturn ret;\n \n \t\tnamesz = ntohl(call->tmp);\n-\t\tif (namesz > AFS_MAXCELLNAME)\n+\t\tif (namesz > YFS_VL_MAXCELLNAME)\n \t\t\treturn afs_protocol_error(call, afs_eproto_cellname_len);\n \t\tpaddedsz = (namesz + 3) & ~3;\n \t\tcall->count = namesz;\n"
    },
    {
      "downstream_version": "a965f7f0ea3ae61b9165bed619d5d6da02c75f80",
      "downstream_patch": "9340385468d056bb700b8f28df236b81fc86a079",
      "commit_date": "2025-02-01 18:22:19 +0100",
      "result": "success",
      "downstream_patch_content": "commit 9340385468d056bb700b8f28df236b81fc86a079\nAuthor: David Howells <dhowells@redhat.com>\nDate:   Mon Jan 6 16:21:00 2025 +0000\n\n    afs: Fix the maximum cell name length\n    \n    [ Upstream commit 8fd56ad6e7c90ac2bddb0741c6b248c8c5d56ac8 ]\n    \n    The kafs filesystem limits the maximum length of a cell to 256 bytes, but a\n    problem occurs if someone actually does that: kafs tries to create a\n    directory under /proc/net/afs/ with the name of the cell, but that fails\n    with a warning:\n    \n            WARNING: CPU: 0 PID: 9 at fs/proc/generic.c:405\n    \n    because procfs limits the maximum filename length to 255.\n    \n    However, the DNS limits the maximum lookup length and, by extension, the\n    maximum cell name, to 255 less two (length count and trailing NUL).\n    \n    Fix this by limiting the maximum acceptable cellname length to 253.  This\n    also allows us to be sure we can create the \"/afs/.<cell>/\" mountpoint too.\n    \n    Further, split the YFS VL record cell name maximum to be the 256 allowed by\n    the protocol and ignore the record retrieved by YFSVL.GetCellName if it\n    exceeds 253.\n    \n    Fixes: c3e9f888263b (\"afs: Implement client support for the YFSVL.GetCellName RPC op\")\n    Reported-by: syzbot+7848fee1f1e5c53f912b@syzkaller.appspotmail.com\n    Closes: https://lore.kernel.org/r/6776d25d.050a0220.3a8527.0048.GAE@google.com/\n    Signed-off-by: David Howells <dhowells@redhat.com>\n    Link: https://lore.kernel.org/r/376236.1736180460@warthog.procyon.org.uk\n    Tested-by: syzbot+7848fee1f1e5c53f912b@syzkaller.appspotmail.com\n    cc: Marc Dionne <marc.dionne@auristor.com>\n    cc: linux-afs@lists.infradead.org\n    Signed-off-by: Christian Brauner <brauner@kernel.org>\n    Signed-off-by: Sasha Levin <sashal@kernel.org>\n\ndiff --git a/fs/afs/afs.h b/fs/afs/afs.h\nindex 432cb4b23961..3ea5f3e3c922 100644\n--- a/fs/afs/afs.h\n+++ b/fs/afs/afs.h\n@@ -10,7 +10,7 @@\n \n #include <linux/in.h>\n \n-#define AFS_MAXCELLNAME\t\t256  \t/* Maximum length of a cell name */\n+#define AFS_MAXCELLNAME\t\t253  \t/* Maximum length of a cell name (DNS limited) */\n #define AFS_MAXVOLNAME\t\t64  \t/* Maximum length of a volume name */\n #define AFS_MAXNSERVERS\t\t8   \t/* Maximum servers in a basic volume record */\n #define AFS_NMAXNSERVERS\t13  \t/* Maximum servers in a N/U-class volume record */\ndiff --git a/fs/afs/afs_vl.h b/fs/afs/afs_vl.h\nindex 9c65ffb8a523..8da0899fbc08 100644\n--- a/fs/afs/afs_vl.h\n+++ b/fs/afs/afs_vl.h\n@@ -13,6 +13,7 @@\n #define AFS_VL_PORT\t\t7003\t/* volume location service port */\n #define VL_SERVICE\t\t52\t/* RxRPC service ID for the Volume Location service */\n #define YFS_VL_SERVICE\t\t2503\t/* Service ID for AuriStor upgraded VL service */\n+#define YFS_VL_MAXCELLNAME\t256  \t/* Maximum length of a cell name in YFS protocol */\n \n enum AFSVL_Operations {\n \tVLGETENTRYBYID\t\t= 503,\t/* AFS Get VLDB entry by ID */\ndiff --git a/fs/afs/vl_alias.c b/fs/afs/vl_alias.c\nindex f04a80e4f5c3..83cf1bfbe343 100644\n--- a/fs/afs/vl_alias.c\n+++ b/fs/afs/vl_alias.c\n@@ -302,6 +302,7 @@ static char *afs_vl_get_cell_name(struct afs_cell *cell, struct key *key)\n static int yfs_check_canonical_cell_name(struct afs_cell *cell, struct key *key)\n {\n \tstruct afs_cell *master;\n+\tsize_t name_len;\n \tchar *cell_name;\n \n \tcell_name = afs_vl_get_cell_name(cell, key);\n@@ -313,8 +314,11 @@ static int yfs_check_canonical_cell_name(struct afs_cell *cell, struct key *key)\n \t\treturn 0;\n \t}\n \n-\tmaster = afs_lookup_cell(cell->net, cell_name, strlen(cell_name),\n-\t\t\t\t NULL, false);\n+\tname_len = strlen(cell_name);\n+\tif (!name_len || name_len > AFS_MAXCELLNAME)\n+\t\tmaster = ERR_PTR(-EOPNOTSUPP);\n+\telse\n+\t\tmaster = afs_lookup_cell(cell->net, cell_name, name_len, NULL, false);\n \tkfree(cell_name);\n \tif (IS_ERR(master))\n \t\treturn PTR_ERR(master);\ndiff --git a/fs/afs/vlclient.c b/fs/afs/vlclient.c\nindex dc9327332f06..882f0727c3cd 100644\n--- a/fs/afs/vlclient.c\n+++ b/fs/afs/vlclient.c\n@@ -670,7 +670,7 @@ static int afs_deliver_yfsvl_get_cell_name(struct afs_call *call)\n \t\t\treturn ret;\n \n \t\tnamesz = ntohl(call->tmp);\n-\t\tif (namesz > AFS_MAXCELLNAME)\n+\t\tif (namesz > YFS_VL_MAXCELLNAME)\n \t\t\treturn afs_protocol_error(call, afs_eproto_cellname_len);\n \t\tpaddedsz = (namesz + 3) & ~3;\n \t\tcall->count = namesz;\n"
    }
  ],
  "failures": []
}