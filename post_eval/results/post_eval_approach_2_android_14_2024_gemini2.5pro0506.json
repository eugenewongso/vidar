[
  {
    "cve_id": "ASB-A-242996380",
    "downstream_version": "14",
    "file_name": "service/src/com/android/server/bluetooth/BtPermissionUtils.java",
    "runtime_seconds": null,
    "cleaned_ground_truth": "",
    "cleaned_upstream_plus_llm": "",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 1.0,
      "token_level_edit_distance": 0,
      "codebert_score": {
        "error": "Candidate code and ground truth code must not be empty."
      },
      "token_count_upstream": 0,
      "token_count_downstream": 0,
      "token_count_total": 0,
      "cosine_similarity_openai": 1.0
    }
  },
  {
    "cve_id": "ASB-A-316891059",
    "downstream_version": "14",
    "file_name": "src/com/android/settings/search/SearchResultTrampoline.java",
    "runtime_seconds": null,
    "cleaned_ground_truth": "@@ -20,7 +20,6 @@ import static com.android.settings.SettingsActivity.EXTRA_SHOW_FRAGMENT_ARGUMENT\n import static com.android.settings.SettingsActivity.EXTRA_SHOW_FRAGMENT_TAB;\n \n import android.app.Activity;\n-import android.content.ComponentName;\n import android.content.Intent;\n import android.net.Uri;\n import android.os.Bundle;\n@@ -52,11 +51,11 @@ public class SearchResultTrampoline extends Activity {\n     protected void onCreate(Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n \n-        final ComponentName callingActivity = getCallingActivity();\n+        final String callerPackage = getLaunchedFromPackage();\n         // First make sure caller has privilege to launch a search result page.\n         FeatureFactory.getFactory(this)\n                 .getSearchFeatureProvider()\n-                .verifyLaunchSearchResultPageCaller(this, callingActivity);\n+                .verifyLaunchSearchResultPageCaller(this, callerPackage);\n         // Didn't crash, proceed and launch the result as a subsetting.\n         Intent intent = getIntent();\n         final String highlightMenuKey = intent.getStringExtra(\n@@ -105,7 +104,7 @@ public class SearchResultTrampoline extends Activity {\n         if (!ActivityEmbeddingUtils.isEmbeddingActivityEnabled(this)\n                 || ActivityEmbeddingUtils.isAlreadyEmbedded(this)) {\n             startActivity(intent);\n-        } else if (isSettingsIntelligence(callingActivity)) {\n+        } else if (isSettingsIntelligence(callerPackage)) {\n             if (FeatureFlagUtils.isEnabled(this, FeatureFlags.SETTINGS_SEARCH_ALWAYS_EXPAND)) {\n                 startActivity(SettingsActivity.getTrampolineIntent(intent, highlightMenuKey)\n                         .setClass(this, DeepLinkHomepageActivityInternal.class)\n@@ -138,9 +137,9 @@ public class SearchResultTrampoline extends Activity {\n         finish();\n     }\n \n-    private boolean isSettingsIntelligence(ComponentName callingActivity) {\n-        return callingActivity != null && TextUtils.equals(\n-                callingActivity.getPackageName(),\n+    private boolean isSettingsIntelligence(String callerPackage) {\n+        return TextUtils.equals(\n+                callerPackage,\n                 FeatureFactory.getFactory(this).getSearchFeatureProvider()\n                         .getSettingsIntelligencePkgName(this));\n     }",
    "cleaned_upstream_plus_llm": "@@ -1,4 +1,3 @@\n-```java\n /*\n  * Copyright (C) 2017 The Android Open Source Project\n  *\n@@ -144,5 +143,4 @@\n                 FeatureFactory.getFactory(this).getSearchFeatureProvider()\n                         .getSettingsIntelligencePkgName(this));\n     }\n-}\n-```+}",
    "metrics": {
      "relative_line_count_similarity": 0.2683,
      "normalized_edit_similarity": 0.0866,
      "token_level_edit_distance": 247,
      "codebert_score": {
        "precision": 0.7691,
        "recall": 0.6073,
        "f1": 0.6787,
        "f3": 0.6204
      },
      "token_count_upstream": 166,
      "token_count_downstream": 25,
      "token_count_total": 191,
      "cosine_similarity_openai": 0.5731
    }
  },
  {
    "cve_id": "ASB-A-333364513",
    "downstream_version": "14",
    "file_name": "src/com/android/settings/search/SearchResultTrampoline.java",
    "runtime_seconds": 139.4,
    "cleaned_ground_truth": "@@ -20,7 +20,6 @@ import static com.android.settings.SettingsActivity.EXTRA_SHOW_FRAGMENT_ARGUMENT\n import static com.android.settings.SettingsActivity.EXTRA_SHOW_FRAGMENT_TAB;\n \n import android.app.Activity;\n-import android.content.ComponentName;\n import android.content.Intent;\n import android.net.Uri;\n import android.os.Bundle;\n@@ -52,11 +51,11 @@ public class SearchResultTrampoline extends Activity {\n     protected void onCreate(Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n \n-        final ComponentName callingActivity = getCallingActivity();\n+        final String callerPackage = getLaunchedFromPackage();\n         // First make sure caller has privilege to launch a search result page.\n         FeatureFactory.getFactory(this)\n                 .getSearchFeatureProvider()\n-                .verifyLaunchSearchResultPageCaller(this, callingActivity);\n+                .verifyLaunchSearchResultPageCaller(this, callerPackage);\n         // Didn't crash, proceed and launch the result as a subsetting.\n         Intent intent = getIntent();\n         final String highlightMenuKey = intent.getStringExtra(\n@@ -105,7 +104,7 @@ public class SearchResultTrampoline extends Activity {\n         if (!ActivityEmbeddingUtils.isEmbeddingActivityEnabled(this)\n                 || ActivityEmbeddingUtils.isAlreadyEmbedded(this)) {\n             startActivity(intent);\n-        } else if (isSettingsIntelligence(callingActivity)) {\n+        } else if (isSettingsIntelligence(callerPackage)) {\n             if (FeatureFlagUtils.isEnabled(this, FeatureFlags.SETTINGS_SEARCH_ALWAYS_EXPAND)) {\n                 startActivity(SettingsActivity.getTrampolineIntent(intent, highlightMenuKey)\n                         .setClass(this, DeepLinkHomepageActivityInternal.class)\n@@ -138,9 +137,9 @@ public class SearchResultTrampoline extends Activity {\n         finish();\n     }\n \n-    private boolean isSettingsIntelligence(ComponentName callingActivity) {\n-        return callingActivity != null && TextUtils.equals(\n-                callingActivity.getPackageName(),\n+    private boolean isSettingsIntelligence(String callerPackage) {\n+        return TextUtils.equals(\n+                callerPackage,\n                 FeatureFactory.getFactory(this).getSearchFeatureProvider()\n                         .getSettingsIntelligencePkgName(this));\n     }",
    "cleaned_upstream_plus_llm": "@@ -1,4 +1,3 @@\n-```java\n /*\n  * Copyright (C) 2017 The Android Open Source Project\n  *\n@@ -52,11 +51,11 @@\n     protected void onCreate(Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n \n-        final ComponentName callingActivity = getCallingActivity();\n+        final String callerPackage = getLaunchedFromPackage();\n         // First make sure caller has privilege to launch a search result page.\n-        FeatureFactory.getFactory(this)\n+        FeatureFactory.getFeatureFactory()\n                 .getSearchFeatureProvider()\n-                .verifyLaunchSearchResultPageCaller(this, callingActivity);\n+                .verifyLaunchSearchResultPageCaller(this, callerPackage);\n         // Didn't crash, proceed and launch the result as a subsetting.\n         Intent intent = getIntent();\n         final String highlightMenuKey = intent.getStringExtra(\n@@ -137,12 +136,11 @@\n         // Done.\n         finish();\n     }\n-\n-    private boolean isSettingsIntelligence(ComponentName callingActivity) {\n-        return callingActivity != null && TextUtils.equals(\n-                callingActivity.getPackageName(),\n-                FeatureFactory.getFactory(this).getSearchFeatureProvider()\n+    // The empty line is preserved\n+    private boolean isSettingsIntelligence(String callerPackage) {\n+        return TextUtils.equals(\n+                callerPackage,\n+                FeatureFactory.getFeatureFactory().getSearchFeatureProvider()\n                         .getSettingsIntelligencePkgName(this));\n     }\n-}\n-```+}",
    "metrics": {
      "relative_line_count_similarity": 0.9024,
      "normalized_edit_similarity": 0.4497,
      "token_level_edit_distance": 166,
      "codebert_score": {
        "precision": 0.8604,
        "recall": 0.8007,
        "f1": 0.8295,
        "f3": 0.8063
      },
      "token_count_upstream": 166,
      "token_count_downstream": 132,
      "token_count_total": 298,
      "cosine_similarity_openai": 0.8375
    }
  },
  {
    "cve_id": "ASB-A-314333719",
    "downstream_version": "14",
    "file_name": "packages/SystemUI/src/com/android/systemui/media/dagger/MediaModule.java",
    "runtime_seconds": null,
    "cleaned_ground_truth": "",
    "cleaned_upstream_plus_llm": "@@ -1,4 +1,3 @@\n-```java\n /*\n  * Copyright (C) 2020 The Android Open Source Project\n  *\n@@ -149,5 +148,4 @@\n         }\n         return Optional.of(nearbyMediaDevicesManagerLazy.get());\n     }\n-}\n-```+}",
    "metrics": {
      "relative_line_count_similarity": 0.0,
      "normalized_edit_similarity": 0.0,
      "token_level_edit_distance": 50,
      "codebert_score": {
        "error": "Candidate code and ground truth code must not be empty."
      },
      "token_count_upstream": 0,
      "token_count_downstream": 26,
      "token_count_total": 26,
      "cosine_similarity_openai": 0.1365
    }
  },
  {
    "cve_id": "ASB-A-328068777",
    "downstream_version": "14",
    "file_name": "service/java/com/android/server/healthconnect/HealthConnectServiceImpl.java",
    "runtime_seconds": 127.14,
    "cleaned_ground_truth": "@@ -798,6 +798,10 @@ final class HealthConnectServiceImpl extends IHealthConnectService.Stub {\n                                 mAppOpsManagerLocal.isUidInForeground(uid),\n                                 builder);\n                         throwExceptionIfDataSyncInProgress();\n+                        if (request.getRecordTypes().isEmpty()) {\n+                            throw new IllegalArgumentException(\n+                                    \"Requested record types must not be empty.\");\n+                        }\n                         mDataPermissionEnforcer.enforceRecordIdsReadPermissions(\n                                 request.getRecordTypesList(), attributionSource);\n                         callback.onResult(\n@@ -816,6 +820,14 @@ final class HealthConnectServiceImpl extends IHealthConnectService.Stub {\n                         builder.setHealthDataServiceApiStatusError(ERROR_SECURITY);\n                         Slog.e(TAG, \"SecurityException: \", securityException);\n                         tryAndThrowException(callback, securityException, ERROR_SECURITY);\n+                    } catch (IllegalArgumentException illegalArgumentException) {\n+                        builder.setHealthDataServiceApiStatusError(\n+                                HealthConnectException.ERROR_INVALID_ARGUMENT);\n+                        Slog.e(TAG, \"IllegalArgumentException: \", illegalArgumentException);\n+                        tryAndThrowException(\n+                                callback,\n+                                illegalArgumentException,\n+                                HealthConnectException.ERROR_INVALID_ARGUMENT);\n                     } catch (HealthConnectException healthConnectException) {\n                         builder.setHealthDataServiceApiStatusError(\n                                 healthConnectException.getErrorCode());\n@@ -862,6 +874,10 @@ final class HealthConnectServiceImpl extends IHealthConnectService.Stub {\n                         ChangeLogsRequestHelper.TokenRequest changeLogsTokenRequest =\n                                 ChangeLogsRequestHelper.getRequest(\n                                         attributionSource.getPackageName(), token.getToken());\n+                        if (changeLogsTokenRequest.getRecordTypes().isEmpty()) {\n+                            throw new IllegalArgumentException(\n+                                    \"Requested record types must not be empty.\");\n+                        }\n                         mDataPermissionEnforcer.enforceRecordIdsReadPermissions(\n                                 changeLogsTokenRequest.getRecordTypes(), attributionSource);\n                         boolean isInForeground = mAppOpsManagerLocal.isUidInForeground(uid);",
    "cleaned_upstream_plus_llm": "@@ -1,4 +1,3 @@\n-```java\n /*\n  * Copyright (C) 2023 The Android Open Source Project\n  *\n@@ -875,6 +874,10 @@\n                         ChangeLogsRequestHelper.TokenRequest changeLogsTokenRequest =\n                                 ChangeLogsRequestHelper.getRequest(\n                                         attributionSource.getPackageName(), token.getToken());\n+                        if (changeLogsTokenRequest.getRecordTypes().isEmpty()) {\n+                            throw new IllegalArgumentException(\n+                                    \"Requested record types must not be empty.\");\n+                        }\n                         mDataPermissionEnforcer.enforceRecordIdsReadPermissions(\n                                 changeLogsTokenRequest.getRecordTypes(), attributionSource);\n                         boolean isInForeground = mAppOpsManagerLocal.isUidInForeground(uid);\n@@ -2333,5 +2336,4 @@\n             Log.e(TAG, \"Unable to send result to the callback\", e);\n         }\n     }\n-}\n-```+}",
    "metrics": {
      "relative_line_count_similarity": 0.5946,
      "normalized_edit_similarity": 0.2189,
      "token_level_edit_distance": 56,
      "codebert_score": {
        "precision": 0.8439,
        "recall": 0.7891,
        "f1": 0.8156,
        "f3": 0.7943
      },
      "token_count_upstream": 124,
      "token_count_downstream": 68,
      "token_count_total": 192,
      "cosine_similarity_openai": 0.7378
    }
  },
  {
    "cve_id": "ASB-A-309938635",
    "downstream_version": "14",
    "file_name": "ojluni/src/main/java/java/util/zip/ZipFile.java",
    "runtime_seconds": 362.74,
    "cleaned_ground_truth": "",
    "cleaned_upstream_plus_llm": "@@ -1,4 +1,3 @@\n-```java\n /*\n  * Copyright (C) 2014 The Android Open Source Project\n  * Copyright (c) 1995, 2015, Oracle and/or its affiliates. All rights reserved.\n@@ -298,6 +297,16 @@\n         this.name = name;\n         this.total = getTotal(jzfile);\n         this.locsig = startsWithLOC(jzfile);\n+        // BEGIN Android-changed: do not accept files with invalid header\n+        // A ZIP file must start with LOCSIG or be an empty ZIP file (which starts with ENDSIG).\n+        // startsWithLOC(jzfile) checks for LOCSIG.\n+        // If !locsig and total != 0, it's neither a valid non-empty ZIP nor a valid empty ZIP.\n+        if (!this.locsig && this.total != 0) {\n+            // We don't have the actual signature value from native code to include in the message.\n+            throw new ZipException(\"Invalid LFH signature at offset 0. \" +\n+                                   \"Expected LOCSIG (for non-empty archives) or ENDSIG (for empty archives).\");\n+        }\n+        // END Android-changed: do not accept files with invalid header\n         // Android-added: CloseGuard support.\n         guard.open(\"close\");\n     }\n@@ -969,5 +978,4 @@\n     private static native byte[] getEntryBytes(long jzentry, int type);\n \n     private static native String getZipMessage(long jzfile);\n-}\n-```+}",
    "metrics": {
      "relative_line_count_similarity": 0.0,
      "normalized_edit_similarity": 0.0,
      "token_level_edit_distance": 225,
      "codebert_score": {
        "error": "Candidate code and ground truth code must not be empty."
      },
      "token_count_upstream": 0,
      "token_count_downstream": 181,
      "token_count_total": 181,
      "cosine_similarity_openai": 0.0859
    }
  },
  {
    "cve_id": "ASB-A-313428840",
    "downstream_version": "14",
    "file_name": "services/companion/java/com/android/server/companion/CompanionDeviceManagerService.java",
    "runtime_seconds": 95.92,
    "cleaned_ground_truth": "@@ -83,9 +83,7 @@ import android.os.ParcelFileDescriptor;\n import android.os.PowerWhitelistManager;\n import android.os.RemoteCallbackList;\n import android.os.RemoteException;\n-import android.os.ResultReceiver;\n import android.os.ServiceManager;\n-import android.os.ShellCallback;\n import android.os.SystemProperties;\n import android.os.UserHandle;\n import android.os.UserManager;\n@@ -931,13 +929,14 @@ public class CompanionDeviceManagerService extends SystemService {\n         }\n \n         @Override\n-        public void onShellCommand(FileDescriptor in, FileDescriptor out, FileDescriptor err,\n-                String[] args, ShellCallback callback, ResultReceiver resultReceiver)\n-                throws RemoteException {\n-            new CompanionDeviceShellCommand(CompanionDeviceManagerService.this, mAssociationStore,\n-                    mDevicePresenceMonitor, mTransportManager, mSystemDataTransferRequestStore,\n-                    mAssociationRequestsProcessor)\n-                    .exec(this, in, out, err, args, callback, resultReceiver);\n+        public int handleShellCommand(@NonNull ParcelFileDescriptor in,\n+                @NonNull ParcelFileDescriptor out, @NonNull ParcelFileDescriptor err,\n+                @NonNull String[] args) {\n+            return new CompanionDeviceShellCommand(CompanionDeviceManagerService.this,\n+                    mAssociationStore, mDevicePresenceMonitor, mTransportManager,\n+                    mSystemDataTransferRequestStore, mAssociationRequestsProcessor)\n+                    .exec(this, in.getFileDescriptor(), out.getFileDescriptor(),\n+                            err.getFileDescriptor(), args);\n         }\n \n         @Override",
    "cleaned_upstream_plus_llm": "@@ -1,4 +1,3 @@\n-```java\n /*\n  * Copyright (C) 2017 The Android Open Source Project\n  *\n@@ -930,13 +929,14 @@\n         }\n \n         @Override\n-        public void onShellCommand(FileDescriptor in, FileDescriptor out, FileDescriptor err,\n-                String[] args, ShellCallback callback, ResultReceiver resultReceiver)\n-                throws RemoteException {\n-            new CompanionDeviceShellCommand(CompanionDeviceManagerService.this, mAssociationStore,\n-                    mDevicePresenceMonitor, mTransportManager, mSystemDataTransferRequestStore,\n-                    mAssociationRequestsProcessor)\n-                    .exec(this, in, out, err, args, callback, resultReceiver);\n+        public int handleShellCommand(@NonNull ParcelFileDescriptor in,\n+                @NonNull ParcelFileDescriptor out, @NonNull ParcelFileDescriptor err,\n+                @NonNull String[] args) {\n+            return new CompanionDeviceShellCommand(CompanionDeviceManagerService.this,\n+                    mAssociationStore, mDevicePresenceMonitor, mTransportManager,\n+                    mSystemDataTransferProcessor, mAssociationRequestsProcessor)\n+                    .exec(this, in.getFileDescriptor(), out.getFileDescriptor(),\n+                            err.getFileDescriptor(), args);\n         }\n \n         @Override\n@@ -1570,5 +1570,4 @@\n             return new ArraySet<>();\n         }\n     }\n-}\n-```+}",
    "metrics": {
      "relative_line_count_similarity": 0.9667,
      "normalized_edit_similarity": 0.5661,
      "token_level_edit_distance": 53,
      "codebert_score": {
        "precision": 0.8873,
        "recall": 0.8654,
        "f1": 0.8762,
        "f3": 0.8675
      },
      "token_count_upstream": 112,
      "token_count_downstream": 109,
      "token_count_total": 221,
      "cosine_similarity_openai": 0.8926
    }
  },
  {
    "cve_id": "ASB-A-353712853",
    "downstream_version": "14",
    "file_name": "services/usb/java/com/android/server/usb/UsbDeviceManager.java",
    "runtime_seconds": 49.21,
    "cleaned_ground_truth": "@@ -819,7 +819,7 @@ public class UsbDeviceManager implements ActivityTaskManagerInternal.ScreenObser\n             }\n         }\n \n-        private void notifyAccessoryModeExit(int operationId) {\n+        protected void notifyAccessoryModeExit(int operationId) {\n             // make sure accessory mode is off\n             // and restore default functions\n             Slog.d(TAG, \"exited USB accessory mode\");\n@@ -2145,8 +2145,13 @@ public class UsbDeviceManager implements ActivityTaskManagerInternal.ScreenObser\n                      */\n                     operationId = sUsbOperationCount.incrementAndGet();\n                     if (msg.arg1 != 1) {\n-                        // Set this since default function may be selected from Developer options\n-                        setEnabledFunctions(mScreenUnlockedFunctions, false, operationId);\n+                        if (mCurrentFunctions == UsbManager.FUNCTION_ACCESSORY) {\n+                            notifyAccessoryModeExit(operationId);\n+                        } else {\n+                            // Set this since default function may be selected from Developer\n+                            // options\n+                            setEnabledFunctions(mScreenUnlockedFunctions, false, operationId);\n+                        }\n                     }\n                     break;\n                 case MSG_GADGET_HAL_REGISTERED:",
    "cleaned_upstream_plus_llm": "@@ -1,4 +1,3 @@\n-```java\n /*\n  * Copyright (C) 2011 The Android Open Source Project\n  *\n@@ -77,6 +76,7 @@\n import android.provider.Settings;\n import android.service.usb.UsbDeviceManagerProto;\n import android.service.usb.UsbHandlerProto;\n+import android.text.TextUtils;\n import android.util.Pair;\n import android.util.Slog;\n \n@@ -2498,5 +2498,4 @@\n     private native boolean nativeIsStartRequested();\n \n     private native int nativeGetAudioMode();\n-}\n-```+}",
    "metrics": {
      "relative_line_count_similarity": 0.7083,
      "normalized_edit_similarity": 0.1402,
      "token_level_edit_distance": 149,
      "codebert_score": {
        "precision": 0.6851,
        "recall": 0.6204,
        "f1": 0.6512,
        "f3": 0.6263
      },
      "token_count_upstream": 112,
      "token_count_downstream": 46,
      "token_count_total": 158,
      "cosine_similarity_openai": 0.5016
    }
  },
  {
    "cve_id": "ASB-A-311374917",
    "downstream_version": "14",
    "file_name": "services/core/java/com/android/server/pm/InstallPackageHelper.java",
    "runtime_seconds": 86.49,
    "cleaned_ground_truth": "@@ -4742,7 +4742,9 @@ final class InstallPackageHelper {\n \n     private void assertPackageWithSharedUserIdIsPrivileged(AndroidPackage pkg)\n             throws PackageManagerException {\n-        if (!AndroidPackageUtils.isPrivileged(pkg) && (pkg.getSharedUserId() != null)) {\n+        if (!AndroidPackageUtils.isPrivileged(pkg)\n+                && (pkg.getSharedUserId() != null)\n+                && !pkg.isLeavingSharedUser()) {\n             SharedUserSetting sharedUserSetting = null;\n             try {\n                 synchronized (mPm.mLock) {\n@@ -4783,7 +4785,8 @@ final class InstallPackageHelper {\n         if (((scanFlags & SCAN_AS_PRIVILEGED) == 0)\n                 && !AndroidPackageUtils.isPrivileged(pkg)\n                 && (pkg.getSharedUserId() != null)\n-                && !skipVendorPrivilegeScan) {\n+                && !skipVendorPrivilegeScan\n+                && !pkg.isLeavingSharedUser()) {\n             SharedUserSetting sharedUserSetting = null;\n             synchronized (mPm.mLock) {\n                 try {",
    "cleaned_upstream_plus_llm": "@@ -1,4 +1,3 @@\n-```java\n /*\n  * Copyright (C) 2021 The Android Open Source Project\n  *\n@@ -4743,7 +4742,9 @@\n \n     private void assertPackageWithSharedUserIdIsPrivileged(AndroidPackage pkg)\n             throws PackageManagerException {\n-        if (!AndroidPackageUtils.isPrivileged(pkg) && (pkg.getSharedUserId() != null)) {\n+        if (!AndroidPackageUtils.isPrivileged(pkg)\n+                && (pkg.getSharedUserId() != null)\n+                && !pkg.isLeavingSharedUser()) {\n             SharedUserSetting sharedUserSetting = null;\n             try {\n                 synchronized (mPm.mLock) {\n@@ -4811,5 +4812,4 @@\n \n         return scanFlags;\n     }\n-}\n-```+}",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 0.4207,
      "token_level_edit_distance": 87,
      "codebert_score": {
        "precision": 0.8793,
        "recall": 0.8472,
        "f1": 0.8629,
        "f3": 0.8503
      },
      "token_count_upstream": 84,
      "token_count_downstream": 65,
      "token_count_total": 149,
      "cosine_similarity_openai": 0.8527
    }
  },
  {
    "cve_id": "ASB-A-319081336",
    "downstream_version": "14",
    "file_name": "core/jni/com_android_internal_os_ZygoteCommandBuffer.cpp",
    "runtime_seconds": null,
    "cleaned_ground_truth": "@@ -353,6 +353,18 @@ jstring com_android_internal_os_ZygoteCommandBuffer_nativeNextArg(JNIEnv* env, j\n   return result;\n }\n \n+static uid_t getSocketPeerUid(int socket, const std::function<void(const std::string&)>& fail_fn) {\n+  struct ucred credentials;\n+  socklen_t cred_size = sizeof credentials;\n+  if (getsockopt(socket, SOL_SOCKET, SO_PEERCRED, &credentials, &cred_size) == -1\n+      || cred_size != sizeof credentials) {\n+    fail_fn(CREATE_ERROR(\"Failed to get socket credentials, %s\",\n+                         strerror(errno)));\n+  }\n+\n+  return credentials.uid;\n+}\n+\n // Read all lines from the current command into the buffer, and then reset the buffer, so\n // we will start reading again at the beginning of the command, starting with the argument\n // count. And we don't need access to the fd to do so.\n@@ -412,19 +424,12 @@ jboolean com_android_internal_os_ZygoteCommandBuffer_nativeForkRepeatedly(\n     fail_fn_z(\"Failed to retrieve session socket timeout\");\n   }\n \n-  struct ucred credentials;\n-  socklen_t cred_size = sizeof credentials;\n-  if (getsockopt(n_buffer->getFd(), SOL_SOCKET, SO_PEERCRED, &credentials, &cred_size) == -1\n-      || cred_size != sizeof credentials) {\n-    fail_fn_1(CREATE_ERROR(\"ForkRepeatedly failed to get initial credentials, %s\",\n-                           strerror(errno)));\n+  uid_t peerUid = getSocketPeerUid(session_socket, fail_fn_1);\n+  if (peerUid != static_cast<uid_t>(expected_uid)) {\n+    return JNI_FALSE;\n   }\n-\n   bool first_time = true;\n   do {\n-    if (credentials.uid != expected_uid) {\n-      return JNI_FALSE;\n-    }\n     n_buffer->readAllLines(first_time ? fail_fn_1 : fail_fn_n);\n     n_buffer->reset();\n     int pid = zygote::forkApp(env, /* no pipe FDs */ -1, -1, session_socket_fds,\n@@ -454,30 +459,56 @@ jboolean com_android_internal_os_ZygoteCommandBuffer_nativeForkRepeatedly(\n     // Clear buffer and get count from next command.\n     n_buffer->clear();\n     for (;;) {\n+      bool valid_session_socket = true;\n       // Poll isn't strictly necessary for now. But without it, disconnect is hard to detect.\n       int poll_res = TEMP_FAILURE_RETRY(poll(fd_structs, 2, -1 /* infinite timeout */));\n       if ((fd_structs[SESSION_IDX].revents & POLLIN) != 0) {\n         if (n_buffer->getCount(fail_fn_z) != 0) {\n           break;\n-        }  // else disconnected;\n+        } else {\n+          // Session socket was disconnected\n+          valid_session_socket = false;\n+          close(session_socket);\n+        }\n       } else if (poll_res == 0 || (fd_structs[ZYGOTE_IDX].revents & POLLIN) == 0) {\n         fail_fn_z(\n             CREATE_ERROR(\"Poll returned with no descriptors ready! Poll returned %d\", poll_res));\n       }\n-      // We've now seen either a disconnect or connect request.\n-      close(session_socket);\n-      int new_fd = TEMP_FAILURE_RETRY(accept(zygote_socket_fd, nullptr, nullptr));\n+      int new_fd = -1;\n+      do {\n+        // We've now seen either a disconnect or connect request.\n+        new_fd = TEMP_FAILURE_RETRY(accept(zygote_socket_fd, nullptr, nullptr));\n+        if (new_fd == -1) {\n+          fail_fn_z(CREATE_ERROR(\"Accept(%d) failed: %s\", zygote_socket_fd, strerror(errno)));\n+        }\n+        uid_t newPeerUid = getSocketPeerUid(new_fd, fail_fn_1);\n+        if (newPeerUid != static_cast<uid_t>(expected_uid)) {\n+          ALOGW(\"Dropping new connection with a mismatched uid %d\\n\", newPeerUid);\n+          close(new_fd);\n+          new_fd = -1;\n+        } else {\n+          // If we still have a valid session socket, close it now\n+          if (valid_session_socket) {\n+              close(session_socket);\n+          }\n+          valid_session_socket = true;\n+        }\n+      } while (!valid_session_socket);\n+\n+      // At this point we either have a valid new connection (new_fd > 0), or\n+      // an existing session socket we can poll on\n       if (new_fd == -1) {\n-        fail_fn_z(CREATE_ERROR(\"Accept(%d) failed: %s\", zygote_socket_fd, strerror(errno)));\n+        // The new connection wasn't valid, and we still have an old one; retry polling\n+        continue;\n       }\n       if (new_fd != session_socket) {\n-          // Move new_fd back to the old value, so that we don't have to change Java-level data\n-          // structures to reflect a change. This implicitly closes the old one.\n-          if (TEMP_FAILURE_RETRY(dup2(new_fd, session_socket)) != session_socket) {\n-            fail_fn_z(CREATE_ERROR(\"Failed to move fd %d to %d: %s\",\n-                                   new_fd, session_socket, strerror(errno)));\n-          }\n-          close(new_fd);  //  On Linux, fd is closed even if EINTR is returned.\n+        // Move new_fd back to the old value, so that we don't have to change Java-level data\n+        // structures to reflect a change. This implicitly closes the old one.\n+        if (TEMP_FAILURE_RETRY(dup2(new_fd, session_socket)) != session_socket) {\n+          fail_fn_z(CREATE_ERROR(\"Failed to move fd %d to %d: %s\",\n+                                 new_fd, session_socket, strerror(errno)));\n+        }\n+        close(new_fd);  //  On Linux, fd is closed even if EINTR is returned.\n       }\n       // If we ever return, we effectively reuse the old Java ZygoteConnection.\n       // None of its state needs to change.\n@@ -489,13 +520,6 @@ jboolean com_android_internal_os_ZygoteCommandBuffer_nativeForkRepeatedly(\n         fail_fn_z(CREATE_ERROR(\"Failed to set send timeout for socket %d: %s\",\n                                session_socket, strerror(errno)));\n       }\n-      if (getsockopt(session_socket, SOL_SOCKET, SO_PEERCRED, &credentials, &cred_size) == -1) {\n-        fail_fn_z(CREATE_ERROR(\"ForkMany failed to get credentials: %s\", strerror(errno)));\n-      }\n-      if (cred_size != sizeof credentials) {\n-        fail_fn_z(CREATE_ERROR(\"ForkMany credential size = %d, should be %d\",\n-                               cred_size, static_cast<int>(sizeof credentials)));\n-      }\n     }\n     first_time = false;\n   } while (n_buffer->isSimpleForkCommand(minUid, fail_fn_n));",
    "cleaned_upstream_plus_llm": "@@ -1,4 +1,3 @@\n-```cpp\n /*\n  * Copyright (C) 2020 The Android Open Source Project\n  *\n@@ -554,5 +553,4 @@\n                               NELEM(gMethods));\n }\n \n-}  // namespace android\n-```+}  // namespace android",
    "metrics": {
      "relative_line_count_similarity": 0.0813,
      "normalized_edit_similarity": 0.0312,
      "token_level_edit_distance": 117,
      "codebert_score": {
        "precision": 0.6774,
        "recall": 0.5045,
        "f1": 0.5783,
        "f3": 0.5177
      },
      "token_count_upstream": 725,
      "token_count_downstream": 30,
      "token_count_total": 755,
      "cosine_similarity_openai": 0.33
    }
  },
  {
    "cve_id": "ASB-A-318374503",
    "downstream_version": "14",
    "file_name": "system/stack/btm/btm_sec.cc",
    "runtime_seconds": 7.37,
    "cleaned_ground_truth": "@@ -222,8 +222,7 @@ static bool access_secure_service_from_temp_bond(const tBTM_SEC_DEV_REC* p_dev_r\n                                                  bool locally_initiated,\n                                                  uint16_t security_req) {\n   return !locally_initiated && (security_req & BTM_SEC_IN_AUTHENTICATE) &&\n-    p_dev_rec->is_device_authenticated() &&\n-    p_dev_rec->is_bond_type_temporary();\n+         p_dev_rec->is_bond_type_temporary();\n }\n \n /*******************************************************************************",
    "cleaned_upstream_plus_llm": "@@ -1,4 +1,3 @@\n-```cc\n /******************************************************************************\n  *\n  *  Copyright 1999-2012 Broadcom Corporation\n@@ -223,7 +222,6 @@\n                                                  bool locally_initiated,\n                                                  uint16_t security_req) {\n   return !locally_initiated && (security_req & BTM_SEC_IN_AUTHENTICATE) &&\n-    p_dev_rec->is_device_authenticated() &&\n     p_dev_rec->is_bond_type_temporary();\n }\n \n@@ -5126,5 +5124,4 @@\n   if (p_dev_rec == NULL) return;\n \n   p_dev_rec->remote_version_info = remote_version_info;\n-}\n-```+}",
    "metrics": {
      "relative_line_count_similarity": 0.1111,
      "normalized_edit_similarity": 0.4471,
      "token_level_edit_distance": 57,
      "codebert_score": {
        "precision": 0.8301,
        "recall": 0.8936,
        "f1": 0.8607,
        "f3": 0.8868
      },
      "token_count_upstream": 30,
      "token_count_downstream": 47,
      "token_count_total": 77,
      "cosine_similarity_openai": 0.7295
    }
  },
  {
    "cve_id": "ASB-A-336323279",
    "downstream_version": "14",
    "file_name": "services/core/java/com/android/server/appop/AppOpsService.java",
    "runtime_seconds": null,
    "cleaned_ground_truth": "@@ -1430,16 +1430,26 @@ public class AppOpsService extends IAppOpsService.Stub {\n \n     private ArrayList<AppOpsManager.OpEntry> collectOps(Ops pkgOps, int[] ops) {\n         ArrayList<AppOpsManager.OpEntry> resOps = null;\n+        boolean shouldReturnRestrictedAppOps = mContext.checkPermission(\n+                Manifest.permission.GET_APP_OPS_STATS,\n+                Binder.getCallingPid(), Binder.getCallingUid())\n+                == PackageManager.PERMISSION_GRANTED;\n         if (ops == null) {\n             resOps = new ArrayList<>();\n-            for (int j=0; j<pkgOps.size(); j++) {\n+            for (int j = 0; j < pkgOps.size(); j++) {\n                 Op curOp = pkgOps.valueAt(j);\n+                if (opRestrictsRead(curOp.op) && !shouldReturnRestrictedAppOps) {\n+                    continue;\n+                }\n                 resOps.add(getOpEntryForResult(curOp));\n             }\n         } else {\n-            for (int j=0; j<ops.length; j++) {\n+            for (int j = 0; j < ops.length; j++) {\n                 Op curOp = pkgOps.get(ops[j]);\n                 if (curOp != null) {\n+                    if (opRestrictsRead(curOp.op) && !shouldReturnRestrictedAppOps) {\n+                        continue;\n+                    }\n                     if (resOps == null) {\n                         resOps = new ArrayList<>();\n                     }\n@@ -3615,10 +3625,21 @@ public class AppOpsService extends IAppOpsService.Stub {\n \n     private void verifyIncomingOp(int op) {\n         if (op >= 0 && op < AppOpsManager._NUM_OP) {\n-            // Enforce manage appops permission if it's a restricted read op.\n+            // Enforce privileged appops permission if it's a restricted read op.\n             if (opRestrictsRead(op)) {\n-                mContext.enforcePermission(Manifest.permission.MANAGE_APPOPS,\n-                        Binder.getCallingPid(), Binder.getCallingUid(), \"verifyIncomingOp\");\n+                if (!(mContext.checkPermission(Manifest.permission.MANAGE_APPOPS,\n+                        Binder.getCallingPid(), Binder.getCallingUid())\n+                        == PackageManager.PERMISSION_GRANTED || mContext.checkPermission(\n+                        Manifest.permission.GET_APP_OPS_STATS,\n+                        Binder.getCallingPid(), Binder.getCallingUid())\n+                        == PackageManager.PERMISSION_GRANTED || mContext.checkPermission(\n+                        Manifest.permission.MANAGE_APP_OPS_MODES,\n+                        Binder.getCallingPid(), Binder.getCallingUid())\n+                        == PackageManager.PERMISSION_GRANTED)) {\n+                    throw new SecurityException(\"verifyIncomingOp: uid \" + Binder.getCallingUid()\n+                            + \" does not have any of {MANAGE_APPOPS, GET_APP_OPS_STATS, \"\n+                            + \"MANAGE_APP_OPS_MODES}\");\n+                }\n             }\n             return;\n         }",
    "cleaned_upstream_plus_llm": "@@ -1,4 +1,3 @@\n-```java\n /*\n  * Copyright (C) 2012 The Android Open Source Project\n  *\n@@ -6659,5 +6658,4 @@\n             return null;\n         }\n     }\n-}\n-```+}",
    "metrics": {
      "relative_line_count_similarity": 0.2115,
      "normalized_edit_similarity": 0.0357,
      "token_level_edit_distance": 39,
      "codebert_score": {
        "precision": 0.6869,
        "recall": 0.5236,
        "f1": 0.5943,
        "f3": 0.5364
      },
      "token_count_upstream": 241,
      "token_count_downstream": 26,
      "token_count_total": 267,
      "cosine_similarity_openai": 0.3617
    }
  },
  {
    "cve_id": "ASB-A-293602970",
    "downstream_version": "14",
    "file_name": "services/core/java/com/android/server/pm/UserManagerService.java",
    "runtime_seconds": 88.4,
    "cleaned_ground_truth": "@@ -284,8 +284,6 @@ public class UserManagerService extends IUserManager.Stub {\n \n     private static final int USER_VERSION = 11;\n \n-    private static final int MAX_USER_STRING_LENGTH = 500;\n-\n     private static final long EPOCH_PLUS_30_YEARS = 30L * 365 * 24 * 60 * 60 * 1000L; // ms\n \n     static final int WRITE_USER_MSG = 1;\n@@ -4261,16 +4259,18 @@ public class UserManagerService extends IUserManager.Stub {\n         if (userData.persistSeedData) {\n             if (userData.seedAccountName != null) {\n                 serializer.attribute(null, ATTR_SEED_ACCOUNT_NAME,\n-                        truncateString(userData.seedAccountName));\n+                        truncateString(userData.seedAccountName,\n+                                UserManager.MAX_ACCOUNT_STRING_LENGTH));\n             }\n             if (userData.seedAccountType != null) {\n                 serializer.attribute(null, ATTR_SEED_ACCOUNT_TYPE,\n-                        truncateString(userData.seedAccountType));\n+                        truncateString(userData.seedAccountType,\n+                                UserManager.MAX_ACCOUNT_STRING_LENGTH));\n             }\n         }\n         if (userInfo.name != null) {\n             serializer.startTag(null, TAG_NAME);\n-            serializer.text(truncateString(userInfo.name));\n+            serializer.text(truncateString(userInfo.name, UserManager.MAX_USER_NAME_LENGTH));\n             serializer.endTag(null, TAG_NAME);\n         }\n         synchronized (mRestrictionsLock) {\n@@ -4319,11 +4319,11 @@ public class UserManagerService extends IUserManager.Stub {\n         serializer.endDocument();\n     }\n \n-    private String truncateString(String original) {\n-        if (original == null || original.length() <= MAX_USER_STRING_LENGTH) {\n+    private String truncateString(String original, int limit) {\n+        if (original == null || original.length() <= limit) {\n             return original;\n         }\n-        return original.substring(0, MAX_USER_STRING_LENGTH);\n+        return original.substring(0, limit);\n     }\n \n     /*\n@@ -4771,8 +4771,7 @@ public class UserManagerService extends IUserManager.Stub {\n             @UserIdInt int parentId, boolean preCreate, @Nullable String[] disallowedPackages,\n             @NonNull TimingsTraceAndSlog t, @Nullable Object token)\n             throws UserManager.CheckedUserOperationException {\n-\n-        String truncatedName = truncateString(name);\n+        String truncatedName = truncateString(name, UserManager.MAX_USER_NAME_LENGTH);\n         final UserTypeDetails userTypeDetails = mUserTypes.get(userType);\n         if (userTypeDetails == null) {\n             throwCheckedUserOperationException(\n@@ -6373,9 +6372,14 @@ public class UserManagerService extends IUserManager.Stub {\n                     Slog.e(LOG_TAG, \"No such user for settings seed data u=\" + userId);\n                     return;\n                 }\n-                userData.seedAccountName = truncateString(accountName);\n-                userData.seedAccountType = truncateString(accountType);\n-                userData.seedAccountOptions = accountOptions;\n+                userData.seedAccountName = truncateString(accountName,\n+                        UserManager.MAX_ACCOUNT_STRING_LENGTH);\n+                userData.seedAccountType = truncateString(accountType,\n+                        UserManager.MAX_ACCOUNT_STRING_LENGTH);\n+                if (accountOptions != null && accountOptions.isBundleContentsWithinLengthLimit(\n+                        UserManager.MAX_ACCOUNT_OPTIONS_LENGTH)) {\n+                    userData.seedAccountOptions = accountOptions;\n+                }\n                 userData.persistSeedData = persist;\n             }\n             if (persist) {",
    "cleaned_upstream_plus_llm": "@@ -1,4 +1,3 @@\n-```java\n /*\n  * Copyright (C) 2011 The Android Open Source Project\n  *\n@@ -4773,7 +4772,7 @@\n             @NonNull TimingsTraceAndSlog t, @Nullable Object token)\n             throws UserManager.CheckedUserOperationException {\n \n-        String truncatedName = truncateString(name);\n+        String truncatedName = truncateString(name, UserManager.MAX_USER_NAME_LENGTH);\n         final UserTypeDetails userTypeDetails = mUserTypes.get(userType);\n         if (userTypeDetails == null) {\n             throwCheckedUserOperationException(\n@@ -7486,5 +7485,4 @@\n         return mUserJourneyLogger;\n     }\n \n-}\n-```+}",
    "metrics": {
      "relative_line_count_similarity": 0.2609,
      "normalized_edit_similarity": 0.1426,
      "token_level_edit_distance": 102,
      "codebert_score": {
        "precision": 0.8166,
        "recall": 0.7235,
        "f1": 0.7673,
        "f3": 0.7319
      },
      "token_count_upstream": 290,
      "token_count_downstream": 60,
      "token_count_total": 350,
      "cosine_similarity_openai": 0.6604
    }
  },
  {
    "cve_id": "ASB-A-304983146",
    "downstream_version": "14",
    "file_name": "services/core/java/com/android/server/appop/AppOpsService.java",
    "runtime_seconds": 76.5,
    "cleaned_ground_truth": "@@ -2640,6 +2640,10 @@ public class AppOpsService extends IAppOpsService.Stub {\n             return new SyncNotedAppOp(AppOpsManager.MODE_ERRORED, code, attributionTag,\n                     packageName);\n         }\n+        if (proxyAttributionTag != null\n+                && !isAttributionTagDefined(packageName, proxyPackageName, proxyAttributionTag)) {\n+            proxyAttributionTag = null;\n+        }\n \n         synchronized (this) {\n             final Ops ops = getOpsLocked(uid, packageName, attributionTag,\n@@ -3177,6 +3181,10 @@ public class AppOpsService extends IAppOpsService.Stub {\n             return new SyncNotedAppOp(AppOpsManager.MODE_ERRORED, code, attributionTag,\n                     packageName);\n         }\n+        if (proxyAttributionTag != null\n+                && !isAttributionTagDefined(packageName, proxyPackageName, proxyAttributionTag)) {\n+            proxyAttributionTag = null;\n+        }\n \n         boolean isRestricted = false;\n         int startType = START_TYPE_FAILED;\n@@ -3909,6 +3917,36 @@ public class AppOpsService extends IAppOpsService.Stub {\n         return false;\n     }\n \n+    /**\n+     * Checks to see if the attribution tag is defined in either package or proxyPackage.\n+     * This method is intended for ProxyAttributionTag validation and returns false\n+     * if it does not exist in either one of them.\n+     *\n+     * @param packageName Name of the package\n+     * @param proxyPackageName Name of the proxy package\n+     * @param attributionTag attribution tag to be checked\n+     *\n+     * @return boolean specifying if attribution tag is valid or not\n+     */\n+    private boolean isAttributionTagDefined(@Nullable String packageName,\n+                                            @Nullable String proxyPackageName,\n+                                            @Nullable String attributionTag) {\n+        if (packageName == null) {\n+            return false;\n+        } else if (attributionTag == null) {\n+            return true;\n+        }\n+        PackageManagerInternal pmInt = LocalServices.getService(PackageManagerInternal.class);\n+        if (proxyPackageName != null) {\n+            AndroidPackage proxyPkg = pmInt.getPackage(proxyPackageName);\n+            if (proxyPkg != null && isAttributionInPackage(proxyPkg, attributionTag)) {\n+                return true;\n+            }\n+        }\n+        AndroidPackage pkg = pmInt.getPackage(packageName);\n+        return isAttributionInPackage(pkg, attributionTag);\n+    }\n+\n     /**\n      * Get (and potentially create) ops.\n      *",
    "cleaned_upstream_plus_llm": "@@ -1,4 +1,3 @@\n-```java\n /*\n  * Copyright (C) 2012 The Android Open Source Project\n  *\n@@ -3648,6 +3647,36 @@\n         return true;\n     }\n \n+    /**\n+     * Checks to see if the attribution tag is defined in either package or proxyPackage.\n+     * This method is intended for ProxyAttributionTag validation and returns false\n+     * if it does not exist in either one of them.\n+     *\n+     * @param packageName Name of the package\n+     * @param proxyPackageName Name of the proxy package\n+     * @param attributionTag attribution tag to be checked\n+     *\n+     * @return boolean specifying if attribution tag is valid or not\n+     */\n+    private boolean isAttributionTagDefined(@Nullable String packageName,\n+                                          @Nullable String proxyPackageName,\n+                                          @Nullable String attributionTag) {\n+        if (packageName == null) {\n+            return false;\n+        } else if (attributionTag == null) {\n+            return true;\n+        }\n+        PackageManagerInternal pmInt = LocalServices.getService(PackageManagerInternal.class);\n+        if (proxyPackageName != null) {\n+            AndroidPackage proxyPkg = pmInt.getPackage(proxyPackageName);\n+            if (proxyPkg != null && isAttributionInPackage(proxyPkg, attributionTag)) {\n+                return true;\n+            }\n+        }\n+        AndroidPackage pkg = pmInt.getPackage(packageName);\n+        return isAttributionInPackage(pkg, attributionTag);\n+    }\n+\n     private boolean isSpecialPackage(int callingUid, @Nullable String packageName) {\n         final String resolvedPackage = AppOpsManager.resolvePackageName(callingUid, packageName);\n         return callingUid == Process.SYSTEM_UID\n@@ -6618,5 +6647,4 @@\n             return null;\n         }\n     }\n-}\n-```+}",
    "metrics": {
      "relative_line_count_similarity": 0.8393,
      "normalized_edit_similarity": 0.5026,
      "token_level_edit_distance": 74,
      "codebert_score": {
        "precision": 0.8552,
        "recall": 0.8277,
        "f1": 0.8412,
        "f3": 0.8304
      },
      "token_count_upstream": 274,
      "token_count_downstream": 218,
      "token_count_total": 492,
      "cosine_similarity_openai": 0.7413
    }
  }
]