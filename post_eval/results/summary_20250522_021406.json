[
  {
    "cve_id": "ASB-A-296915500",
    "downstream_version": "14",
    "file_name": "android/app/src/com/android/bluetooth/opp/BluetoothOppSendFileInfo.java",
    "runtime_seconds": 12.79,
    "rej_file_diff": "--- android/app/src/com/android/bluetooth/opp/BluetoothOppSendFileInfo.java\n+++ android/app/src/com/android/bluetooth/opp/BluetoothOppSendFileInfo.java\n@@ -32,6 +32,8 @@\n \n package com.android.bluetooth.opp;\n \n+import static android.os.UserHandle.myUserId;\n+\n import android.bluetooth.BluetoothProfile;\n import android.bluetooth.BluetoothProtoEnums;\n import android.content.ContentResolver;\n@@ -54,12 +57,13 @@ import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileNotFoundException;\n import java.io.IOException;\n+import java.util.Objects;\n \n /**\n  * This class stores information about a single sending file It will only be used for outbound\n  * share.\n  */\n-// Next tag value for ContentProfileErrorReportUtils.report(): 15\n+// Next tag value for ContentProfileErrorReportUtils.report(): 16\n public class BluetoothOppSendFileInfo {\n     private static final String TAG = \"BluetoothOppSendFileInfo\";",
    "llm_generated_patch": "--- original\n+++ patched\n@@ -33,6 +33,8 @@\n \n package com.android.bluetooth.opp;\n \n+import static android.os.UserHandle.myUserId;\n+\n import android.content.ContentResolver;\n import android.content.Context;\n import android.content.res.AssetFileDescriptor;\n@@ -43,6 +45,8 @@\n import android.text.TextUtils;\n import android.util.EventLog;\n import android.util.Log;\n+import android.bluetooth.BluetoothProfile;\n+import android.bluetooth.BluetoothProtoEnums;\n \n import com.android.bluetooth.BluetoothMethodProxy;\n import com.android.bluetooth.R;\n@@ -51,11 +55,13 @@\n import java.io.FileInputStream;\n import java.io.FileNotFoundException;\n import java.io.IOException;\n+import java.util.Objects;\n \n /**\n  * This class stores information about a single sending file It will only be\n  * used for outbound share.\n  */\n+// Next tag value for ContentProfileErrorReportUtils.report(): 16\n public class BluetoothOppSendFileInfo {\n     private static final String TAG = \"BluetoothOppSendFileInfo\";",
    "metrics": {
      "relative_line_count_similarity": 0.6818,
      "normalized_edit_similarity": 0.5025,
      "token_level_edit_distance": 94,
      "codebert_score": {
        "precision": 0.8881,
        "recall": 0.8756,
        "f1": 0.8818,
        "f3": 0.8769
      },
      "token_count_upstream": 80,
      "token_count_downstream": 89,
      "token_count_total": 169,
      "cosine_similarity_openai": 0.9138
    }
  },
  {
    "cve_id": "ASB-A-364027949",
    "downstream_version": "14",
    "file_name": "system/stack/gatt/gatt_sr.cc",
    "runtime_seconds": 65.28,
    "rej_file_diff": "--- system/stack/gatt/gatt_sr.cc\n+++ system/stack/gatt/gatt_sr.cc\n@@ -772,6 +772,11 @@ void gatts_process_primary_service_req(tGATT_TCB& tcb, uint16_t cid, uint8_t op_\n \n   uint16_t payload_size = gatt_tcb_get_payload_size(tcb, cid);\n \n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t msg_len = (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);\n   BT_HDR* p_msg = (BT_HDR*)osi_calloc(msg_len);\n   reason = gatt_build_primary_service_rsp(p_msg, tcb, cid, op_code, s_hdl, e_hdl, p_data, value);\n@@ -804,6 +809,12 @@ static void gatts_process_find_info(tGATT_TCB& tcb, uint16_t cid, uint8_t op_cod\n   }\n \n   uint16_t payload_size = gatt_tcb_get_payload_size(tcb, cid);\n+\n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t buf_len = (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);\n \n   BT_HDR* p_msg = (BT_HDR*)osi_calloc(buf_len);",
    "llm_generated_patch": "--- original\n+++ patched\n@@ -735,6 +735,11 @@\n \n   uint16_t payload_size = gatt_tcb_get_payload_size_tx(tcb, cid);\n \n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t msg_len =\n       (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);\n   BT_HDR* p_msg = (BT_HDR*)osi_calloc(msg_len);\n@@ -770,6 +775,12 @@\n   }\n \n   uint16_t payload_size = gatt_tcb_get_payload_size_tx(tcb, cid);\n+\n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t buf_len =\n       (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 0.6157,
      "token_level_edit_distance": 58,
      "codebert_score": {
        "precision": 0.9139,
        "recall": 0.8508,
        "f1": 0.8812,
        "f3": 0.8567
      },
      "token_count_upstream": 117,
      "token_count_downstream": 88,
      "token_count_total": 205,
      "cosine_similarity_openai": 0.7559
    }
  },
  {
    "cve_id": "ASB-A-364025411",
    "downstream_version": "14",
    "file_name": "system/stack/gatt/gatt_sr.cc",
    "runtime_seconds": 61.0,
    "rej_file_diff": "--- system/stack/gatt/gatt_sr.cc\n+++ system/stack/gatt/gatt_sr.cc\n@@ -772,6 +772,11 @@ void gatts_process_primary_service_req(tGATT_TCB& tcb, uint16_t cid, uint8_t op_\n \n   uint16_t payload_size = gatt_tcb_get_payload_size(tcb, cid);\n \n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t msg_len = (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);\n   BT_HDR* p_msg = (BT_HDR*)osi_calloc(msg_len);\n   reason = gatt_build_primary_service_rsp(p_msg, tcb, cid, op_code, s_hdl, e_hdl, p_data, value);\n@@ -804,6 +809,12 @@ static void gatts_process_find_info(tGATT_TCB& tcb, uint16_t cid, uint8_t op_cod\n   }\n \n   uint16_t payload_size = gatt_tcb_get_payload_size(tcb, cid);\n+\n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t buf_len = (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);\n \n   BT_HDR* p_msg = (BT_HDR*)osi_calloc(buf_len);",
    "llm_generated_patch": "--- original\n+++ patched\n@@ -735,6 +735,11 @@\n \n   uint16_t payload_size = gatt_tcb_get_payload_size_tx(tcb, cid);\n \n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t msg_len =\n       (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);\n   BT_HDR* p_msg = (BT_HDR*)osi_calloc(msg_len);\n@@ -770,6 +775,12 @@\n   }\n \n   uint16_t payload_size = gatt_tcb_get_payload_size_tx(tcb, cid);\n+\n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t buf_len =\n       (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 0.6157,
      "token_level_edit_distance": 58,
      "codebert_score": {
        "precision": 0.9139,
        "recall": 0.8508,
        "f1": 0.8812,
        "f3": 0.8567
      },
      "token_count_upstream": 117,
      "token_count_downstream": 88,
      "token_count_total": 205,
      "cosine_similarity_openai": 0.7564
    }
  },
  {
    "cve_id": "ASB-A-340480881",
    "downstream_version": "14",
    "file_name": "PermissionController/src/com/android/permissioncontroller/permission/ui/handheld/ReviewPermissionsFragment.java",
    "runtime_seconds": 16.76,
    "rej_file_diff": "--- PermissionController/src/com/android/permissioncontroller/permission/ui/handheld/ReviewPermissionsFragment.java\n+++ PermissionController/src/com/android/permissioncontroller/permission/ui/handheld/ReviewPermissionsFragment.java\n@@ -267,11 +267,11 @@ public final class ReviewPermissionsFragment extends PreferenceFragmentCompat\n             PermissionControllerStatsLog.write(REVIEW_PERMISSIONS_FRAGMENT_RESULT_REPORTED,\n                     changeId, mViewModel.getPackageInfo().applicationInfo.uid,\n                     group.getPackageName(),\n-                    permission.getName(), permission.isGrantedIncludingAppOp());\n+                    permission.getName(), permission.isGranted());\n             Log.i(LOG_TAG, \"Permission grant via permission review changeId=\" + changeId + \" uid=\"\n                     + mViewModel.getPackageInfo().applicationInfo.uid + \" packageName=\"\n                     + group.getPackageName() + \" permission=\"\n-                    + permission.getName() + \" granted=\" + permission.isGrantedIncludingAppOp());\n+                    + permission.getName() + \" granted=\" + permission.isGranted());\n         }\n     }",
    "llm_generated_patch": "--- original\n+++ patched\n@@ -258,11 +258,11 @@\n             PermissionControllerStatsLog.write(REVIEW_PERMISSIONS_FRAGMENT_RESULT_REPORTED,\n                     changeId, mViewModel.getPackageInfo().applicationInfo.uid,\n                     group.getPackageName(),\n-                    permission.getName(), permission.isGrantedIncludingAppOp());\n+                    permission.getName(), permission.isGranted());\n             Log.v(LOG_TAG, \"Permission grant via permission review changeId=\" + changeId + \" uid=\"\n                     + mViewModel.getPackageInfo().applicationInfo.uid + \" packageName=\"\n                     + group.getPackageName() + \" permission=\"\n-                    + permission.getName() + \" granted=\" + permission.isGrantedIncludingAppOp());\n+                    + permission.getName() + \" granted=\" + permission.isGranted());\n         }\n     }",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 0.7283,
      "token_level_edit_distance": 11,
      "codebert_score": {
        "precision": 0.9116,
        "recall": 0.8319,
        "f1": 0.87,
        "f3": 0.8393
      },
      "token_count_upstream": 64,
      "token_count_downstream": 58,
      "token_count_total": 122,
      "cosine_similarity_openai": 0.9098
    }
  },
  {
    "cve_id": "ASB-A-369103643",
    "downstream_version": "14",
    "file_name": "services/core/java/com/android/server/wm/WindowOrganizerController.java",
    "runtime_seconds": 79.06,
    "rej_file_diff": "--- services/core/java/com/android/server/wm/WindowOrganizerController.java\n+++ services/core/java/com/android/server/wm/WindowOrganizerController.java\n@@ -1517,8 +1517,10 @@ class WindowOrganizerController extends IWindowOrganizerController.Stub\n                 final IBinder callerActivityToken = operation.getActivityToken();\n                 final Intent activityIntent = operation.getActivityIntent();\n                 final Bundle activityOptions = operation.getBundle();\n+                final SafeActivityOptions safeOptions =\n+                        SafeActivityOptions.fromBundle(activityOptions, caller.mPid, caller.mUid);\n                 final int result = waitAsyncStart(() -> mService.getActivityStartController()\n-                        .startActivityInTaskFragment(taskFragment, activityIntent, activityOptions,\n+                        .startActivityInTaskFragment(taskFragment, activityIntent, safeOptions,\n                                 callerActivityToken, caller.mUid, caller.mPid,\n                                 errorCallbackToken));\n                 if (!isStartResultSuccessful(result)) {",
    "llm_generated_patch": "--- original\n+++ patched\n@@ -1161,7 +1161,7 @@\n                 if (taskFragmentCreationParams == null) {\n                     final Throwable exception = new IllegalArgumentException(\n                             \"TaskFragmentCreationParams must be non-null\");\n-                    sendTaskFragmentOperationFailure(organizer, errorCallbackToken, taskFragment,\n+                    sendTaskFragmentOperationFailure(organizer, errorCallbackToken, null /* taskFragment */,\n                             opType, exception);\n                     break;\n                 }\n@@ -1190,10 +1190,12 @@\n                 final IBinder callerActivityToken = operation.getActivityToken();\n                 final Intent activityIntent = operation.getActivityIntent();\n                 final Bundle activityOptions = operation.getBundle();\n-                final int result = mService.getActivityStartController()\n-                        .startActivityInTaskFragment(taskFragment, activityIntent, activityOptions,\n+                final SafeActivityOptions safeOptions =\n+                        SafeActivityOptions.fromBundle(activityOptions, caller.mPid, caller.mUid);\n+                final int result = waitAsyncStart(() -> mService.getActivityStartController()\n+                        .startActivityInTaskFragment(taskFragment, activityIntent, safeOptions,\n                                 callerActivityToken, caller.mUid, caller.mPid,\n-                                errorCallbackToken);\n+                                errorCallbackToken));\n                 if (!isStartResultSuccessful(result)) {\n                     sendTaskFragmentOperationFailure(organizer, errorCallbackToken, taskFragment,\n                             opType, convertStartFailureToThrowable(result, activityIntent));\n@@ -1345,7 +1347,7 @@\n         if (operation == null) {\n             final Throwable exception = new IllegalArgumentException(\n                     \"TaskFragmentOperation must be non-null\");\n-            sendTaskFragmentOperationFailure(organizer, errorCallbackToken, taskFragment,\n+            sendTaskFragmentOperationFailure(organizer, errorCallbackToken, null /* taskFragment */,\n                     OP_TYPE_UNKNOWN, exception);\n             return false;\n         }",
    "metrics": {
      "relative_line_count_similarity": 0.0,
      "normalized_edit_similarity": 0.346,
      "token_level_edit_distance": 168,
      "codebert_score": {
        "precision": 0.7929,
        "recall": 0.8294,
        "f1": 0.8107,
        "f3": 0.8256
      },
      "token_count_upstream": 58,
      "token_count_downstream": 139,
      "token_count_total": 197,
      "cosine_similarity_openai": 0.803
    }
  },
  {
    "cve_id": "ASB-A-364026473",
    "downstream_version": "14",
    "file_name": "system/stack/gatt/gatt_sr.cc",
    "runtime_seconds": 61.59,
    "rej_file_diff": "--- system/stack/gatt/gatt_sr.cc\n+++ system/stack/gatt/gatt_sr.cc\n@@ -772,6 +772,11 @@ void gatts_process_primary_service_req(tGATT_TCB& tcb, uint16_t cid, uint8_t op_\n \n   uint16_t payload_size = gatt_tcb_get_payload_size(tcb, cid);\n \n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t msg_len = (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);\n   BT_HDR* p_msg = (BT_HDR*)osi_calloc(msg_len);\n   reason = gatt_build_primary_service_rsp(p_msg, tcb, cid, op_code, s_hdl, e_hdl, p_data, value);\n@@ -804,6 +809,12 @@ static void gatts_process_find_info(tGATT_TCB& tcb, uint16_t cid, uint8_t op_cod\n   }\n \n   uint16_t payload_size = gatt_tcb_get_payload_size(tcb, cid);\n+\n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t buf_len = (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);\n \n   BT_HDR* p_msg = (BT_HDR*)osi_calloc(buf_len);",
    "llm_generated_patch": "--- original\n+++ patched\n@@ -735,6 +735,11 @@\n \n   uint16_t payload_size = gatt_tcb_get_payload_size_tx(tcb, cid);\n \n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t msg_len =\n       (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);\n   BT_HDR* p_msg = (BT_HDR*)osi_calloc(msg_len);\n@@ -770,6 +775,12 @@\n   }\n \n   uint16_t payload_size = gatt_tcb_get_payload_size_tx(tcb, cid);\n+\n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t buf_len =\n       (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 0.6157,
      "token_level_edit_distance": 58,
      "codebert_score": {
        "precision": 0.9139,
        "recall": 0.8508,
        "f1": 0.8812,
        "f3": 0.8567
      },
      "token_count_upstream": 117,
      "token_count_downstream": 88,
      "token_count_total": 205,
      "cosine_similarity_openai": 0.7565
    }
  },
  {
    "cve_id": "ASB-A-364027038",
    "downstream_version": "14",
    "file_name": "system/stack/gatt/gatt_sr.cc",
    "runtime_seconds": 58.06,
    "rej_file_diff": "--- system/stack/gatt/gatt_sr.cc\n+++ system/stack/gatt/gatt_sr.cc\n@@ -772,6 +772,11 @@ void gatts_process_primary_service_req(tGATT_TCB& tcb, uint16_t cid, uint8_t op_\n \n   uint16_t payload_size = gatt_tcb_get_payload_size(tcb, cid);\n \n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t msg_len = (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);\n   BT_HDR* p_msg = (BT_HDR*)osi_calloc(msg_len);\n   reason = gatt_build_primary_service_rsp(p_msg, tcb, cid, op_code, s_hdl, e_hdl, p_data, value);\n@@ -804,6 +809,12 @@ static void gatts_process_find_info(tGATT_TCB& tcb, uint16_t cid, uint8_t op_cod\n   }\n \n   uint16_t payload_size = gatt_tcb_get_payload_size(tcb, cid);\n+\n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t buf_len = (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);\n \n   BT_HDR* p_msg = (BT_HDR*)osi_calloc(buf_len);",
    "llm_generated_patch": "--- original\n+++ patched\n@@ -735,6 +735,11 @@\n \n   uint16_t payload_size = gatt_tcb_get_payload_size_tx(tcb, cid);\n \n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t msg_len =\n       (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);\n   BT_HDR* p_msg = (BT_HDR*)osi_calloc(msg_len);\n@@ -770,6 +775,12 @@\n   }\n \n   uint16_t payload_size = gatt_tcb_get_payload_size_tx(tcb, cid);\n+\n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t buf_len =\n       (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 0.6157,
      "token_level_edit_distance": 58,
      "codebert_score": {
        "precision": 0.9139,
        "recall": 0.8508,
        "f1": 0.8812,
        "f3": 0.8567
      },
      "token_count_upstream": 117,
      "token_count_downstream": 88,
      "token_count_total": 205,
      "cosine_similarity_openai": 0.7562
    }
  },
  {
    "cve_id": "ASB-A-352542820",
    "downstream_version": "14",
    "file_name": "src/com/android/settings/users/UserSettings.java",
    "runtime_seconds": 61.78,
    "rej_file_diff": "--- src/com/android/settings/users/UserSettings.java\n+++ src/com/android/settings/users/UserSettings.java\n@@ -465,7 +465,7 @@ public class UserSettings extends SettingsPreferenceFragment\n     public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {\n         int pos = 0;\n         if (!isCurrentUserAdmin() && (canSwitchUserNow() || Flags.newMultiuserSettingsUx())\n-                && !isCurrentUserGuest()) {\n+                && !isCurrentUserGuest() && !mUserManager.isProfile()) {\n             String nickname = mUserManager.getUserName();\n             MenuItem removeThisUser = menu.add(0, MENU_REMOVE_USER, pos++,\n                     getResources().getString(R.string.user_remove_user_menu, nickname));",
    "llm_generated_patch": "--- original\n+++ patched\n@@ -465,7 +465,8 @@\n     @Override\n     public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {\n         int pos = 0;\n-        if (!isCurrentUserAdmin() && canSwitchUserNow() && !isCurrentUserGuest()) {\n+        if (!isCurrentUserAdmin() && (canSwitchUserNow() || Flags.newMultiuserSettingsUx())\n+                && !isCurrentUserGuest() && !mUserManager.isProfile()) {\n             String nickname = mUserManager.getUserName();\n             MenuItem removeThisUser = menu.add(0, MENU_REMOVE_USER, pos++,\n                     getResources().getString(R.string.user_remove_user_menu, nickname));",
    "metrics": {
      "relative_line_count_similarity": 0.9091,
      "normalized_edit_similarity": 0.6058,
      "token_level_edit_distance": 31,
      "codebert_score": {
        "precision": 0.9417,
        "recall": 0.879,
        "f1": 0.9093,
        "f3": 0.8849
      },
      "token_count_upstream": 52,
      "token_count_downstream": 53,
      "token_count_total": 105,
      "cosine_similarity_openai": 0.8633
    }
  },
  {
    "cve_id": "ASB-A-289375038",
    "downstream_version": "14",
    "file_name": "android/app/src/com/android/bluetooth/btservice/AdapterService.java",
    "runtime_seconds": 186.87,
    "rej_file_diff": "--- android/app/src/com/android/bluetooth/btservice/AdapterService.java\n+++ android/app/src/com/android/bluetooth/btservice/AdapterService.java\n@@ -27,6 +27,7 @@ import static android.bluetooth.BluetoothAdapter.SCAN_MODE_CONNECTABLE;\n import static android.bluetooth.BluetoothAdapter.SCAN_MODE_CONNECTABLE_DISCOVERABLE;\n import static android.bluetooth.BluetoothAdapter.SCAN_MODE_NONE;\n import static android.bluetooth.BluetoothDevice.BATTERY_LEVEL_UNKNOWN;\n+import static android.bluetooth.BluetoothDevice.BOND_NONE;\n import static android.bluetooth.BluetoothDevice.TRANSPORT_AUTO;\n import static android.bluetooth.IBluetoothLeAudio.LE_AUDIO_GROUP_ID_INVALID;\n import static android.text.format.DateUtils.MINUTE_IN_MILLIS;\n@@ -6121,6 +6122,13 @@ public class AdapterService extends Service {\n             mCsipSetCoordinatorService.handleBondStateChanged(device, fromState, toState);\n         }\n         mDatabaseManager.handleBondStateChanged(device, fromState, toState);\n+\n+        if (toState == BOND_NONE) {\n+            // Remove the permissions for unbonded devices\n+            setMessageAccessPermission(device, BluetoothDevice.ACCESS_UNKNOWN);\n+            setPhonebookAccessPermission(device, BluetoothDevice.ACCESS_UNKNOWN);\n+            setSimAccessPermission(device, BluetoothDevice.ACCESS_UNKNOWN);\n+        }\n     }\n \n     static int convertScanModeToHal(int mode) {",
    "llm_generated_patch": "--- original\n+++ patched\n@@ -17,7 +17,13 @@\n \n package com.android.bluetooth.btservice;\n \n+import static android.bluetooth.BluetoothAdapter.SCAN_MODE_CONNECTABLE;\n+import static android.bluetooth.BluetoothAdapter.SCAN_MODE_CONNECTABLE_DISCOVERABLE;\n+import static android.bluetooth.BluetoothAdapter.SCAN_MODE_NONE;\n+import static android.bluetooth.BluetoothDevice.BATTERY_LEVEL_UNKNOWN;\n+import static android.bluetooth.BluetoothDevice.BOND_NONE;\n import static android.bluetooth.BluetoothDevice.TRANSPORT_AUTO;\n+import static android.bluetooth.IBluetoothLeAudio.LE_AUDIO_GROUP_ID_INVALID;\n import static android.text.format.DateUtils.MINUTE_IN_MILLIS;\n import static android.text.format.DateUtils.SECOND_IN_MILLIS;\n \n@@ -873,6 +879,75 @@\n         mA2dpService.switchCodecByBufferSize(activeDevices.get(0), isLowLatencyBufferSize);\n     }\n \n+    void handleBondStateChanged(BluetoothDevice device, int fromState, int toState) {\n+        mRemoteDevices.setBondState(device, toState);\n+        mBondStateMachine.processBondStateChanged(device, fromState, toState);\n+\n+        // inform all profile services\n+        if (mA2dpService != null) {\n+            mA2dpService.handleBondStateChanged(device, fromState, toState);\n+        }\n+        if (mA2dpSinkService != null) {\n+            mA2dpSinkService.handleBondStateChanged(device, fromState, toState);\n+        }\n+        if (mHeadsetService != null) {\n+            mHeadsetService.handleBondStateChanged(device, fromState, toState);\n+        }\n+        if (mHeadsetClientService != null) {\n+            mHeadsetClientService.handleBondStateChanged(device, fromState, toState);\n+        }\n+        if (mMapService != null) {\n+            mMapService.handleBondStateChanged(device, fromState, toState);\n+        }\n+        if (mMapClientService != null) {\n+            mMapClientService.handleBondStateChanged(device, fromState, toState);\n+        }\n+        if (mHidHostService != null) {\n+            mHidHostService.handleBondStateChanged(device, fromState, toState);\n+        }\n+        if (mPanService != null) {\n+            mPanService.handleBondStateChanged(device, fromState, toState);\n+        }\n+        if (mPbapService != null) {\n+            mPbapService.handleBondStateChanged(device, fromState, toState);\n+        }\n+        if (mPbapClientService != null) {\n+            mPbapClientService.handleBondStateChanged(device, fromState, toState);\n+        }\n+        if (mHearingAidService != null) {\n+            mHearingAidService.handleBondStateChanged(device, fromState, toState);\n+        }\n+        if (mHapClientService != null) {\n+            mHapClientService.handleBondStateChanged(device, fromState, toState);\n+        }\n+        if (mSapService != null) {\n+            mSapService.handleBondStateChanged(device, fromState, toState);\n+        }\n+        if (mVolumeControlService != null) {\n+            mVolumeControlService.handleBondStateChanged(device, fromState, toState);\n+        }\n+        if (mLeAudioService != null) {\n+            mLeAudioService.handleBondStateChanged(device, fromState, toState);\n+        }\n+        if (mBassClientService != null) {\n+            mBassClientService.handleBondStateChanged(device, fromState, toState);\n+        }\n+        if (mBatteryService != null) {\n+            mBatteryService.handleBondStateChanged(device, fromState, toState);\n+        }\n+        if (mCsipSetCoordinatorService != null) {\n+            mCsipSetCoordinatorService.handleBondStateChanged(device, fromState, toState);\n+        }\n+        mDatabaseManager.handleBondStateChanged(device, fromState, toState);\n+\n+        if (toState == BOND_NONE) {\n+            // Remove the permissions for unbonded devices\n+            setMessageAccessPermission(device, BluetoothDevice.ACCESS_UNKNOWN);\n+            setPhonebookAccessPermission(device, BluetoothDevice.ACCESS_UNKNOWN);\n+            setSimAccessPermission(device, BluetoothDevice.ACCESS_UNKNOWN);\n+        }\n+    }\n+\n     void cleanup() {\n         debugLog(\"cleanup()\");\n         if (mCleaningUp) {\n@@ -1281,9 +1356,7 @@\n             mLeAudioService.connect(device);\n         }\n         if (mBassClientService != null && isSupported(localDeviceUuids, remoteDeviceUuids,\n-                BluetoothProfile.LE_AUDIO_BROADCAST_ASSISTANT, device)\n-                && mBassClientService.getConnectionPolicy(device)\n-                        > BluetoothProfile.CONNECTION_POLICY_FORBIDDEN) {\n+                BluetoothProfile.LE_AUDIO_BROADCAST_ASSISTANT, device)) {\n             Log.i(TAG, \"connectEnabledProfiles: Connecting LE Broadcast Assistant Profile\");\n             mBassClientService.connect(device);\n         }",
    "metrics": {
      "relative_line_count_similarity": 0.0,
      "normalized_edit_similarity": 0.2019,
      "token_level_edit_distance": 665,
      "codebert_score": {
        "precision": 0.8268,
        "recall": 0.8883,
        "f1": 0.8564,
        "f3": 0.8817
      },
      "token_count_upstream": 81,
      "token_count_downstream": 359,
      "token_count_total": 440,
      "cosine_similarity_openai": 0.7868
    }
  },
  {
    "cve_id": "ASB-A-289811388",
    "downstream_version": "14",
    "file_name": "android/app/src/com/android/bluetooth/btservice/AdapterService.java",
    "runtime_seconds": 189.22,
    "rej_file_diff": "--- android/app/src/com/android/bluetooth/btservice/AdapterService.java\n+++ android/app/src/com/android/bluetooth/btservice/AdapterService.java\n@@ -27,6 +27,7 @@ import static android.bluetooth.BluetoothAdapter.SCAN_MODE_CONNECTABLE;\n import static android.bluetooth.BluetoothAdapter.SCAN_MODE_CONNECTABLE_DISCOVERABLE;\n import static android.bluetooth.BluetoothAdapter.SCAN_MODE_NONE;\n import static android.bluetooth.BluetoothDevice.BATTERY_LEVEL_UNKNOWN;\n+import static android.bluetooth.BluetoothDevice.BOND_NONE;\n import static android.bluetooth.BluetoothDevice.TRANSPORT_AUTO;\n import static android.bluetooth.IBluetoothLeAudio.LE_AUDIO_GROUP_ID_INVALID;\n import static android.text.format.DateUtils.MINUTE_IN_MILLIS;\n@@ -6121,6 +6122,13 @@ public class AdapterService extends Service {\n             mCsipSetCoordinatorService.handleBondStateChanged(device, fromState, toState);\n         }\n         mDatabaseManager.handleBondStateChanged(device, fromState, toState);\n+\n+        if (toState == BOND_NONE) {\n+            // Remove the permissions for unbonded devices\n+            setMessageAccessPermission(device, BluetoothDevice.ACCESS_UNKNOWN);\n+            setPhonebookAccessPermission(device, BluetoothDevice.ACCESS_UNKNOWN);\n+            setSimAccessPermission(device, BluetoothDevice.ACCESS_UNKNOWN);\n+        }\n     }\n \n     static int convertScanModeToHal(int mode) {",
    "llm_generated_patch": "--- original\n+++ patched\n@@ -17,7 +17,13 @@\n \n package com.android.bluetooth.btservice;\n \n+import static android.bluetooth.BluetoothAdapter.SCAN_MODE_CONNECTABLE;\n+import static android.bluetooth.BluetoothAdapter.SCAN_MODE_CONNECTABLE_DISCOVERABLE;\n+import static android.bluetooth.BluetoothAdapter.SCAN_MODE_NONE;\n+import static android.bluetooth.BluetoothDevice.BATTERY_LEVEL_UNKNOWN;\n+import static android.bluetooth.BluetoothDevice.BOND_NONE;\n import static android.bluetooth.BluetoothDevice.TRANSPORT_AUTO;\n+import static android.bluetooth.IBluetoothLeAudio.LE_AUDIO_GROUP_ID_INVALID;\n import static android.text.format.DateUtils.MINUTE_IN_MILLIS;\n import static android.text.format.DateUtils.SECOND_IN_MILLIS;\n \n@@ -873,6 +879,88 @@\n         mA2dpService.switchCodecByBufferSize(activeDevices.get(0), isLowLatencyBufferSize);\n     }\n \n+    /**\n+     * This method is called from JNI which inturn calls individual profile.\n+     *\n+     * @param device Remote Device\n+     * @param fromState Old state\n+     * @param toState New state\n+     */\n+    @VisibleForTesting\n+    public void handleBondStateChanged(\n+            BluetoothDevice device, int fromState, int toState) {\n+        debugLog(\"handleBondStateChanged: device=\"\n+                + device + \" fromState=\" + fromState + \" toState=\" + toState);\n+        if (mBondStateMachine != null) {\n+            mBondStateMachine.onBondStateChange(device, fromState, toState);\n+        }\n+        if (mA2dpService != null) {\n+            mA2dpService.handleBondStateChanged(device, fromState, toState);\n+        }\n+        if (mA2dpSinkService != null) {\n+            mA2dpSinkService.handleBondStateChanged(device, fromState, toState);\n+        }\n+        if (mHeadsetService != null) {\n+            mHeadsetService.handleBondStateChanged(device, fromState, toState);\n+        }\n+        if (mHeadsetClientService != null) {\n+            mHeadsetClientService.handleBondStateChanged(device, fromState, toState);\n+        }\n+        if (mMapService != null) {\n+            mMapService.handleBondStateChanged(device, fromState, toState);\n+        }\n+        if (mMapClientService != null) {\n+            mMapClientService.handleBondStateChanged(device, fromState, toState);\n+        }\n+        if (mHidDeviceService != null) {\n+            mHidDeviceService.handleBondStateChanged(device, fromState, toState);\n+        }\n+        if (mHidHostService != null) {\n+            mHidHostService.handleBondStateChanged(device, fromState, toState);\n+        }\n+        if (mPanService != null) {\n+            mPanService.handleBondStateChanged(device, fromState, toState);\n+        }\n+        if (mPbapService != null) {\n+            mPbapService.handleBondStateChanged(device, fromState, toState);\n+        }\n+        if (mPbapClientService != null) {\n+            mPbapClientService.handleBondStateChanged(device, fromState, toState);\n+        }\n+        if (mHearingAidService != null) {\n+            mHearingAidService.handleBondStateChanged(device, fromState, toState);\n+        }\n+        if (mHapClientService != null) {\n+            mHapClientService.handleBondStateChanged(device, fromState, toState);\n+        }\n+        if (mSapService != null) {\n+            mSapService.handleBondStateChanged(device, fromState, toState);\n+        }\n+        if (mVolumeControlService != null) {\n+            mVolumeControlService.handleBondStateChanged(device, fromState, toState);\n+        }\n+        if (mLeAudioService != null) {\n+            mLeAudioService.handleBondStateChanged(device, fromState, toState);\n+        }\n+        if (mBassClientService != null) {\n+            mBassClientService.handleBondStateChanged(device, fromState, toState);\n+        }\n+        if (mBatteryService != null) {\n+            mBatteryService.handleBondStateChanged(device, fromState, toState);\n+        }\n+        if (mCsipSetCoordinatorService != null) {\n+            mCsipSetCoordinatorService.handleBondStateChanged(device, fromState, toState);\n+        }\n+        mDatabaseManager.handleBondStateChanged(device, fromState, toState);\n+\n+        if (toState == BOND_NONE) {\n+            // Remove the permissions for unbonded devices\n+            setMessageAccessPermission(device, BluetoothDevice.ACCESS_UNKNOWN);\n+            setPhonebookAccessPermission(device, BluetoothDevice.ACCESS_UNKNOWN);\n+            setSimAccessPermission(device, BluetoothDevice.ACCESS_UNKNOWN);\n+        }\n+    }\n+\n     void cleanup() {\n         debugLog(\"cleanup()\");\n         if (mCleaningUp) {",
    "metrics": {
      "relative_line_count_similarity": 0.0,
      "normalized_edit_similarity": 0.2038,
      "token_level_edit_distance": 663,
      "codebert_score": {
        "precision": 0.8296,
        "recall": 0.8856,
        "f1": 0.8567,
        "f3": 0.8797
      },
      "token_count_upstream": 81,
      "token_count_downstream": 391,
      "token_count_total": 472,
      "cosine_similarity_openai": 0.783
    }
  },
  {
    "cve_id": "ASB-A-375623125",
    "downstream_version": "14",
    "file_name": "services/core/java/com/android/server/appop/AppOpsService.java",
    "runtime_seconds": 190.79,
    "rej_file_diff": "--- services/core/java/com/android/server/appop/AppOpsService.java\n+++ services/core/java/com/android/server/appop/AppOpsService.java\n@@ -3896,7 +3896,7 @@ public class AppOpsService extends IAppOpsService.Stub {\n             // Test if the proxied operation will succeed before starting the proxy operation\n             final SyncNotedAppOp testProxiedOp = startOperationDryRun(code,\n                     proxiedUid, resolvedProxiedPackageName, proxiedAttributionTag,\n-                    proxiedVirtualDeviceId, resolvedProxyPackageName, proxiedFlags,\n+                    proxiedVirtualDeviceId, proxyUid, resolvedProxyPackageName, proxiedFlags,\n                     startIfModeDefault);\n \n             if (!shouldStartForMode(testProxiedOp.getOpMode(), startIfModeDefault)) {\n@@ -3936,7 +3936,7 @@ public class AppOpsService extends IAppOpsService.Stub {\n             int attributionChainId) {\n         PackageVerificationResult pvr;\n         try {\n-            pvr = verifyAndGetBypass(uid, packageName, attributionTag, proxyPackageName);\n+            pvr = verifyAndGetBypass(uid, packageName, attributionTag, proxyUid, proxyPackageName);\n             if (!pvr.isAttributionTagValid) {\n                 attributionTag = null;\n             }\n@@ -4063,11 +4063,11 @@ public class AppOpsService extends IAppOpsService.Stub {\n      */\n     private SyncNotedAppOp startOperationDryRun(int code, int uid,\n             @NonNull String packageName, @Nullable String attributionTag, int virtualDeviceId,\n-            String proxyPackageName, @OpFlags int flags,\n+            int proxyUid, String proxyPackageName, @OpFlags int flags,\n             boolean startIfModeDefault) {\n         PackageVerificationResult pvr;\n         try {\n-            pvr = verifyAndGetBypass(uid, packageName, attributionTag, proxyPackageName);\n+            pvr = verifyAndGetBypass(uid, packageName, attributionTag, proxyUid, proxyPackageName);\n             if (!pvr.isAttributionTagValid) {\n                 attributionTag = null;\n             }",
    "llm_generated_patch": "",
    "metrics": {
      "relative_line_count_similarity": 0.0,
      "normalized_edit_similarity": 0.0,
      "token_level_edit_distance": 290,
      "codebert_score": {
        "error": "Candidate code and ground truth code must not be empty."
      },
      "token_count_upstream": 156,
      "token_count_downstream": 0,
      "token_count_total": 156,
      "cosine_similarity_openai": 0.0995
    }
  },
  {
    "cve_id": "ASB-A-353240784",
    "downstream_version": "14",
    "file_name": "services/appwidget/java/com/android/server/appwidget/AppWidgetServiceImpl.java",
    "runtime_seconds": 169.71,
    "rej_file_diff": "--- services/appwidget/java/com/android/server/appwidget/AppWidgetServiceImpl.java\n+++ services/appwidget/java/com/android/server/appwidget/AppWidgetServiceImpl.java\n@@ -217,6 +217,15 @@ class AppWidgetServiceImpl extends IAppWidgetService.Stub implements WidgetBacku\n     // See {@link Provider#pendingDeletedWidgetIds}.\n     private static final String PENDING_DELETED_IDS_ATTR = \"pending_deleted_ids\";\n \n+    // Hard limit of number of hosts an app can create, note that the app that hosts the widgets\n+    // can have multiple instances of {@link AppWidgetHost}, typically in respect to different\n+    // surfaces in the host app.\n+    // @see AppWidgetHost\n+    // @see AppWidgetHost#mHostId\n+    private static final int MAX_NUMBER_OF_HOSTS_PER_PACKAGE = 20;\n+    // Hard limit of number of widgets can be pinned by a host.\n+    private static final int MAX_NUMBER_OF_WIDGETS_PER_HOST = 200;\n+\n     // Handles user and package related broadcasts.\n     // See {@link #registerBroadcastReceiver}\n     private final BroadcastReceiver mBroadcastReceiver = new BroadcastReceiver() {\n@@ -3591,11 +3618,32 @@ class AppWidgetServiceImpl extends IAppWidgetService.Stub implements WidgetBacku\n         if (DEBUG) {\n             Slog.i(TAG, \"addWidgetLocked() \" + widget);\n         }\n+        ensureWidgetCountBeforeAddLocked(widget);\n         mWidgets.add(widget);\n \n         onWidgetProviderAddedOrChangedLocked(widget);\n     }\n \n+    /**\n+     * Ensures that the widget count for the widget's host is not greater than the maximum\n+     * number of widgets per host. If the count is greater than the maximum, removes oldest widgets\n+     * from the host until the count is less than or equal to the maximum.\n+     */\n+    private void ensureWidgetCountBeforeAddLocked(@NonNull final Widget widget) {\n+        if (widget.host == null || widget.host.id == null) {\n+            return;\n+        }\n+        final List<Widget> widgetsInSameHost = new ArrayList<>();\n+        for (Widget w : mWidgets) {\n+            if (w.host != null && widget.host.id.equals(w.host.id)) {\n+                widgetsInSameHost.add(w);\n+            }\n+        }\n+        while (widgetsInSameHost.size() >= MAX_NUMBER_OF_WIDGETS_PER_HOST) {\n+            removeWidgetLocked(widgetsInSameHost.remove(0));\n+        }\n+    }\n+\n     /**\n      * Checks if the provider is assigned and updates the mWidgetPackages to track packages\n      * that have bound widgets.",
    "llm_generated_patch": "--- original\n+++ patched\n@@ -171,6 +171,21 @@\n     // used to verify which request has successfully been received by the host.\n     private static final AtomicLong UPDATE_COUNTER = new AtomicLong();\n \n+    // See {@link Provider#pendingDeletedWidgetIds}.\n+    private static final String PENDING_DELETED_IDS_ATTR = \"pending_deleted_ids\";\n+\n+    // Hard limit of number of hosts an app can create, note that the app that hosts the widgets\n+    // can have multiple instances of {@link AppWidgetHost}, typically in respect to different\n+    // surfaces in the host app.\n+    // @see AppWidgetHost\n+    // @see AppWidgetHost#mHostId\n+    private static final int MAX_NUMBER_OF_HOSTS_PER_PACKAGE = 20;\n+    // Hard limit of number of widgets can be pinned by a host.\n+    // @see AppWidgetHost\n+    private static final int MAX_NUMBER_OF_WIDGETS_PER_HOST = 200;\n+\n+    // Handles user and package related broadcasts.\n+    // See {@link #registerBroadcastReceiver}\n     private final BroadcastReceiver mBroadcastReceiver = new BroadcastReceiver() {\n         @Override\n         public void onReceive(Context context, Intent intent) {\n@@ -2852,9 +2867,33 @@\n      * Adds the widget to mWidgets and tracks the package name in mWidgetPackages.\n      */\n     void addWidgetLocked(Widget widget) {\n+        if (DEBUG) {\n+            Slog.i(TAG, \"addWidgetLocked() \" + widget);\n+        }\n+        ensureWidgetCountBeforeAddLocked(widget);\n         mWidgets.add(widget);\n \n         onWidgetProviderAddedOrChangedLocked(widget);\n+    }\n+\n+    /**\n+     * Ensures that the widget count for the widget's host is not greater than the maximum\n+     * number of widgets per host. If the count is greater than the maximum, removes oldest widgets\n+     * from the host until the count is less than or equal to the maximum.\n+     */\n+    private void ensureWidgetCountBeforeAddLocked(@NonNull final Widget widget) {\n+        if (widget.host == null || widget.host.id == null) {\n+            return;\n+        }\n+        final List<Widget> widgetsInSameHost = new ArrayList<>();\n+        for (Widget w : mWidgets) {\n+            if (w.host != null && widget.host.id.equals(w.host.id)) {\n+                widgetsInSameHost.add(w);\n+            }\n+        }\n+        while (widgetsInSameHost.size() >= MAX_NUMBER_OF_WIDGETS_PER_HOST) {\n+            removeWidgetLocked(widgetsInSameHost.remove(0));\n+        }\n     }\n \n     /**",
    "metrics": {
      "relative_line_count_similarity": 0.8542,
      "normalized_edit_similarity": 0.7208,
      "token_level_edit_distance": 131,
      "codebert_score": {
        "precision": 0.9137,
        "recall": 0.8919,
        "f1": 0.9027,
        "f3": 0.8941
      },
      "token_count_upstream": 286,
      "token_count_downstream": 314,
      "token_count_total": 600,
      "cosine_similarity_openai": 0.9112
    }
  }
]