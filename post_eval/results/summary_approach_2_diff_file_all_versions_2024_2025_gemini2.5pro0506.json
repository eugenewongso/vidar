[
  {
    "cve_id": "ASB-A-299441833",
    "downstream_version": "12",
    "file_name": "services/core/java/com/android/server/pm/InstallPackageHelper.java",
    "runtime_seconds": null,
    "rej_file_diff": "",
    "llm_generated_patch": "",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 1.0,
      "token_level_edit_distance": 0,
      "codebert_score": {
        "error": "Candidate code and ground truth code must not be empty."
      },
      "token_count_upstream": 0,
      "token_count_downstream": 0,
      "token_count_total": 0,
      "cosine_similarity_openai": 1.0
    }
  },
  {
    "cve_id": "ASB-A-299441833",
    "downstream_version": "12L",
    "file_name": "services/core/java/com/android/server/pm/InstallPackageHelper.java",
    "runtime_seconds": null,
    "rej_file_diff": "",
    "llm_generated_patch": "",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 1.0,
      "token_level_edit_distance": 0,
      "codebert_score": {
        "error": "Candidate code and ground truth code must not be empty."
      },
      "token_count_upstream": 0,
      "token_count_downstream": 0,
      "token_count_total": 0,
      "cosine_similarity_openai": 1.0
    }
  },
  {
    "cve_id": "ASB-A-242996380",
    "downstream_version": "14",
    "file_name": "service/src/com/android/server/bluetooth/BtPermissionUtils.java",
    "runtime_seconds": null,
    "rej_file_diff": "",
    "llm_generated_patch": "",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 1.0,
      "token_level_edit_distance": 0,
      "codebert_score": {
        "error": "Candidate code and ground truth code must not be empty."
      },
      "token_count_upstream": 0,
      "token_count_downstream": 0,
      "token_count_total": 0,
      "cosine_similarity_openai": 1.0
    }
  },
  {
    "cve_id": "ASB-A-242996380",
    "downstream_version": "13",
    "file_name": "service/src/com/android/server/bluetooth/BtPermissionUtils.java",
    "runtime_seconds": null,
    "rej_file_diff": "",
    "llm_generated_patch": "",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 1.0,
      "token_level_edit_distance": 0,
      "codebert_score": {
        "error": "Candidate code and ground truth code must not be empty."
      },
      "token_count_upstream": 0,
      "token_count_downstream": 0,
      "token_count_total": 0,
      "cosine_similarity_openai": 1.0
    }
  },
  {
    "cve_id": "ASB-A-316891059",
    "downstream_version": "14",
    "file_name": "src/com/android/settings/search/SearchResultTrampoline.java",
    "runtime_seconds": 105.44,
    "rej_file_diff": "--- src/com/android/settings/search/SearchResultTrampoline.java\n+++ src/com/android/settings/search/SearchResultTrampoline.java\n@@ -52,11 +51,11 @@ public class SearchResultTrampoline extends Activity {\n     protected void onCreate(Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n \n-        final ComponentName callingActivity = getCallingActivity();\n+        final String callerPackage = getLaunchedFromPackage();\n         // First make sure caller has privilege to launch a search result page.\n         FeatureFactory.getFeatureFactory()\n                 .getSearchFeatureProvider()\n-                .verifyLaunchSearchResultPageCaller(this, callingActivity);\n+                .verifyLaunchSearchResultPageCaller(this, callerPackage);\n         // Didn't crash, proceed and launch the result as a subsetting.\n         Intent intent = getIntent();\n         final String highlightMenuKey = intent.getStringExtra(\n@@ -138,9 +137,9 @@ public class SearchResultTrampoline extends Activity {\n         finish();\n     }\n \n-    private boolean isSettingsIntelligence(ComponentName callingActivity) {\n-        return callingActivity != null && TextUtils.equals(\n-                callingActivity.getPackageName(),\n+    private boolean isSettingsIntelligence(String callerPackage) {\n+        return TextUtils.equals(\n+                callerPackage,\n                 FeatureFactory.getFeatureFactory().getSearchFeatureProvider()\n                         .getSettingsIntelligencePkgName(this));\n     }",
    "llm_generated_patch": "--- a/src/com/android/settings/search/SearchResultTrampoline.java\n+++ b/src/com/android/settings/search/SearchResultTrampoline.java\n@@ -38,11 +38,11 @@\n     protected void onCreate(Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n \n-        final ComponentName callingActivity = getCallingActivity();\n+        final String callerPackage = getLaunchedFromPackage();\n         // First make sure caller has privilege to launch a search result page.\n         FeatureFactory.getFactory(this)\n                 .getSearchFeatureProvider()\n-                .verifyLaunchSearchResultPageCaller(this, callingActivity);\n+                .verifyLaunchSearchResultPageCaller(this, callerPackage);\n         // Didn't crash, proceed and launch the result as a subsetting.\n         Intent intent = getIntent();\n         final String highlightMenuKey = intent.getStringExtra(\n@@ -107,12 +107,12 @@\n         finish();\n     }\n \n-    private boolean isSettingsIntelligence(ComponentName callingActivity) {\n-        return callingActivity != null && TextUtils.equals(\n-                callingActivity.getPackageName(),\n+    private boolean isSettingsIntelligence(String callerPackage) {\n+        return TextUtils.equals(\n+                callerPackage,\n                 FeatureFactory.getFactory(this).getSearchFeatureProvider()\n                         .getSettingsIntelligencePkgName(this));\n     }\n }\n+",
    "metrics": {
      "relative_line_count_similarity": 0.9259,
      "normalized_edit_similarity": 0.8756,
      "token_level_edit_distance": 34,
      "codebert_score": {
        "precision": 0.9625,
        "recall": 0.9537,
        "f1": 0.958,
        "f3": 0.9545
      },
      "token_count_upstream": 114,
      "token_count_downstream": 104,
      "token_count_total": 218,
      "cosine_similarity_openai": 0.9884
    }
  },
  {
    "cve_id": "ASB-A-317048495",
    "downstream_version": "13",
    "file_name": "packages/SystemUI/src/com/android/systemui/clipboardoverlay/ClipboardListener.java",
    "runtime_seconds": 176.13,
    "rej_file_diff": "--- packages/SystemUI/src/com/android/systemui/clipboardoverlay/ClipboardListener.java\n+++ packages/SystemUI/src/com/android/systemui/clipboardoverlay/ClipboardListener.java\n@@ -18,12 +18,14 @@ package com.android.systemui.clipboardoverlay;\n \n import static android.content.ClipDescription.CLASSIFICATION_COMPLETE;\n \n+import static com.android.systemui.Flags.clipboardNoninteractiveOnLockscreen;\n import static com.android.systemui.clipboardoverlay.ClipboardOverlayEvent.CLIPBOARD_OVERLAY_ENTERED;\n import static com.android.systemui.clipboardoverlay.ClipboardOverlayEvent.CLIPBOARD_OVERLAY_UPDATED;\n import static com.android.systemui.clipboardoverlay.ClipboardOverlayEvent.CLIPBOARD_TOAST_SHOWN;\n \n import static com.google.android.setupcompat.util.WizardManagerHelper.SETTINGS_SECURE_USER_SETUP_COMPLETE;\n \n+import android.app.KeyguardManager;\n import android.content.ClipData;\n import android.content.ClipboardManager;\n import android.content.Context;\n@@ -66,11 +69,13 @@ public class ClipboardListener implements\n             Provider<ClipboardOverlayController> clipboardOverlayControllerProvider,\n             ClipboardToast clipboardToast,\n             ClipboardManager clipboardManager,\n+            KeyguardManager keyguardManager,\n             UiEventLogger uiEventLogger) {\n         mContext = context;\n         mOverlayProvider = clipboardOverlayControllerProvider;\n         mClipboardToast = clipboardToast;\n         mClipboardManager = clipboardManager;\n+        mKeyguardManager = keyguardManager;\n         mUiEventLogger = uiEventLogger;\n     }\n \n@@ -93,7 +98,9 @@ public class ClipboardListener implements\n             return;\n         }\n \n-        if (!isUserSetupComplete() // user should not access intents from this state\n+        // user should not access intents before setup or while device is locked\n+        if ((clipboardNoninteractiveOnLockscreen() && mKeyguardManager.isDeviceLocked())\n+                || !isUserSetupComplete()\n                 || clipData == null // shouldn't happen, but just in case\n                 || clipData.getItemCount() == 0) {\n             if (shouldShowToast(clipData)) {",
    "llm_generated_patch": "--- a/packages/SystemUI/src/com/android/systemui/clipboardoverlay/ClipboardListener.java\n+++ b/packages/SystemUI/src/com/android/systemui/clipboardoverlay/ClipboardListener.java\n@@ -17,15 +17,17 @@\n import static android.content.ClipDescription.CLASSIFICATION_COMPLETE;\n \n import static com.android.internal.config.sysui.SystemUiDeviceConfigFlags.CLIPBOARD_OVERLAY_ENABLED;\n+import static com.android.systemui.Flags.clipboardNoninteractiveOnLockscreen;\n import static com.android.systemui.clipboardoverlay.ClipboardOverlayEvent.CLIPBOARD_OVERLAY_ENTERED;\n import static com.android.systemui.clipboardoverlay.ClipboardOverlayEvent.CLIPBOARD_OVERLAY_UPDATED;\n import static com.android.systemui.clipboardoverlay.ClipboardOverlayEvent.CLIPBOARD_TOAST_SHOWN;\n \n import static com.google.android.setupcompat.util.WizardManagerHelper.SETTINGS_SECURE_USER_SETUP_COMPLETE;\n \n+import android.app.KeyguardManager;\n import android.content.ClipData;\n import android.content.ClipboardManager;\n import android.content.Context;\n@@ -43,23 +45,26 @@\n     private final ClipboardOverlayControllerFactory mOverlayFactory;\n     private final ClipboardToast mClipboardToast;\n     private final ClipboardManager mClipboardManager;\n+    private final KeyguardManager mKeyguardManager;\n     private final UiEventLogger mUiEventLogger;\n     private ClipboardOverlayController mClipboardOverlayController;\n \n     @Inject\n     public ClipboardListener(Context context, DeviceConfigProxy deviceConfigProxy,\n             ClipboardOverlayControllerFactory overlayFactory, ClipboardManager clipboardManager,\n-            ClipboardToast clipboardToast,UiEventLogger uiEventLogger) {\n+            ClipboardToast clipboardToast, KeyguardManager keyguardManager,\n+            UiEventLogger uiEventLogger) {\n         super(context);\n         mDeviceConfig = deviceConfigProxy;\n         mOverlayFactory = overlayFactory;\n         mClipboardToast = clipboardToast;\n         mClipboardManager = clipboardManager;\n+        mKeyguardManager = keyguardManager;\n         mUiEventLogger = uiEventLogger;\n     }\n \n     @Override\n     public void start() {\n         if (mDeviceConfig.getBoolean(\n-                DeviceConfig.NAMESPACE_SYSTEMUI, CLIPBOARD_OVERLAY_ENABLED, true)) {\n+                DeviceConfig.NAMESPACE_SYSTEMUI, CLIPBOARD_OVERLAY_ENABLED, true)) { //TODO: (b/267752398) False for now\n             mClipboardManager.addPrimaryClipChangedListener(this);\n         }\n     }\n@@ -79,11 +84,12 @@\n             return;\n         }\n \n-        if (!isUserSetupComplete()) {\n+        // user should not access intents before setup or while device is locked\n+        if ((clipboardNoninteractiveOnLockscreen() && mKeyguardManager.isDeviceLocked())\n+                || !isUserSetupComplete()\n+                || clipData == null // shouldn't happen, but just in case\n+                || clipData.getItemCount() == 0) {\n             // just show a toast, user should not access intents from this state\n             if (shouldShowToast(clipData)) {\n                 mUiEventLogger.log(CLIPBOARD_TOAST_SHOWN, 0, clipSource);",
    "metrics": {
      "relative_line_count_similarity": 0.4722,
      "normalized_edit_similarity": 0.591,
      "token_level_edit_distance": 207,
      "codebert_score": {
        "precision": 0.8676,
        "recall": 0.9201,
        "f1": 0.8931,
        "f3": 0.9145
      },
      "token_count_upstream": 139,
      "token_count_downstream": 204,
      "token_count_total": 343,
      "cosine_similarity_openai": 0.9687
    }
  },
  {
    "cve_id": "ASB-A-299931761",
    "downstream_version": "13",
    "file_name": "src/com/android/settings/wifi/WifiDialogActivity.java",
    "runtime_seconds": 82.47,
    "rej_file_diff": "--- src/com/android/settings/wifi/WifiDialogActivity.java\n+++ src/com/android/settings/wifi/WifiDialogActivity.java\n@@ -17,6 +17,7 @@\n package com.android.settings.wifi;\n \n import static android.Manifest.permission.ACCESS_FINE_LOCATION;\n+import static android.os.UserManager.DISALLOW_ADD_WIFI_CONFIG;\n import static android.os.UserManager.DISALLOW_CONFIG_WIFI;\n \n import android.app.KeyguardManager;\n@@ -122,7 +123,7 @@ public class WifiDialogActivity extends ObservableActivity implements WifiDialog\n         }\n \n         super.onCreate(savedInstanceState);\n-        if (!isConfigWifiAllowed()) {\n+        if (!isConfigWifiAllowed() || !isAddWifiConfigAllowed()) {\n             finish();\n             return;\n         }",
    "llm_generated_patch": "--- a/src/com/android/settings/wifi/WifiDialogActivity.java\n+++ b/src/com/android/settings/wifi/WifiDialogActivity.java\n@@ -16,6 +16,7 @@\n package com.android.settings.wifi;\n \n import static android.Manifest.permission.ACCESS_FINE_LOCATION;\n+import static android.os.UserManager.DISALLOW_ADD_WIFI_CONFIG;\n \n import android.content.DialogInterface;\n import android.content.Intent;\n@@ -104,6 +105,12 @@\n         }\n \n         super.onCreate(savedInstanceState);\n+\n+        if (!isAddWifiConfigAllowed()) {\n+            finish();\n+            return;\n+        }\n+\n         mIsWifiTrackerLib = !TextUtils.isEmpty(mIntent.getStringExtra(KEY_CHOSEN_WIFIENTRY_KEY));\n         if (mIsWifiTrackerLib) {\n             mWorkerThread = new HandlerThread(",
    "metrics": {
      "relative_line_count_similarity": 0.75,
      "normalized_edit_similarity": 0.6233,
      "token_level_edit_distance": 50,
      "codebert_score": {
        "precision": 0.8539,
        "recall": 0.9026,
        "f1": 0.8776,
        "f3": 0.8975
      },
      "token_count_upstream": 47,
      "token_count_downstream": 48,
      "token_count_total": 95,
      "cosine_similarity_openai": 0.9463
    }
  },
  {
    "cve_id": "ASB-A-283099444",
    "downstream_version": "11",
    "file_name": "media/codec2/sfplugin/utils/Codec2BufferUtils.cpp",
    "runtime_seconds": 54.7,
    "rej_file_diff": "--- media/codec2/sfplugin/utils/Codec2BufferUtils.cpp\n+++ media/codec2/sfplugin/utils/Codec2BufferUtils.cpp\n@@ -621,8 +621,8 @@ status_t ConvertRGBToPlanarYUV(\n     uint8_t maxLvlChroma =  colorRange == C2Color::RANGE_FULL ? 255 : 240;\n \n #define CLIP3(min,v,max) (((v) < (min)) ? (min) : (((max) > (v)) ? (v) : (max)))\n-    for (size_t y = 0; y < src.height(); ++y) {\n-        for (size_t x = 0; x < src.width(); ++x) {\n+    for (size_t y = 0; y < src.crop().height; ++y) {\n+        for (size_t x = 0; x < src.crop().width; ++x) {\n             uint8_t r = *pRed;\n             uint8_t g = *pGreen;\n             uint8_t b = *pBlue;",
    "llm_generated_patch": "--- a/media/codec2/sfplugin/utils/Codec2BufferUtils.cpp\n+++ b/media/codec2/sfplugin/utils/Codec2BufferUtils.cpp\n@@ -337,8 +337,8 @@\n     const uint8_t *pBlue  = src.data()[C2PlanarLayout::PLANE_B];\n \n #define CLIP3(x,y,z) (((z) < (x)) ? (x) : (((z) > (y)) ? (y) : (z)))\n-    for (size_t y = 0; y < src.height(); ++y) {\n-        for (size_t x = 0; x < src.width(); ++x) {\n+    for (size_t y = 0; y < src.crop().height; ++y) {\n+        for (size_t x = 0; x < src.crop().width; ++x) {\n             uint8_t red = *pRed;\n             uint8_t green = *pGreen;\n             uint8_t blue = *pBlue;",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 0.829,
      "token_level_edit_distance": 31,
      "codebert_score": {
        "precision": 0.9358,
        "recall": 0.9081,
        "f1": 0.9218,
        "f3": 0.9108
      },
      "token_count_upstream": 91,
      "token_count_downstream": 84,
      "token_count_total": 175,
      "cosine_similarity_openai": 0.8961
    }
  },
  {
    "cve_id": "ASB-A-333364513",
    "downstream_version": "14",
    "file_name": "src/com/android/settings/search/SearchResultTrampoline.java",
    "runtime_seconds": 119.71,
    "rej_file_diff": "--- src/com/android/settings/search/SearchResultTrampoline.java\n+++ src/com/android/settings/search/SearchResultTrampoline.java\n@@ -52,11 +51,11 @@ public class SearchResultTrampoline extends Activity {\n     protected void onCreate(Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n \n-        final ComponentName callingActivity = getCallingActivity();\n+        final String callerPackage = getLaunchedFromPackage();\n         // First make sure caller has privilege to launch a search result page.\n         FeatureFactory.getFeatureFactory()\n                 .getSearchFeatureProvider()\n-                .verifyLaunchSearchResultPageCaller(this, callingActivity);\n+                .verifyLaunchSearchResultPageCaller(this, callerPackage);\n         // Didn't crash, proceed and launch the result as a subsetting.\n         Intent intent = getIntent();\n         final String highlightMenuKey = intent.getStringExtra(\n@@ -138,9 +137,9 @@ public class SearchResultTrampoline extends Activity {\n         finish();\n     }\n \n-    private boolean isSettingsIntelligence(ComponentName callingActivity) {\n-        return callingActivity != null && TextUtils.equals(\n-                callingActivity.getPackageName(),\n+    private boolean isSettingsIntelligence(String callerPackage) {\n+        return TextUtils.equals(\n+                callerPackage,\n                 FeatureFactory.getFeatureFactory().getSearchFeatureProvider()\n                         .getSettingsIntelligencePkgName(this));\n     }",
    "llm_generated_patch": "--- a/src/com/android/settings/search/SearchResultTrampoline.java\n+++ b/src/com/android/settings/search/SearchResultTrampoline.java\n@@ -37,9 +37,9 @@\n         super.onCreate(savedInstanceState);\n \n-        final ComponentName callingActivity = getCallingActivity();\n+        final String callerPackage = getLaunchedFromPackage();\n         // First make sure caller has privilege to launch a search result page.\n-        FeatureFactory.getFactory(this)\n+        FeatureFactory.getFeatureFactory()\n                 .getSearchFeatureProvider()\n-                .verifyLaunchSearchResultPageCaller(this, callingActivity);\n+                .verifyLaunchSearchResultPageCaller(this, callerPackage);\n         // Didn't crash, proceed and launch the result as a subsetting.\n         Intent intent = getIntent();\n@@ -111,13 +111,12 @@\n \n-    private boolean isSettingsIntelligence(ComponentName callingActivity) {\n-        return callingActivity != null && TextUtils.equals(\n-                callingActivity.getPackageName(),\n-                FeatureFactory.getFactory(this).getSearchFeatureProvider()\n+    private boolean isSettingsIntelligence(String callerPackage) {\n+        return TextUtils.equals(\n+                callerPackage,\n+                FeatureFactory.getFeatureFactory().getSearchFeatureProvider()\n                         .getSettingsIntelligencePkgName(this));\n     }\n }",
    "metrics": {
      "relative_line_count_similarity": 0.963,
      "normalized_edit_similarity": 0.7067,
      "token_level_edit_distance": 40,
      "codebert_score": {
        "precision": 0.9448,
        "recall": 0.9249,
        "f1": 0.9348,
        "f3": 0.9269
      },
      "token_count_upstream": 114,
      "token_count_downstream": 97,
      "token_count_total": 211,
      "cosine_similarity_openai": 0.9825
    }
  },
  {
    "cve_id": "ASB-A-333364513",
    "downstream_version": "12L",
    "file_name": "src/com/android/settings/search/SearchResultTrampoline.java",
    "runtime_seconds": 186.46,
    "rej_file_diff": "--- src/com/android/settings/search/SearchResultTrampoline.java\n+++ src/com/android/settings/search/SearchResultTrampoline.java\n@@ -52,11 +51,11 @@ public class SearchResultTrampoline extends Activity {\n     protected void onCreate(Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n \n-        final ComponentName callingActivity = getCallingActivity();\n+        final String callerPackage = getLaunchedFromPackage();\n         // First make sure caller has privilege to launch a search result page.\n         FeatureFactory.getFeatureFactory()\n                 .getSearchFeatureProvider()\n-                .verifyLaunchSearchResultPageCaller(this, callingActivity);\n+                .verifyLaunchSearchResultPageCaller(this, callerPackage);\n         // Didn't crash, proceed and launch the result as a subsetting.\n         Intent intent = getIntent();\n         final String highlightMenuKey = intent.getStringExtra(\n@@ -105,7 +104,7 @@ public class SearchResultTrampoline extends Activity {\n         if (!ActivityEmbeddingUtils.isEmbeddingActivityEnabled(this)\n                 || ActivityEmbeddingUtils.isAlreadyEmbedded(this)) {\n             startActivity(intent);\n-        } else if (isSettingsIntelligence(callingActivity)) {\n+        } else if (isSettingsIntelligence(callerPackage)) {\n             if (FeatureFlagUtils.isEnabled(this, FeatureFlags.SETTINGS_SEARCH_ALWAYS_EXPAND)) {\n                 startActivity(getTrampolineIntent(intent, highlightMenuKey)\n                         .setClass(this, DeepLinkHomepageActivityInternal.class)\n@@ -138,9 +137,9 @@ public class SearchResultTrampoline extends Activity {\n         finish();\n     }\n \n-    private boolean isSettingsIntelligence(ComponentName callingActivity) {\n-        return callingActivity != null && TextUtils.equals(\n-                callingActivity.getPackageName(),\n+    private boolean isSettingsIntelligence(String callerPackage) {\n+        return TextUtils.equals(\n+                callerPackage,\n                 FeatureFactory.getFeatureFactory().getSearchFeatureProvider()\n                         .getSettingsIntelligencePkgName(this));\n     }",
    "llm_generated_patch": "--- a/src/com/android/settings/search/SearchResultTrampoline.java\n+++ b/src/com/android/settings/search/SearchResultTrampoline.java\n@@ -32,11 +32,11 @@\n     protected void onCreate(Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n \n-        final ComponentName callingActivity = getCallingActivity();\n+        final String callerPackage = getLaunchedFromPackage();\n         // First make sure caller has privilege to launch a search result page.\n         FeatureFactory.getFactory(this)\n                 .getSearchFeatureProvider()\n-                .verifyLaunchSearchResultPageCaller(this, callingActivity);\n+                .verifyLaunchSearchResultPageCaller(this, callerPackage);\n         // Didn't crash, proceed and launch the result as a subsetting.\n         Intent intent = getIntent();\n         final String highlightMenuKey = intent.getStringExtra(\n@@ -76,25 +76,32 @@\n         intent.addFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT);\n \n-        if (!ActivityEmbeddingUtils.isEmbeddingActivityEnabled(this)) {\n+        if (!ActivityEmbeddingUtils.isEmbeddingActivityEnabled(this)\n+                || ActivityEmbeddingUtils.isAlreadyEmbedded(this)) {\n             startActivity(intent);\n-        } else if (isSettingsIntelligence(callingActivity)) {\n-            // Register SplitPairRule for SubSettings, set clearTop false to prevent unexpected back\n-            // navigation behavior.\n-            ActivityEmbeddingRulesController.registerSubSettingsPairRule(this,\n-                    false /* clearTop */);\n+        } else if (isSettingsIntelligence(callerPackage)) {\n+            if (FeatureFlagUtils.isEnabled(this, FeatureFlags.SETTINGS_SEARCH_ALWAYS_EXPAND)) {\n+                startActivity(SettingsActivity.getTrampolineIntent(intent, highlightMenuKey)\n+                        .setClass(this, DeepLinkHomepageActivityInternal.class)\n+                        .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));\n+            } else {\n+                // Register SplitPairRule for SubSettings, set clearTop false to prevent unexpected back\n+                // navigation behavior.\n+                ActivityEmbeddingRulesController.registerSubSettingsPairRule(this,\n+                        false /* clearTop */);\n \n-            intent.setFlags(intent.getFlags() & ~Intent.FLAG_ACTIVITY_NEW_TASK);\n-            startActivity(intent);\n+                intent.setFlags(intent.getFlags() & ~Intent.FLAG_ACTIVITY_NEW_TASK);\n+                startActivity(intent);\n \n-            // Pass menu key to homepage\n-            final SettingsHomepageActivity homeActivity =\n-                    ((SettingsApplication) getApplicationContext()).getHomeActivity();\n-            if (homeActivity != null) {\n-                homeActivity.getMainFragment().setHighlightMenuKey(highlightMenuKey,\n-                        /* scrollNeeded= */ true);\n+                // Pass menu key to home page\n+                final SettingsHomepageActivity homeActivity =\n+                        ((SettingsApplication) getApplicationContext()).getHomeActivity();\n+                if (homeActivity != null) {\n+                    homeActivity.getMainFragment().setHighlightMenuKey(highlightMenuKey,\n+                            /* scrollNeeded= */ true);\n+                }\n             }\n         } else {\n             // Two-pane case\n@@ -102,10 +109,9 @@\n         finish();\n     }\n \n-    private boolean isSettingsIntelligence(ComponentName callingActivity) {\n-        return callingActivity != null && TextUtils.equals(\n-                callingActivity.getPackageName(),\n+    private boolean isSettingsIntelligence(String callerPackage) {\n+        return TextUtils.equals(\n+                callerPackage,\n                 FeatureFactory.getFactory(this).getSearchFeatureProvider()\n                         .getSettingsIntelligencePkgName(this));\n     }",
    "metrics": {
      "relative_line_count_similarity": 0.1111,
      "normalized_edit_similarity": 0.4887,
      "token_level_edit_distance": 313,
      "codebert_score": {
        "precision": 0.8391,
        "recall": 0.9138,
        "f1": 0.8749,
        "f3": 0.9058
      },
      "token_count_upstream": 150,
      "token_count_downstream": 274,
      "token_count_total": 424,
      "cosine_similarity_openai": 0.9752
    }
  },
  {
    "cve_id": "ASB-A-333364513",
    "downstream_version": "13",
    "file_name": "src/com/android/settings/search/SearchResultTrampoline.java",
    "runtime_seconds": 133.24,
    "rej_file_diff": "--- src/com/android/settings/search/SearchResultTrampoline.java\n+++ src/com/android/settings/search/SearchResultTrampoline.java\n@@ -52,11 +51,11 @@ public class SearchResultTrampoline extends Activity {\n     protected void onCreate(Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n \n-        final ComponentName callingActivity = getCallingActivity();\n+        final String callerPackage = getLaunchedFromPackage();\n         // First make sure caller has privilege to launch a search result page.\n         FeatureFactory.getFeatureFactory()\n                 .getSearchFeatureProvider()\n-                .verifyLaunchSearchResultPageCaller(this, callingActivity);\n+                .verifyLaunchSearchResultPageCaller(this, callerPackage);\n         // Didn't crash, proceed and launch the result as a subsetting.\n         Intent intent = getIntent();\n         final String highlightMenuKey = intent.getStringExtra(\n@@ -105,7 +104,7 @@ public class SearchResultTrampoline extends Activity {\n         if (!ActivityEmbeddingUtils.isEmbeddingActivityEnabled(this)\n                 || ActivityEmbeddingUtils.isAlreadyEmbedded(this)) {\n             startActivity(intent);\n-        } else if (isSettingsIntelligence(callingActivity)) {\n+        } else if (isSettingsIntelligence(callerPackage)) {\n             if (FeatureFlagUtils.isEnabled(this, FeatureFlags.SETTINGS_SEARCH_ALWAYS_EXPAND)) {\n                 startActivity(getTrampolineIntent(intent, highlightMenuKey)\n                         .setClass(this, DeepLinkHomepageActivityInternal.class)\n@@ -138,9 +137,9 @@ public class SearchResultTrampoline extends Activity {\n         finish();\n     }\n \n-    private boolean isSettingsIntelligence(ComponentName callingActivity) {\n-        return callingActivity != null && TextUtils.equals(\n-                callingActivity.getPackageName(),\n+    private boolean isSettingsIntelligence(String callerPackage) {\n+        return TextUtils.equals(\n+                callerPackage,\n                 FeatureFactory.getFeatureFactory().getSearchFeatureProvider()\n                         .getSettingsIntelligencePkgName(this));\n     }",
    "llm_generated_patch": "--- a/src/com/android/settings/search/SearchResultTrampoline.java\n+++ b/src/com/android/settings/search/SearchResultTrampoline.java\n@@ -34,12 +34,12 @@ public class SearchResultTrampoline extends Activity {\n     protected void onCreate(Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n \n-        final ComponentName callingActivity = getCallingActivity();\n+        final String callerPackage = getLaunchedFromPackage();\n         // First make sure caller has privilege to launch a search result page.\n-        FeatureFactory.getFactory(this)\n+        FeatureFactory.getFeatureFactory()\n                 .getSearchFeatureProvider()\n-                .verifyLaunchSearchResultPageCaller(this, callingActivity);\n+                .verifyLaunchSearchResultPageCaller(this, callerPackage);\n         // Didn't crash, proceed and launch the result as a subsetting.\n         Intent intent = getIntent();\n         final String highlightMenuKey = intent.getStringExtra(\n@@ -74,10 +74,17 @@\n \n         intent.addFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT);\n \n-        if (!ActivityEmbeddingUtils.isEmbeddingActivityEnabled(this)) {\n+        if (!ActivityEmbeddingUtils.isEmbeddingActivityEnabled(this)\n+                || ActivityEmbeddingUtils.isAlreadyEmbedded(this)) {\n             startActivity(intent);\n-        } else if (isSettingsIntelligence(callingActivity)) {\n+        } else if (isSettingsIntelligence(callerPackage)) {\n+            if (FeatureFlagUtils.isEnabled(this, FeatureFlags.SETTINGS_SEARCH_ALWAYS_EXPAND)) {\n+                startActivity(SettingsActivity.getTrampolineIntent(intent, highlightMenuKey)\n+                        .setClass(this, DeepLinkHomepageActivityInternal.class)\n+                        .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));\n+                finish();\n+                return;\n+            }\n             // Register SplitPairRule for SubSettings, set clearTop false to prevent unexpected back\n             // navigation behavior.\n             ActivityEmbeddingRulesController.registerSubSettingsPairRule(this,\n@@ -102,13 +109,13 @@\n         finish();\n     }\n \n-    private boolean isSettingsIntelligence(ComponentName callingActivity) {\n-        return callingActivity != null && TextUtils.equals(\n-                callingActivity.getPackageName(),\n-                FeatureFactory.getFactory(this).getSearchFeatureProvider()\n+    private boolean isSettingsIntelligence(String callerPackage) {\n+        return TextUtils.equals(\n+                callerPackage,\n+                FeatureFactory.getFeatureFactory().getSearchFeatureProvider()\n                         .getSettingsIntelligencePkgName(this));\n     }\n }",
    "metrics": {
      "relative_line_count_similarity": 0.6667,
      "normalized_edit_similarity": 0.7268,
      "token_level_edit_distance": 118,
      "codebert_score": {
        "precision": 0.8858,
        "recall": 0.9174,
        "f1": 0.9013,
        "f3": 0.9141
      },
      "token_count_upstream": 150,
      "token_count_downstream": 179,
      "token_count_total": 329,
      "cosine_similarity_openai": 0.9829
    }
  },
  {
    "cve_id": "ASB-A-333364513",
    "downstream_version": "12",
    "file_name": "src/com/android/settings/search/SearchResultTrampoline.java",
    "runtime_seconds": 186.24,
    "rej_file_diff": "--- src/com/android/settings/search/SearchResultTrampoline.java\n+++ src/com/android/settings/search/SearchResultTrampoline.java\n@@ -21,7 +21,6 @@ import static com.android.settings.SettingsActivity.EXTRA_SHOW_FRAGMENT_TAB;\n import static com.android.settings.activityembedding.EmbeddedDeepLinkUtils.getTrampolineIntent;\n \n import android.app.Activity;\n-import android.content.ComponentName;\n import android.content.Intent;\n import android.net.Uri;\n import android.os.Bundle;\n@@ -53,11 +52,11 @@ public class SearchResultTrampoline extends Activity {\n     protected void onCreate(Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n \n-        final ComponentName callingActivity = getCallingActivity();\n+        final String callerPackage = getLaunchedFromPackage();\n         // First make sure caller has privilege to launch a search result page.\n         FeatureFactory.getFeatureFactory()\n                 .getSearchFeatureProvider()\n-                .verifyLaunchSearchResultPageCaller(this, callingActivity);\n+                .verifyLaunchSearchResultPageCaller(this, callerPackage);\n         // Didn't crash, proceed and launch the result as a subsetting.\n         Intent intent = getIntent();\n         final String highlightMenuKey = intent.getStringExtra(\n@@ -106,7 +105,7 @@ public class SearchResultTrampoline extends Activity {\n         if (!ActivityEmbeddingUtils.isEmbeddingActivityEnabled(this)\n                 || ActivityEmbeddingUtils.isAlreadyEmbedded(this)) {\n             startActivity(intent);\n-        } else if (isSettingsIntelligence(callingActivity)) {\n+        } else if (isSettingsIntelligence(callerPackage)) {\n             if (FeatureFlagUtils.isEnabled(this, FeatureFlags.SETTINGS_SEARCH_ALWAYS_EXPAND)) {\n                 startActivity(getTrampolineIntent(intent, highlightMenuKey)\n                         .setClass(this, DeepLinkHomepageActivityInternal.class)\n@@ -139,9 +138,9 @@ public class SearchResultTrampoline extends Activity {\n         finish();\n     }\n \n-    private boolean isSettingsIntelligence(ComponentName callingActivity) {\n-        return callingActivity != null && TextUtils.equals(\n-                callingActivity.getPackageName(),\n+    private boolean isSettingsIntelligence(String callerPackage) {\n+        return TextUtils.equals(\n+                callerPackage,\n                 FeatureFactory.getFeatureFactory().getSearchFeatureProvider()\n                         .getSettingsIntelligencePkgName(this));\n     }",
    "llm_generated_patch": "--- a/src/com/android/settings/search/SearchResultTrampoline.java\n+++ b/src/com/android/settings/search/SearchResultTrampoline.java\n@@ -13,37 +13,70 @@\n package com.android.settings.search;\n \n import static com.android.settings.SettingsActivity.EXTRA_SHOW_FRAGMENT_ARGUMENTS;\n import static com.android.settings.SettingsActivity.EXTRA_SHOW_FRAGMENT_TAB;\n+import static com.android.settings.activityembedding.EmbeddedDeepLinkUtils.getTrampolineIntent;\n \n import android.app.Activity;\n import android.content.Intent;\n+import android.net.Uri;\n import android.os.Bundle;\n+import android.text.TextUtils;\n \n import com.android.settings.SettingsActivity;\n import com.android.settings.SubSettings;\n+import com.android.settings.activityembedding.ActivityEmbeddingUtils;\n+import com.android.settings.core.FeatureFlags;\n+import com.android.settings.flags.FeatureFlagUtils;\n+import com.android.settings.homepage.DeepLinkHomepageActivityInternal;\n import com.android.settings.overlay.FeatureFactory;\n \n /**\n  * A trampoline activity that launches setting result page.\n  */\n public class SearchResultTrampoline extends Activity {\n \n     @Override\n     protected void onCreate(Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n \n+        final String callerPackage = getLaunchedFromPackage();\n         // First make sure caller has privilege to launch a search result page.\n-        FeatureFactory.getFactory(this)\n+        FeatureFactory.getFeatureFactory()\n                 .getSearchFeatureProvider()\n-                .verifyLaunchSearchResultPageCaller(this, getCallingActivity());\n+                .verifyLaunchSearchResultPageCaller(this, callerPackage);\n         // Didn't crash, proceed and launch the result as a subsetting.\n-        final Intent intent = getIntent();\n+        Intent intent = getIntent();\n+        final String highlightMenuKey = intent.getStringExtra(\n+            SearchFeatureProvider.EXTRA_SETTINGS_ACTION_HIGHLIGHT_MENU_KEY);\n+        final String settingKey = intent.getStringExtra(SettingsActivity.EXTRA_FRAGMENT_ARG_KEY);\n+        final int tab = intent.getIntExtra(EXTRA_SHOW_FRAGMENT_TAB, 0);\n+        final Bundle args = intent.getBundleExtra(EXTRA_SHOW_FRAGMENT_ARGUMENTS);\n+        final Bundle newArgs = args == null ? new Bundle() : args;\n+        newArgs.putString(SettingsActivity.EXTRA_FRAGMENT_ARG_KEY, settingKey);\n+        newArgs.putInt(EXTRA_SHOW_FRAGMENT_TAB, tab);\n+        newArgs.putString(SearchFeatureProvider.EXTRA_SETTINGS_ACTION_HIGHLIGHT_MENU_KEY,\n+                highlightMenuKey);\n+        intent.putExtra(EXTRA_SHOW_FRAGMENT_ARGUMENTS, newArgs);\n \n-        // Hack to take EXTRA_FRAGMENT_ARG_KEY from intent and set into\n-        // EXTRA_SHOW_FRAGMENT_ARGUMENTS. This is necessary because intent could be from external\n-        // caller and args may not persisted.\n-        final String settingKey = intent.getStringExtra(SettingsActivity.EXTRA_FRAGMENT_ARG_KEY);\n-        final int tab = intent.getIntExtra(EXTRA_SHOW_FRAGMENT_TAB, 0);\n-        final Bundle args = new Bundle();\n-        args.putString(SettingsActivity.EXTRA_FRAGMENT_ARG_KEY, settingKey);\n-        args.putInt(EXTRA_SHOW_FRAGMENT_TAB, tab);\n-        intent.putExtra(EXTRA_SHOW_FRAGMENT_ARGUMENTS, args);\n+        // Extract true destination from intent.\n+        final String className = intent.getComponent().getClassName();\n+        intent.setClass(this, SubSettings.class);\n+        intent.putExtra(SettingsActivity.EXTRA_SHOW_FRAGMENT, className);\n \n-        // Reroute request to SubSetting.\n-        intent.setClass(this /* context */, SubSettings.class)\n-                .addFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT);\n-        startActivity(intent);\n+        // Support redirection for ActivityEmbedding.\n+        if (!ActivityEmbeddingUtils.isEmbeddingActivityEnabled(this)\n+                || ActivityEmbeddingUtils.isAlreadyEmbedded(this)) {\n+            startActivity(intent);\n+        } else if (isSettingsIntelligence(callerPackage)) {\n+            if (FeatureFlagUtils.isEnabled(this, FeatureFlags.SETTINGS_SEARCH_ALWAYS_EXPAND)) {\n+                startActivity(getTrampolineIntent(intent, highlightMenuKey)\n+                        .setClass(this, DeepLinkHomepageActivityInternal.class)\n+                        .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\n+                        .setData(intent.getData()));\n+            } else {\n+                // SettingsIntelligence knows how to launch settings with activity embedding.\n+                startActivity(intent);\n+            }\n+        } else {\n+            // Regular caller needs to be redirected.\n+            // TODO(b/229438303): support launching from 3P app with activity embedding.\n+            final Intent trampolineIntent =\n+                    getTrampolineIntent(intent, highlightMenuKey)\n+                            .setClass(this, DeepLinkHomepageActivityInternal.class)\n+                            .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n+            final Uri data = intent.getData();\n+            if (data != null) {\n+                trampolineIntent.setData(data);\n+            }\n+            startActivity(trampolineIntent);\n+        }\n \n         // Done.\n         finish();\n     }\n \n+    private boolean isSettingsIntelligence(String callerPackage) {\n+        return TextUtils.equals(\n+                callerPackage,\n+                FeatureFactory.getFeatureFactory().getSearchFeatureProvider()\n+                        .getSettingsIntelligencePkgName(this));\n+    }\n+\n }",
    "metrics": {
      "relative_line_count_similarity": 0.0,
      "normalized_edit_similarity": 0.3259,
      "token_level_edit_distance": 689,
      "codebert_score": {
        "precision": 0.8145,
        "recall": 0.8857,
        "f1": 0.8486,
        "f3": 0.878
      },
      "token_count_upstream": 170,
      "token_count_downstream": 401,
      "token_count_total": 571,
      "cosine_similarity_openai": 0.8841
    }
  },
  {
    "cve_id": "ASB-A-327749022",
    "downstream_version": "12L",
    "file_name": "src/com/android/settings/homepage/SettingsHomepageActivity.java",
    "runtime_seconds": 80.63,
    "rej_file_diff": "--- src/com/android/settings/homepage/SettingsHomepageActivity.java\n+++ src/com/android/settings/homepage/SettingsHomepageActivity.java\n@@ -187,6 +187,15 @@ public class SettingsHomepageActivity extends FragmentActivity implements\n     protected void onCreate(Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n \n+        // Ensure device is provisioned in order to access Settings home\n+        // TODO(b/331254029): This should later be replaced in favor of an allowlist\n+        boolean unprovisioned = android.provider.Settings.Global.getInt(getContentResolver(),\n+                android.provider.Settings.Global.DEVICE_PROVISIONED, 0) == 0;\n+        if (unprovisioned) {\n+            Log.e(TAG, \"Device is not provisioned, exiting Settings\");\n+            finish();\n+        }\n+\n         mIsEmbeddingActivityEnabled = ActivityEmbeddingUtils.isEmbeddingActivityEnabled(this);\n         if (mIsEmbeddingActivityEnabled) {\n             final UserManager um = getSystemService(UserManager.class);",
    "llm_generated_patch": "--- a/src/com/android/settings/homepage/SettingsHomepageActivity.java\n+++ b/src/com/android/settings/homepage/SettingsHomepageActivity.java\n@@ -140,6 +140,17 @@\n     @Override\n     protected void onCreate(Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n+\n+        // Ensure device is provisioned in order to access Settings home\n+        // TODO(b/331254029): This should later be replaced in favor of an allowlist\n+        boolean unprovisioned = android.provider.Settings.Global.getInt(getContentResolver(),\n+                android.provider.Settings.Global.DEVICE_PROVISIONED, 0) == 0;\n+        if (unprovisioned) {\n+            Log.e(TAG, \"Device is not provisioned, exiting Settings\");\n+            finish();\n+            return;\n+        }\n+\n         setContentView(R.layout.settings_homepage_container);\n         mIsEmbeddingActivityEnabled = ActivityEmbeddingUtils.isEmbeddingActivityEnabled(this);\n         mIsTwoPaneLastTime = ActivityEmbeddingUtils.isTwoPaneResolution(this);",
    "metrics": {
      "relative_line_count_similarity": 0.8235,
      "normalized_edit_similarity": 0.7829,
      "token_level_edit_distance": 26,
      "codebert_score": {
        "precision": 0.93,
        "recall": 0.9374,
        "f1": 0.9337,
        "f3": 0.9366
      },
      "token_count_upstream": 83,
      "token_count_downstream": 77,
      "token_count_total": 160,
      "cosine_similarity_openai": 0.9664
    }
  },
  {
    "cve_id": "ASB-A-327749022",
    "downstream_version": "12",
    "file_name": "src/com/android/settings/homepage/SettingsHomepageActivity.java",
    "runtime_seconds": 46.72,
    "rej_file_diff": "--- src/com/android/settings/homepage/SettingsHomepageActivity.java\n+++ src/com/android/settings/homepage/SettingsHomepageActivity.java\n@@ -187,6 +187,15 @@ public class SettingsHomepageActivity extends FragmentActivity implements\n     protected void onCreate(Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n \n+        // Ensure device is provisioned in order to access Settings home\n+        // TODO(b/331254029): This should later be replaced in favor of an allowlist\n+        boolean unprovisioned = android.provider.Settings.Global.getInt(getContentResolver(),\n+                android.provider.Settings.Global.DEVICE_PROVISIONED, 0) == 0;\n+        if (unprovisioned) {\n+            Log.e(TAG, \"Device is not provisioned, exiting Settings\");\n+            finish();\n+        }\n+\n         mIsEmbeddingActivityEnabled = ActivityEmbeddingUtils.isEmbeddingActivityEnabled(this);\n         if (mIsEmbeddingActivityEnabled) {\n             final UserManager um = getSystemService(UserManager.class);",
    "llm_generated_patch": "--- a/src/com/android/settings/homepage/SettingsHomepageActivity.java\n+++ b/src/com/android/settings/homepage/SettingsHomepageActivity.java\n@@ -56,6 +56,17 @@\n     @Override\n     protected void onCreate(Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n+\n+        // Ensure device is provisioned in order to access Settings home\n+        // TODO(b/331254029): This should later be replaced in favor of an allowlist\n+        boolean unprovisioned = android.provider.Settings.Global.getInt(getContentResolver(),\n+                android.provider.Settings.Global.DEVICE_PROVISIONED, 0) == 0;\n+        if (unprovisioned) {\n+            Log.e(TAG, \"Device is not provisioned, exiting Settings\");\n+            finish();\n+            return;\n+        }\n+\n         setContentView(R.layout.settings_homepage_container);\n \n         final View appBar = findViewById(R.id.app_bar_container);",
    "metrics": {
      "relative_line_count_similarity": 0.8824,
      "normalized_edit_similarity": 0.7941,
      "token_level_edit_distance": 30,
      "codebert_score": {
        "precision": 0.9378,
        "recall": 0.9055,
        "f1": 0.9214,
        "f3": 0.9087
      },
      "token_count_upstream": 83,
      "token_count_downstream": 76,
      "token_count_total": 159,
      "cosine_similarity_openai": 0.9419
    }
  },
  {
    "cve_id": "ASB-A-314333719",
    "downstream_version": "14",
    "file_name": "packages/SystemUI/src/com/android/systemui/media/dagger/MediaModule.java",
    "runtime_seconds": 129.27,
    "rej_file_diff": "--- packages/SystemUI/src/com/android/systemui/media/dagger/MediaModule.java\n+++ packages/SystemUI/src/com/android/systemui/media/dagger/MediaModule.java\n@@ -20,6 +20,7 @@ import com.android.systemui.dagger.SysUISingleton;\n import com.android.systemui.log.LogBuffer;\n import com.android.systemui.log.LogBufferFactory;\n import com.android.systemui.media.controls.domain.pipeline.MediaDataManager;\n+import com.android.systemui.media.controls.ui.controller.MediaCarouselController;\n import com.android.systemui.media.controls.ui.controller.MediaHierarchyManager;\n import com.android.systemui.media.controls.ui.controller.MediaHostStatesManager;\n import com.android.systemui.media.controls.ui.view.MediaHost;\n@@ -98,8 +103,9 @@ public interface MediaModule {\n     @Named(COMMUNAL_HUB)\n     static MediaHost providesCommunalMediaHost(MediaHost.MediaHostStateHolder stateHolder,\n             MediaHierarchyManager hierarchyManager, MediaDataManager dataManager,\n-            MediaHostStatesManager statesManager) {\n-        return new MediaHost(stateHolder, hierarchyManager, dataManager, statesManager);\n+            MediaHostStatesManager statesManager, MediaCarouselController carouselController) {\n+        return new MediaHost(stateHolder, hierarchyManager, dataManager, statesManager,\n+                carouselController);\n     }\n \n     /** Provides a logging buffer related to the media tap-to-transfer chip on the sender device. */",
    "llm_generated_patch": "--- a/packages/SystemUI/src/com/android/systemui/media/dagger/MediaModule.java\n+++ b/packages/SystemUI/src/com/android/systemui/media/dagger/MediaModule.java\n@@ -18,7 +18,8 @@ import com.android.systemui.log.LogBufferFactory;\n import com.android.systemui.media.controls.pipeline.MediaDataManager;\n import com.android.systemui.media.controls.ui.MediaHierarchyManager;\n import com.android.systemui.media.controls.ui.MediaHost;\n import com.android.systemui.media.controls.ui.MediaHostStatesManager;\n+import com.android.systemui.media.controls.ui.controller.MediaCarouselController;\n import com.android.systemui.media.controls.util.MediaFlags;\n import com.android.systemui.media.dream.dagger.MediaComplicationComponent;\n import com.android.systemui.media.muteawait.MediaMuteAwaitConnectionCli;",
    "metrics": {
      "relative_line_count_similarity": 0.5238,
      "normalized_edit_similarity": 0.5,
      "token_level_edit_distance": 136,
      "codebert_score": {
        "precision": 0.8981,
        "recall": 0.8053,
        "f1": 0.8492,
        "f3": 0.8137
      },
      "token_count_upstream": 84,
      "token_count_downstream": 26,
      "token_count_total": 110,
      "cosine_similarity_openai": 0.9033
    }
  },
  {
    "cve_id": "ASB-A-314333719",
    "downstream_version": "13",
    "file_name": "packages/SystemUI/src/com/android/systemui/media/dagger/MediaModule.java",
    "runtime_seconds": 161.34,
    "rej_file_diff": "--- packages/SystemUI/src/com/android/systemui/media/dagger/MediaModule.java\n+++ packages/SystemUI/src/com/android/systemui/media/dagger/MediaModule.java\n@@ -20,6 +20,7 @@ import com.android.systemui.dagger.SysUISingleton;\n import com.android.systemui.log.LogBuffer;\n import com.android.systemui.log.LogBufferFactory;\n import com.android.systemui.media.controls.domain.pipeline.MediaDataManager;\n+import com.android.systemui.media.controls.ui.controller.MediaCarouselController;\n import com.android.systemui.media.controls.ui.controller.MediaHierarchyManager;\n import com.android.systemui.media.controls.ui.controller.MediaHostStatesManager;\n import com.android.systemui.media.controls.ui.view.MediaHost;\n@@ -98,8 +103,9 @@ public interface MediaModule {\n     @Named(COMMUNAL_HUB)\n     static MediaHost providesCommunalMediaHost(MediaHost.MediaHostStateHolder stateHolder,\n             MediaHierarchyManager hierarchyManager, MediaDataManager dataManager,\n-            MediaHostStatesManager statesManager) {\n-        return new MediaHost(stateHolder, hierarchyManager, dataManager, statesManager);\n+            MediaHostStatesManager statesManager, MediaCarouselController carouselController) {\n+        return new MediaHost(stateHolder, hierarchyManager, dataManager, statesManager,\n+                carouselController);\n     }\n \n     /** Provides a logging buffer related to the media tap-to-transfer chip on the sender device. */",
    "llm_generated_patch": "--- a/packages/SystemUI/src/com/android/systemui/media/dagger/MediaModule.java\n+++ b/packages/SystemUI/src/com/android/systemui/media/dagger/MediaModule.java\n@@ -18,7 +18,8 @@\n import com.android.systemui.log.dagger.MediaTttReceiverLogBuffer;\n import com.android.systemui.log.dagger.MediaTttSenderLogBuffer;\n import com.android.systemui.media.MediaDataManager;\n+import com.android.systemui.media.controls.ui.controller.MediaCarouselController;\n import com.android.systemui.media.MediaFlags;\n import com.android.systemui.media.MediaHierarchyManager;\n import com.android.systemui.media.MediaHost;\n@@ -40,6 +41,7 @@\n     String QUICK_QS_PANEL = \"media_quick_qs_panel\";\n     String KEYGUARD = \"media_keyguard\";\n     String DREAM = \"dream\";\n+    String COMMUNAL_HUB = \"media_communal_hub\";\n \n     /** */\n     @Provides\n@@ -87,6 +89,19 @@\n     }\n \n     /** */\n+    @Provides\n+    @SysUISingleton\n+    @Named(COMMUNAL_HUB)\n+    static MediaHost providesCommunalMediaHost(MediaHost.MediaHostStateHolder stateHolder,\n+            MediaHierarchyManager hierarchyManager, MediaDataManager dataManager,\n+            MediaHostStatesManager statesManager, MediaCarouselController carouselController) {\n+        return new MediaHost(stateHolder, hierarchyManager, dataManager, statesManager,\n+                carouselController);\n+    }\n+\n+    /** */\n     @Provides\n     @SysUISingleton\n     static Optional<MediaTttChipControllerSender> providesMediaTttChipControllerSender(",
    "metrics": {
      "relative_line_count_similarity": 0.381,
      "normalized_edit_similarity": 0.5379,
      "token_level_edit_distance": 218,
      "codebert_score": {
        "precision": 0.8636,
        "recall": 0.8898,
        "f1": 0.8765,
        "f3": 0.8872
      },
      "token_count_upstream": 84,
      "token_count_downstream": 95,
      "token_count_total": 179,
      "cosine_similarity_openai": 0.905
    }
  },
  {
    "cve_id": "ASB-A-314333719",
    "downstream_version": "12L",
    "file_name": "packages/SystemUI/src/com/android/systemui/media/dagger/MediaModule.java",
    "runtime_seconds": 114.91,
    "rej_file_diff": "--- packages/SystemUI/src/com/android/systemui/media/dagger/MediaModule.java\n+++ packages/SystemUI/src/com/android/systemui/media/dagger/MediaModule.java\n@@ -20,6 +20,7 @@ import com.android.systemui.dagger.SysUISingleton;\n import com.android.systemui.log.LogBuffer;\n import com.android.systemui.log.LogBufferFactory;\n import com.android.systemui.media.controls.domain.pipeline.MediaDataManager;\n+import com.android.systemui.media.controls.ui.controller.MediaCarouselController;\n import com.android.systemui.media.controls.ui.controller.MediaHierarchyManager;\n import com.android.systemui.media.controls.ui.controller.MediaHostStatesManager;\n import com.android.systemui.media.controls.ui.view.MediaHost;\n@@ -87,8 +91,9 @@ public interface MediaModule {\n     @Named(DREAM)\n     static MediaHost providesDreamMediaHost(MediaHost.MediaHostStateHolder stateHolder,\n             MediaHierarchyManager hierarchyManager, MediaDataManager dataManager,\n-            MediaHostStatesManager statesManager) {\n-        return new MediaHost(stateHolder, hierarchyManager, dataManager, statesManager);\n+            MediaHostStatesManager statesManager, MediaCarouselController carouselController) {\n+        return new MediaHost(stateHolder, hierarchyManager, dataManager, statesManager,\n+                carouselController);\n     }\n \n     /** */\n@@ -97,8 +102,9 @@ public interface MediaModule {\n     @Named(COMMUNAL_HUB)\n     static MediaHost providesCommunalMediaHost(MediaHost.MediaHostStateHolder stateHolder,\n             MediaHierarchyManager hierarchyManager, MediaDataManager dataManager,\n-            MediaHostStatesManager statesManager) {\n-        return new MediaHost(stateHolder, hierarchyManager, dataManager, statesManager);\n+            MediaHostStatesManager statesManager, MediaCarouselController carouselController) {\n+        return new MediaHost(stateHolder, hierarchyManager, dataManager, statesManager,\n+                carouselController);\n     }\n \n     /** Provides a logging buffer related to the media tap-to-transfer chip on the sender device. */",
    "llm_generated_patch": "--- a/packages/SystemUI/src/com/android/systemui/media/dagger/MediaModule.java\n+++ b/packages/SystemUI/src/com/android/systemui/media/dagger/MediaModule.java\n@@ -14,13 +14,17 @@\n package com.android.systemui.media.dagger;\n \n import com.android.systemui.dagger.SysUISingleton;\n-import com.android.systemui.media.MediaDataManager;\n-import com.android.systemui.media.MediaHierarchyManager;\n-import com.android.systemui.media.MediaHost;\n-import com.android.systemui.media.MediaHostStatesManager;\n+import com.android.systemui.log.LogBuffer;\n+import com.android.systemui.log.LogBufferFactory;\n+import com.android.systemui.media.controls.domain.pipeline.MediaDataManager;\n+import com.android.systemui.media.controls.ui.controller.MediaCarouselController;\n+import com.android.systemui.media.controls.ui.controller.MediaHierarchyManager;\n+import com.android.systemui.media.controls.ui.controller.MediaHostStatesManager;\n+import com.android.systemui.media.controls.ui.view.MediaHost;\n \n import javax.inject.Named;\n \n import dagger.Module;\n import dagger.Provides;",
    "metrics": {
      "relative_line_count_similarity": 0.5938,
      "normalized_edit_similarity": 0.3626,
      "token_level_edit_distance": 197,
      "codebert_score": {
        "precision": 0.8905,
        "recall": 0.8021,
        "f1": 0.844,
        "f3": 0.8102
      },
      "token_count_upstream": 130,
      "token_count_downstream": 40,
      "token_count_total": 170,
      "cosine_similarity_openai": 0.8844
    }
  },
  {
    "cve_id": "ASB-A-314333719",
    "downstream_version": "12",
    "file_name": "packages/SystemUI/src/com/android/systemui/media/dagger/MediaModule.java",
    "runtime_seconds": 131.08,
    "rej_file_diff": "--- packages/SystemUI/src/com/android/systemui/media/dagger/MediaModule.java\n+++ packages/SystemUI/src/com/android/systemui/media/dagger/MediaModule.java\n@@ -20,6 +20,7 @@ import com.android.systemui.dagger.SysUISingleton;\n import com.android.systemui.log.LogBuffer;\n import com.android.systemui.log.LogBufferFactory;\n import com.android.systemui.media.controls.domain.pipeline.MediaDataManager;\n+import com.android.systemui.media.controls.ui.controller.MediaCarouselController;\n import com.android.systemui.media.controls.ui.controller.MediaHierarchyManager;\n import com.android.systemui.media.controls.ui.controller.MediaHostStatesManager;\n import com.android.systemui.media.controls.ui.view.MediaHost;\n@@ -87,8 +91,9 @@ public interface MediaModule {\n     @Named(DREAM)\n     static MediaHost providesDreamMediaHost(MediaHost.MediaHostStateHolder stateHolder,\n             MediaHierarchyManager hierarchyManager, MediaDataManager dataManager,\n-            MediaHostStatesManager statesManager) {\n-        return new MediaHost(stateHolder, hierarchyManager, dataManager, statesManager);\n+            MediaHostStatesManager statesManager, MediaCarouselController carouselController) {\n+        return new MediaHost(stateHolder, hierarchyManager, dataManager, statesManager,\n+                carouselController);\n     }\n \n     /** */\n@@ -97,8 +102,9 @@ public interface MediaModule {\n     @Named(COMMUNAL_HUB)\n     static MediaHost providesCommunalMediaHost(MediaHost.MediaHostStateHolder stateHolder,\n             MediaHierarchyManager hierarchyManager, MediaDataManager dataManager,\n-            MediaHostStatesManager statesManager) {\n-        return new MediaHost(stateHolder, hierarchyManager, dataManager, statesManager);\n+            MediaHostStatesManager statesManager, MediaCarouselController carouselController) {\n+        return new MediaHost(stateHolder, hierarchyManager, dataManager, statesManager,\n+                carouselController);\n     }\n \n     /** Provides a logging buffer related to the media tap-to-transfer chip on the sender device. */",
    "llm_generated_patch": "--- a/packages/SystemUI/src/com/android/systemui/media/dagger/MediaModule.java\n+++ b/packages/SystemUI/src/com/android/systemui/media/dagger/MediaModule.java\n@@ -13,11 +13,15 @@\n \n package com.android.systemui.media.dagger;\n \n import com.android.systemui.dagger.SysUISingleton;\n-import com.android.systemui.media.MediaDataManager;\n-import com.android.systemui.media.MediaHierarchyManager;\n-import com.android.systemui.media.MediaHost;\n-import com.android.systemui.media.MediaHostStatesManager;\n+import com.android.systemui.log.LogBuffer;\n+import com.android.systemui.log.LogBufferFactory;\n+import com.android.systemui.media.controls.domain.pipeline.MediaDataManager;\n+import com.android.systemui.media.controls.ui.controller.MediaCarouselController;\n+import com.android.systemui.media.controls.ui.controller.MediaHierarchyManager;\n+import com.android.systemui.media.controls.ui.controller.MediaHostStatesManager;\n+import com.android.systemui.media.controls.ui.view.MediaHost;\n \n import javax.inject.Named;\n \n@@ -25,9 +29,11 @@\n public interface MediaModule {\n     String QS_PANEL = \"media_qs_panel\";\n     String QUICK_QS_PANEL = \"media_quick_qs_panel\";\n     String KEYGUARD = \"media_keyguard\";\n+    String DREAM = \"media_dream\";\n+    String COMMUNAL_HUB = \"media_communal_hub\";\n \n     /** */\n     @Provides\n@@ -47,7 +53,31 @@\n     static MediaHost providesKeyguardMediaHost(MediaHost.MediaHostStateHolder stateHolder,\n             MediaHierarchyManager hierarchyManager, MediaDataManager dataManager,\n             MediaHostStatesManager statesManager, MediaCarouselController carouselController) {\n         return new MediaHost(stateHolder, hierarchyManager, dataManager, statesManager,\n                 carouselController);\n     }\n+\n+    /** */\n+    @Provides\n+    @SysUISingleton\n+    @Named(DREAM)\n+    static MediaHost providesDreamMediaHost(MediaHost.MediaHostStateHolder stateHolder,\n+            MediaHierarchyManager hierarchyManager, MediaDataManager dataManager,\n+            MediaHostStatesManager statesManager, MediaCarouselController carouselController) {\n+        return new MediaHost(stateHolder, hierarchyManager, dataManager, statesManager,\n+                carouselController);\n+    }\n+\n+    /** */\n+    @Provides\n+    @SysUISingleton\n+    @Named(COMMUNAL_HUB)\n+    static MediaHost providesCommunalMediaHost(MediaHost.MediaHostStateHolder stateHolder,\n+            MediaHierarchyManager hierarchyManager, MediaDataManager dataManager,\n+            MediaHostStatesManager statesManager, MediaCarouselController carouselController) {\n+        return new MediaHost(stateHolder, hierarchyManager, dataManager, statesManager,\n+                carouselController);\n+    }\n }",
    "metrics": {
      "relative_line_count_similarity": 0.25,
      "normalized_edit_similarity": 0.5359,
      "token_level_edit_distance": 355,
      "codebert_score": {
        "precision": 0.8835,
        "recall": 0.9068,
        "f1": 0.895,
        "f3": 0.9044
      },
      "token_count_upstream": 130,
      "token_count_downstream": 169,
      "token_count_total": 299,
      "cosine_similarity_openai": 0.9012
    }
  },
  {
    "cve_id": "ASB-A-283103220",
    "downstream_version": "12L",
    "file_name": "services/core/java/com/android/server/wm/ActivityClientController.java",
    "runtime_seconds": 75.88,
    "rej_file_diff": "--- services/core/java/com/android/server/wm/ActivityClientController.java\n+++ services/core/java/com/android/server/wm/ActivityClientController.java\n@@ -1061,6 +1087,19 @@ class ActivityClientController extends IActivityClientController.Stub {\n                     + \": Current activity does not support picture-in-picture.\");\n         }\n \n+        // Rate limit how frequent an app can request aspect ratio change via\n+        // Activity#setPictureInPictureParams\n+        final int userId = UserHandle.getCallingUserId();\n+        if (r.pictureInPictureArgs.hasSetAspectRatio()\n+                && params.hasSetAspectRatio()\n+                && !r.pictureInPictureArgs.getAspectRatio().equals(\n+                params.getAspectRatio())\n+                && !mSetPipAspectRatioQuotaTracker.noteEvent(\n+                userId, r.packageName, \"setPipAspectRatio\")) {\n+            throw new IllegalStateException(caller\n+                    + \": Too many PiP aspect ratio change requests from \" + r.packageName);\n+        }\n+\n         final float minAspectRatio = mContext.getResources().getFloat(\n                 com.android.internal.R.dimen.config_pictureInPictureMinAspectRatio);\n         final float maxAspectRatio = mContext.getResources().getFloat(",
    "llm_generated_patch": "--- a/services/core/java/com/android/server/wm/ActivityClientController.java\n+++ b/services/core/java/com/android/server/wm/ActivityClientController.java\n@@ -710,7 +710,19 @@\n             throw new IllegalStateException(caller\n                     + \": Current activity does not support picture-in-picture.\");\n         }\n-\n+        // Rate limit how frequent an app can request aspect ratio change via\n+        // Activity#setPictureInPictureParams\n+        final int userId = UserHandle.getCallingUserId();\n+        if (r.pictureInPictureArgs.hasSetAspectRatio()\n+                && params.hasSetAspectRatio()\n+                && !r.pictureInPictureArgs.getAspectRatio().equals(\n+                params.getAspectRatio())\n+                && !mSetPipAspectRatioQuotaTracker.noteEvent(\n+                userId, r.packageName, \"setPipAspectRatio\")) {\n+            throw new IllegalStateException(caller\n+                    + \": Too many PiP aspect ratio change requests from \" + r.packageName);\n+        }\n+\n         if (params.hasSetAspectRatio()\n                 && !mService.mWindowManager.isValidPictureInPictureAspectRatio(\n                 r.mDisplayContent, params.getAspectRatio())) {",
    "metrics": {
      "relative_line_count_similarity": 0.9048,
      "normalized_edit_similarity": 0.7795,
      "token_level_edit_distance": 31,
      "codebert_score": {
        "precision": 0.9415,
        "recall": 0.9244,
        "f1": 0.9329,
        "f3": 0.9261
      },
      "token_count_upstream": 96,
      "token_count_downstream": 91,
      "token_count_total": 187,
      "cosine_similarity_openai": 0.9649
    }
  },
  {
    "cve_id": "ASB-A-283103220",
    "downstream_version": "12",
    "file_name": "services/core/java/com/android/server/wm/ActivityClientController.java",
    "runtime_seconds": 110.81,
    "rej_file_diff": "--- services/core/java/com/android/server/wm/ActivityClientController.java\n+++ services/core/java/com/android/server/wm/ActivityClientController.java\n@@ -1061,6 +1087,19 @@ class ActivityClientController extends IActivityClientController.Stub {\n                     + \": Current activity does not support picture-in-picture.\");\n         }\n \n+        // Rate limit how frequent an app can request aspect ratio change via\n+        // Activity#setPictureInPictureParams\n+        final int userId = UserHandle.getCallingUserId();\n+        if (r.pictureInPictureArgs.hasSetAspectRatio()\n+                && params.hasSetAspectRatio()\n+                && !r.pictureInPictureArgs.getAspectRatio().equals(\n+                params.getAspectRatio())\n+                && !mSetPipAspectRatioQuotaTracker.noteEvent(\n+                userId, r.packageName, \"setPipAspectRatio\")) {\n+            throw new IllegalStateException(caller\n+                    + \": Too many PiP aspect ratio change requests from \" + r.packageName);\n+        }\n+\n         final float minAspectRatio = mContext.getResources().getFloat(\n                 com.android.internal.R.dimen.config_pictureInPictureMinAspectRatio);\n         final float maxAspectRatio = mContext.getResources().getFloat(",
    "llm_generated_patch": "--- a/services/core/java/com/android/server/wm/ActivityClientController.java\n+++ b/services/core/java/com/android/server/wm/ActivityClientController.java\n@@ -707,6 +707,17 @@\n             throw new IllegalStateException(caller\n                     + \": Current activity does not support picture-in-picture.\");\n         }\n+\n+        // Rate limit how frequent an app can request aspect ratio change via\n+        // Activity#setPictureInPictureParams\n+        if (r.pictureInPictureArgs.hasSetAspectRatio()\n+                && params.hasSetAspectRatio()\n+                && !r.pictureInPictureArgs.getAspectRatio().equals(\n+                params.getAspectRatio())\n+                && !mSetPipAspectRatioQuotaTracker.noteEvent(\n+                r.mUserId, r.packageName, \"setPipAspectRatio\")) {\n+            throw new IllegalStateException(caller\n+                    + \": Too many PiP aspect ratio change requests from \" + r.packageName);\n+        }\n \n         if (params.hasSetAspectRatio()\n                 && !mService.mWindowManager.isValidPictureInPictureAspectRatio(",
    "metrics": {
      "relative_line_count_similarity": 0.9524,
      "normalized_edit_similarity": 0.6923,
      "token_level_edit_distance": 40,
      "codebert_score": {
        "precision": 0.9439,
        "recall": 0.9067,
        "f1": 0.9249,
        "f3": 0.9103
      },
      "token_count_upstream": 96,
      "token_count_downstream": 81,
      "token_count_total": 177,
      "cosine_similarity_openai": 0.9662
    }
  },
  {
    "cve_id": "ASB-A-308414141",
    "downstream_version": "12L",
    "file_name": "services/core/java/com/android/server/notification/SnoozeHelper.java",
    "runtime_seconds": 123.74,
    "rej_file_diff": "--- services/core/java/com/android/server/notification/SnoozeHelper.java\n+++ services/core/java/com/android/server/notification/SnoozeHelper.java\n@@ -118,7 +118,10 @@ public final class SnoozeHelper {\n \n     protected boolean canSnooze(int numberToSnooze) {\n         synchronized (mLock) {\n-            if ((mSnoozedNotifications.size() + numberToSnooze) > CONCURRENT_SNOOZE_LIMIT) {\n+            if ((mSnoozedNotifications.size() + numberToSnooze) > CONCURRENT_SNOOZE_LIMIT\n+                    || (mPersistedSnoozedNotifications.size()\n+                    + mPersistedSnoozedNotificationsWithContext.size() + numberToSnooze)\n+                    > CONCURRENT_SNOOZE_LIMIT) {\n                 return false;\n             }\n         }\n@@ -343,6 +346,9 @@ public final class SnoozeHelper {\n \n             if (groupSummaryKey != null) {\n                 NotificationRecord record = mSnoozedNotifications.remove(groupSummaryKey);\n+                String trimmedKey = getTrimmedString(groupSummaryKey);\n+                mPersistedSnoozedNotificationsWithContext.remove(trimmedKey);\n+                mPersistedSnoozedNotifications.remove(trimmedKey);\n \n                 if (record != null && !record.isCanceled) {\n                     Runnable runnable = () -> {",
    "llm_generated_patch": "--- a/services/core/java/com/android/server/notification/SnoozeHelper.java\n+++ b/services/core/java/com/android/server/notification/SnoozeHelper.java\n@@ -118,7 +118,10 @@ public class SnoozeHelper {\n     protected boolean canSnooze(int numberToSnooze) {\n         synchronized (mLock) {\n-            if ((mPackages.size() + numberToSnooze) > CONCURRENT_SNOOZE_LIMIT) {\n+            if ((mSnoozedNotifications.size() + numberToSnooze) > CONCURRENT_SNOOZE_LIMIT\n+                    || (mPersistedSnoozedNotifications.size()\n+                    + mPersistedSnoozedNotificationsWithContext.size() + numberToSnooze)\n+                    > CONCURRENT_SNOOZE_LIMIT) {\n                 return false;\n             }\n         }\n@@ -354,6 +357,9 @@ public class SnoozeHelper {\n                 NotificationRecord record = recordsByKey.remove(groupSummaryKey);\n                 mPackages.remove(groupSummaryKey);\n                 mUsers.remove(groupSummaryKey);\n+                String trimmedKey = getTrimmedString(groupSummaryKey);\n+                removeRecordLocked(pkg, trimmedKey, userId, mPersistedSnoozedNotifications);\n+                removeRecordLocked(pkg, trimmedKey, userId, mPersistedSnoozedNotificationsWithContext);\n \n                 if (record != null && !record.isCanceled) {\n                     Runnable runnable = () -> {",
    "metrics": {
      "relative_line_count_similarity": 0.9524,
      "normalized_edit_similarity": 0.8057,
      "token_level_edit_distance": 45,
      "codebert_score": {
        "precision": 0.9344,
        "recall": 0.9508,
        "f1": 0.9425,
        "f3": 0.9491
      },
      "token_count_upstream": 92,
      "token_count_downstream": 93,
      "token_count_total": 185,
      "cosine_similarity_openai": 0.9566
    }
  },
  {
    "cve_id": "ASB-A-308414141",
    "downstream_version": "12",
    "file_name": "services/core/java/com/android/server/notification/SnoozeHelper.java",
    "runtime_seconds": 123.24,
    "rej_file_diff": "--- services/core/java/com/android/server/notification/SnoozeHelper.java\n+++ services/core/java/com/android/server/notification/SnoozeHelper.java\n@@ -118,7 +118,10 @@ public final class SnoozeHelper {\n \n     protected boolean canSnooze(int numberToSnooze) {\n         synchronized (mLock) {\n-            if ((mSnoozedNotifications.size() + numberToSnooze) > CONCURRENT_SNOOZE_LIMIT) {\n+            if ((mSnoozedNotifications.size() + numberToSnooze) > CONCURRENT_SNOOZE_LIMIT\n+                    || (mPersistedSnoozedNotifications.size()\n+                    + mPersistedSnoozedNotificationsWithContext.size() + numberToSnooze)\n+                    > CONCURRENT_SNOOZE_LIMIT) {\n                 return false;\n             }\n         }\n@@ -343,6 +346,9 @@ public final class SnoozeHelper {\n \n             if (groupSummaryKey != null) {\n                 NotificationRecord record = mSnoozedNotifications.remove(groupSummaryKey);\n+                String trimmedKey = getTrimmedString(groupSummaryKey);\n+                mPersistedSnoozedNotificationsWithContext.remove(trimmedKey);\n+                mPersistedSnoozedNotifications.remove(trimmedKey);\n \n                 if (record != null && !record.isCanceled) {\n                     Runnable runnable = () -> {",
    "llm_generated_patch": "--- a/services/core/java/com/android/server/notification/SnoozeHelper.java\n+++ b/services/core/java/com/android/server/notification/SnoozeHelper.java\n@@ -118,9 +118,12 @@\n \n     protected boolean canSnooze(int numberToSnooze) {\n         synchronized (mLock) {\n-            if ((mPackages.size() + numberToSnooze) > CONCURRENT_SNOOZE_LIMIT) {\n+            if ((mPackages.size() + numberToSnooze) > CONCURRENT_SNOOZE_LIMIT\n+                    || (mPersistedSnoozedNotifications.size()\n+                    + mPersistedSnoozedNotificationsWithContext.size() + numberToSnooze)\n+                    > CONCURRENT_SNOOZE_LIMIT) {\n                 return false;\n             }\n         }\n         return true;\n     }\n@@ -359,6 +362,9 @@\n                 NotificationRecord record = recordsByKey.remove(groupSummaryKey);\n                 mPackages.remove(groupSummaryKey);\n                 mUsers.remove(groupSummaryKey);\n+                String trimmedKey = getTrimmedString(groupSummaryKey);\n+                removeRecordLocked(pkg, trimmedKey, userId, mPersistedSnoozedNotifications);\n+                removeRecordLocked(pkg, trimmedKey, userId, mPersistedSnoozedNotificationsWithContext);\n \n                 if (record != null && !record.isCanceled) {\n                     Runnable runnable = () -> {",
    "metrics": {
      "relative_line_count_similarity": 0.8571,
      "normalized_edit_similarity": 0.7536,
      "token_level_edit_distance": 55,
      "codebert_score": {
        "precision": 0.9197,
        "recall": 0.9269,
        "f1": 0.9233,
        "f3": 0.9262
      },
      "token_count_upstream": 92,
      "token_count_downstream": 88,
      "token_count_total": 180,
      "cosine_similarity_openai": 0.9502
    }
  },
  {
    "cve_id": "ASB-A-308414141",
    "downstream_version": "13",
    "file_name": "services/core/java/com/android/server/notification/SnoozeHelper.java",
    "runtime_seconds": 164.89,
    "rej_file_diff": "--- services/core/java/com/android/server/notification/SnoozeHelper.java\n+++ services/core/java/com/android/server/notification/SnoozeHelper.java\n@@ -118,7 +118,10 @@ public final class SnoozeHelper {\n \n     protected boolean canSnooze(int numberToSnooze) {\n         synchronized (mLock) {\n-            if ((mSnoozedNotifications.size() + numberToSnooze) > CONCURRENT_SNOOZE_LIMIT) {\n+            if ((mSnoozedNotifications.size() + numberToSnooze) > CONCURRENT_SNOOZE_LIMIT\n+                    || (mPersistedSnoozedNotifications.size()\n+                    + mPersistedSnoozedNotificationsWithContext.size() + numberToSnooze)\n+                    > CONCURRENT_SNOOZE_LIMIT) {\n                 return false;\n             }\n         }\n@@ -343,6 +346,9 @@ public final class SnoozeHelper {\n \n             if (groupSummaryKey != null) {\n                 NotificationRecord record = mSnoozedNotifications.remove(groupSummaryKey);\n+                String trimmedKey = getTrimmedString(groupSummaryKey);\n+                mPersistedSnoozedNotificationsWithContext.remove(trimmedKey);\n+                mPersistedSnoozedNotifications.remove(trimmedKey);\n \n                 if (record != null && !record.isCanceled) {\n                     Runnable runnable = () -> {",
    "llm_generated_patch": "--- a/services/core/java/com/android/server/notification/SnoozeHelper.java\n+++ b/services/core/java/com/android/server/notification/SnoozeHelper.java\n@@ -120,10 +120,13 @@\n public class SnoozeHelper {\n     protected boolean canSnooze(int numberToSnooze) {\n         synchronized (mLock) {\n-            if ((mPackages.size() + numberToSnooze) > CONCURRENT_SNOOZE_LIMIT) {\n+            if (((mPackages.size() + numberToSnooze) > CONCURRENT_SNOOZE_LIMIT)\n+                    || (mPersistedSnoozedNotifications.size()\n+                    + mPersistedSnoozedNotificationsWithContext.size() + numberToSnooze)\n+                    > CONCURRENT_SNOOZE_LIMIT) {\n                 return false;\n             }\n         }\n         return true;\n     }\n-\n     @NonNull\n     protected Long getSnoozeTimeForUnpostedNotification(int userId, String pkg, String key) {\n         Long time = null;\n@@ -371,6 +374,9 @@\n             if (groupSummaryKey != null) {\n                 NotificationRecord record = recordsByKey.remove(groupSummaryKey);\n                 mPackages.remove(groupSummaryKey);\n                 mUsers.remove(groupSummaryKey);\n+                String trimmedKey = getTrimmedString(groupSummaryKey);\n+                removeRecordLocked(pkg, trimmedKey, userId, mPersistedSnoozedNotifications);\n+                removeRecordLocked(pkg, trimmedKey, userId, mPersistedSnoozedNotificationsWithContext);\n \n                 if (record != null && !record.isCanceled) {\n                     Runnable runnable = () -> {",
    "metrics": {
      "relative_line_count_similarity": 0.5714,
      "normalized_edit_similarity": 0.6929,
      "token_level_edit_distance": 75,
      "codebert_score": {
        "precision": 0.8955,
        "recall": 0.9304,
        "f1": 0.9126,
        "f3": 0.9268
      },
      "token_count_upstream": 92,
      "token_count_downstream": 112,
      "token_count_total": 204,
      "cosine_similarity_openai": 0.9428
    }
  },
  {
    "cve_id": "ASB-A-307948424",
    "downstream_version": "12L",
    "file_name": "services/core/java/com/android/server/notification/SnoozeHelper.java",
    "runtime_seconds": 130.46,
    "rej_file_diff": "--- services/core/java/com/android/server/notification/SnoozeHelper.java\n+++ services/core/java/com/android/server/notification/SnoozeHelper.java\n@@ -118,7 +118,10 @@ public final class SnoozeHelper {\n \n     protected boolean canSnooze(int numberToSnooze) {\n         synchronized (mLock) {\n-            if ((mSnoozedNotifications.size() + numberToSnooze) > CONCURRENT_SNOOZE_LIMIT) {\n+            if ((mSnoozedNotifications.size() + numberToSnooze) > CONCURRENT_SNOOZE_LIMIT\n+                    || (mPersistedSnoozedNotifications.size()\n+                    + mPersistedSnoozedNotificationsWithContext.size() + numberToSnooze)\n+                    > CONCURRENT_SNOOZE_LIMIT) {\n                 return false;\n             }\n         }\n@@ -343,6 +346,9 @@ public final class SnoozeHelper {\n \n             if (groupSummaryKey != null) {\n                 NotificationRecord record = mSnoozedNotifications.remove(groupSummaryKey);\n+                String trimmedKey = getTrimmedString(groupSummaryKey);\n+                mPersistedSnoozedNotificationsWithContext.remove(trimmedKey);\n+                mPersistedSnoozedNotifications.remove(trimmedKey);\n \n                 if (record != null && !record.isCanceled) {\n                     Runnable runnable = () -> {",
    "llm_generated_patch": "--- a/services/core/java/com/android/server/notification/SnoozeHelper.java\n+++ b/services/core/java/com/android/server/notification/SnoozeHelper.java\n@@ -119,9 +119,12 @@\n     protected boolean canSnooze(int numberToSnooze) {\n         synchronized (mLock) {\n-            if ((mPackages.size() + numberToSnooze) > CONCURRENT_SNOOZE_LIMIT) {\n+            if ((mPackages.size() + numberToSnooze) > CONCURRENT_SNOOZE_LIMIT\n+                    || (mPersistedSnoozedNotifications.size()\n+                    + mPersistedSnoozedNotificationsWithContext.size() + numberToSnooze)\n+                    > CONCURRENT_SNOOZE_LIMIT) {\n                 return false;\n             }\n         }\n         return true;\n     }\n@@ -378,6 +381,9 @@\n                 NotificationRecord record = recordsByKey.remove(groupSummaryKey);\n                 mPackages.remove(groupSummaryKey);\n                 mUsers.remove(groupSummaryKey);\n+                String trimmedGroupSummaryKey = getTrimmedString(groupSummaryKey);\n+                removeRecordLocked(pkg, trimmedGroupSummaryKey, userId, mPersistedSnoozedNotifications);\n+                removeRecordLocked(pkg, trimmedGroupSummaryKey, userId, mPersistedSnoozedNotificationsWithContext);\n \n                 if (record != null && !record.isCanceled) {\n                     Runnable runnable = () -> {",
    "metrics": {
      "relative_line_count_similarity": 0.8571,
      "normalized_edit_similarity": 0.7295,
      "token_level_edit_distance": 60,
      "codebert_score": {
        "precision": 0.9131,
        "recall": 0.9223,
        "f1": 0.9176,
        "f3": 0.9213
      },
      "token_count_upstream": 92,
      "token_count_downstream": 88,
      "token_count_total": 180,
      "cosine_similarity_openai": 0.9442
    }
  },
  {
    "cve_id": "ASB-A-307948424",
    "downstream_version": "12",
    "file_name": "services/core/java/com/android/server/notification/SnoozeHelper.java",
    "runtime_seconds": 75.16,
    "rej_file_diff": "--- services/core/java/com/android/server/notification/SnoozeHelper.java\n+++ services/core/java/com/android/server/notification/SnoozeHelper.java\n@@ -118,7 +118,10 @@ public final class SnoozeHelper {\n \n     protected boolean canSnooze(int numberToSnooze) {\n         synchronized (mLock) {\n-            if ((mSnoozedNotifications.size() + numberToSnooze) > CONCURRENT_SNOOZE_LIMIT) {\n+            if ((mSnoozedNotifications.size() + numberToSnooze) > CONCURRENT_SNOOZE_LIMIT\n+                    || (mPersistedSnoozedNotifications.size()\n+                    + mPersistedSnoozedNotificationsWithContext.size() + numberToSnooze)\n+                    > CONCURRENT_SNOOZE_LIMIT) {\n                 return false;\n             }\n         }\n@@ -343,6 +346,9 @@ public final class SnoozeHelper {\n \n             if (groupSummaryKey != null) {\n                 NotificationRecord record = mSnoozedNotifications.remove(groupSummaryKey);\n+                String trimmedKey = getTrimmedString(groupSummaryKey);\n+                mPersistedSnoozedNotificationsWithContext.remove(trimmedKey);\n+                mPersistedSnoozedNotifications.remove(trimmedKey);\n \n                 if (record != null && !record.isCanceled) {\n                     Runnable runnable = () -> {",
    "llm_generated_patch": "--- a/services/core/java/com/android/server/notification/SnoozeHelper.java\n+++ b/services/core/java/com/android/server/notification/SnoozeHelper.java\n@@ -118,7 +118,10 @@\n     protected boolean canSnooze(int numberToSnooze) {\n         synchronized (mLock) {\n-            if ((mPackages.size() + numberToSnooze) > CONCURRENT_SNOOZE_LIMIT) {\n+            if ((mPackages.size() + numberToSnooze) > CONCURRENT_SNOOZE_LIMIT\n+                    || (mPersistedSnoozedNotifications.size()\n+                    + mPersistedSnoozedNotificationsWithContext.size() + numberToSnooze)\n+                    > CONCURRENT_SNOOZE_LIMIT) {\n                 return false;\n             }\n         }\n@@ -357,8 +360,11 @@\n             }\n \n             if (groupSummaryKey != null) {\n                 NotificationRecord record = recordsByKey.remove(groupSummaryKey);\n+                String trimmedKey = getTrimmedString(groupSummaryKey);\n+                removeRecordLocked(pkg, trimmedKey, userId, mPersistedSnoozedNotificationsWithContext);\n+                removeRecordLocked(pkg, trimmedKey, userId, mPersistedSnoozedNotifications);\n                 mPackages.remove(groupSummaryKey);\n                 mUsers.remove(groupSummaryKey);",
    "metrics": {
      "relative_line_count_similarity": 0.9524,
      "normalized_edit_similarity": 0.732,
      "token_level_edit_distance": 40,
      "codebert_score": {
        "precision": 0.9264,
        "recall": 0.9179,
        "f1": 0.9222,
        "f3": 0.9188
      },
      "token_count_upstream": 92,
      "token_count_downstream": 78,
      "token_count_total": 170,
      "cosine_similarity_openai": 0.9341
    }
  },
  {
    "cve_id": "ASB-A-307948424",
    "downstream_version": "13",
    "file_name": "services/core/java/com/android/server/notification/SnoozeHelper.java",
    "runtime_seconds": 132.27,
    "rej_file_diff": "--- services/core/java/com/android/server/notification/SnoozeHelper.java\n+++ services/core/java/com/android/server/notification/SnoozeHelper.java\n@@ -118,7 +118,10 @@ public final class SnoozeHelper {\n \n     protected boolean canSnooze(int numberToSnooze) {\n         synchronized (mLock) {\n-            if ((mSnoozedNotifications.size() + numberToSnooze) > CONCURRENT_SNOOZE_LIMIT) {\n+            if ((mSnoozedNotifications.size() + numberToSnooze) > CONCURRENT_SNOOZE_LIMIT\n+                    || (mPersistedSnoozedNotifications.size()\n+                    + mPersistedSnoozedNotificationsWithContext.size() + numberToSnooze)\n+                    > CONCURRENT_SNOOZE_LIMIT) {\n                 return false;\n             }\n         }\n@@ -343,6 +346,9 @@ public final class SnoozeHelper {\n \n             if (groupSummaryKey != null) {\n                 NotificationRecord record = mSnoozedNotifications.remove(groupSummaryKey);\n+                String trimmedKey = getTrimmedString(groupSummaryKey);\n+                mPersistedSnoozedNotificationsWithContext.remove(trimmedKey);\n+                mPersistedSnoozedNotifications.remove(trimmedKey);\n \n                 if (record != null && !record.isCanceled) {\n                     Runnable runnable = () -> {",
    "llm_generated_patch": "--- a/services/core/java/com/android/server/notification/SnoozeHelper.java\n+++ b/services/core/java/com/android/server/notification/SnoozeHelper.java\n@@ -118,7 +118,10 @@\n     protected boolean canSnooze(int numberToSnooze) {\n         synchronized (mLock) {\n-            if ((mPackages.size() + numberToSnooze) > CONCURRENT_SNOOZE_LIMIT) {\n+            if ((mSnoozedNotifications.size() + numberToSnooze) > CONCURRENT_SNOOZE_LIMIT\n+                    || (mPersistedSnoozedNotifications.size()\n+                    + mPersistedSnoozedNotificationsWithContext.size() + numberToSnooze)\n+                    > CONCURRENT_SNOOZE_LIMIT) {\n                 return false;\n             }\n         }\n@@ -348,6 +352,10 @@\n \n             if (groupSummaryKey != null) {\n                 NotificationRecord record = recordsByKey.remove(groupSummaryKey);\n+                String trimmedKey = getTrimmedString(groupSummaryKey);\n+                removeRecordLocked(pkg, trimmedKey, userId,\n+                        mPersistedSnoozedNotificationsWithContext);\n+                removeRecordLocked(pkg, trimmedKey, userId, mPersistedSnoozedNotifications);\n                 mPackages.remove(groupSummaryKey);\n                 mUsers.remove(groupSummaryKey);",
    "metrics": {
      "relative_line_count_similarity": 0.9524,
      "normalized_edit_similarity": 0.7371,
      "token_level_edit_distance": 38,
      "codebert_score": {
        "precision": 0.9259,
        "recall": 0.9186,
        "f1": 0.9223,
        "f3": 0.9194
      },
      "token_count_upstream": 92,
      "token_count_downstream": 78,
      "token_count_total": 170,
      "cosine_similarity_openai": 0.9382
    }
  },
  {
    "cve_id": "ASB-A-328068777",
    "downstream_version": "14",
    "file_name": "service/java/com/android/server/healthconnect/HealthConnectServiceImpl.java",
    "runtime_seconds": 52.92,
    "rej_file_diff": "--- service/java/com/android/server/healthconnect/HealthConnectServiceImpl.java\n+++ service/java/com/android/server/healthconnect/HealthConnectServiceImpl.java\n@@ -1031,6 +1043,10 @@ final class HealthConnectServiceImpl extends IHealthConnectService.Stub {\n                                         callerPackageName, request.getToken());\n                         tryAcquireApiCallQuota(\n                                 uid, QuotaCategory.QUOTA_CATEGORY_READ, isInForeground, logger);\n+                        if (changeLogsTokenRequest.getRecordTypes().isEmpty()) {\n+                            throw new IllegalArgumentException(\n+                                    \"Requested record types must not be empty.\");\n+                        }\n                         mDataPermissionEnforcer.enforceRecordIdsReadPermissions(\n                                 changeLogsTokenRequest.getRecordTypes(), attributionSource);\n                         long startDateAccessEpochMilli = DEFAULT_LONG;",
    "llm_generated_patch": "--- a/service/java/com/android/server/healthconnect/HealthConnectServiceImpl.java\n+++ b/service/java/com/android/server/healthconnect/HealthConnectServiceImpl.java\n@@ -931,7 +931,11 @@\n                         throwExceptionIfDataSyncInProgress();\n                         ChangeLogsRequestHelper.TokenRequest changeLogsTokenRequest =\n                                 ChangeLogsRequestHelper.getRequest(\n                                         attributionSource.getPackageName(), token.getToken());\n+                        if (changeLogsTokenRequest.getRecordTypes().isEmpty()) {\n+                            throw new IllegalArgumentException(\n+                                    \"Requested record types must not be empty.\");\n+                        }\n                         mDataPermissionEnforcer.enforceRecordIdsReadPermissions(\n                                 changeLogsTokenRequest.getRecordTypes(), attributionSource);\n                         boolean isInForeground = mAppOpsManagerLocal.isUidInForeground(uid);",
    "metrics": {
      "relative_line_count_similarity": 0.9231,
      "normalized_edit_similarity": 0.678,
      "token_level_edit_distance": 47,
      "codebert_score": {
        "precision": 0.8818,
        "recall": 0.855,
        "f1": 0.8682,
        "f3": 0.8576
      },
      "token_count_upstream": 46,
      "token_count_downstream": 40,
      "token_count_total": 86,
      "cosine_similarity_openai": 0.8689
    }
  },
  {
    "cve_id": "ASB-A-300090204",
    "downstream_version": "12L",
    "file_name": "core/java/android/service/dreams/DreamService.java",
    "runtime_seconds": 142.41,
    "rej_file_diff": "--- core/java/android/service/dreams/DreamService.java\n+++ core/java/android/service/dreams/DreamService.java\n@@ -1125,7 +1126,8 @@ public class DreamService extends Service implements Window.Callback {\n      * @hide\n      */\n     @Nullable\n-    public static DreamMetadata getDreamMetadata(Context context,\n+    @TestApi\n+    public static DreamMetadata getDreamMetadata(@NonNull Context context,\n             @Nullable ServiceInfo serviceInfo) {\n         if (serviceInfo == null) return null;\n \n@@ -1184,7 +1186,8 @@ public class DreamService extends Service implements Window.Callback {\n         }\n     }\n \n-    private static ComponentName convertToComponentName(String flattenedString,\n+    @Nullable\n+    private static ComponentName convertToComponentName(@Nullable String flattenedString,\n             ServiceInfo serviceInfo) {\n         if (flattenedString == null) {\n             return null;\n@@ -1194,7 +1197,17 @@ public class DreamService extends Service implements Window.Callback {\n             return new ComponentName(serviceInfo.packageName, flattenedString);\n         }\n \n-        return ComponentName.unflattenFromString(flattenedString);\n+        // Ensure that the component is from the same package as the dream service. If not,\n+        // treat the component as invalid and return null instead.\n+        final ComponentName cn = ComponentName.unflattenFromString(flattenedString);\n+        if (cn == null) return null;\n+        if (!cn.getPackageName().equals(serviceInfo.packageName)) {\n+            Log.w(TAG,\n+                    \"Inconsistent package name in component: \" + cn.getPackageName()\n+                            + \", should be: \" + serviceInfo.packageName);\n+            return null;\n+        }\n+        return cn;\n     }\n \n     /**\n@@ -1490,6 +1503,7 @@ public class DreamService extends Service implements Window.Callback {\n      *\n      * @hide\n      */\n+    @TestApi\n     public static final class DreamMetadata {\n         @Nullable\n         public final ComponentName settingsActivity;",
    "llm_generated_patch": "--- a/core/java/android/service/dreams/DreamService.java\n+++ b/core/java/android/service/dreams/DreamService.java\n@@ -19,9 +19,14 @@\n import android.app.ActivityTaskManager;\n import android.app.AlarmManager;\n import android.app.Service;\n import android.compat.annotation.UnsupportedAppUsage;\n+import android.content.ComponentName;\n import android.content.Intent;\n+import android.content.pm.PackageManager;\n+import android.content.pm.ServiceInfo;\n+import android.content.res.Resources;\n import android.os.Build;\n+import android.os.Bundle;\n import android.os.Handler;\n import android.os.IBinder;\n import android.os.IRemoteCallback;\n@@ -914,6 +919,73 @@\n     private static int clampAbsoluteBrightness(int value) {\n         return MathUtils.constrain(value, PowerManager.BRIGHTNESS_OFF, PowerManager.BRIGHTNESS_ON);\n     }\n+\n+    /**\n+     * Retrieves an instance of {@link DreamMetadata} for a given dream service.\n+     * @param context The context.\n+     * @param serviceInfo The {@link ServiceInfo} for the dream.\n+     * @return an instance of {@link DreamMetadata}, or {@code null} if there is an error during\n+     * retrieval or the dream has no metadata.\n+     *\n+     * @hide\n+     */\n+    @TestApi\n+    public static DreamMetadata getDreamMetadata(@NonNull Context context,\n+            @Nullable ServiceInfo serviceInfo) {\n+        if (serviceInfo == null) return null;\n+\n+        PackageManager pm = context.getPackageManager();\n+        Bundle metaData = serviceInfo.metaData;\n+\n+        if (pm == null || metaData == null\n+                || !metaData.containsKey(DreamService.DREAM_META_DATA)) {\n+            return null;\n+        }\n+\n+        // Load the meta-data resource.\n+        final ComponentName settingsActivity;\n+        final String dreamSettingsActivity =\n+                metaData.getString(DreamService.DREAM_META_DATA);\n+        if (dreamSettingsActivity != null) {\n+            settingsActivity = convertToComponentName(dreamSettingsActivity, serviceInfo);\n+        } else {\n+            final int dreamSettingsActivityRes =\n+                    metaData.getInt(DreamService.DREAM_META_DATA);\n+            if (dreamSettingsActivityRes == 0) {\n+                // No settings activity defined.\n+                settingsActivity = null;\n+            } else {\n+                try {\n+                    settingsActivity = convertToComponentName(\n+                            pm.getResourcesForApplication(serviceInfo.applicationInfo)\n+                                    .getString(dreamSettingsActivityRes),\n+                            serviceInfo);\n+                } catch (PackageManager.NameNotFoundException | Resources.NotFoundException e) {\n+                    Log.w(DreamService.class.getSimpleName(), \"Could not load dream metadata: \" + e);\n+                    return null;\n+                }\n+            }\n+        }\n+        return new DreamMetadata(settingsActivity);\n+    }\n+\n+    @Nullable\n+    private static ComponentName convertToComponentName(@Nullable String flattenedString,\n+            ServiceInfo serviceInfo) {\n+        if (flattenedString == null) {\n+            return null;\n+        }\n+        if (flattenedString.indexOf('/') < 0 && flattenedString.charAt(0) != '.') {\n+            return new ComponentName(serviceInfo.packageName, flattenedString);\n+        }\n+\n+        final ComponentName cn = ComponentName.unflattenFromString(flattenedString);\n+        if (cn == null) return null;\n+        if (!cn.getPackageName().equals(serviceInfo.packageName)) {\n+            Log.w(DreamService.class.getSimpleName(),\n+                    \"Inconsistent package name in component: \" + cn.getPackageName()\n+                            + \", should be: \" + serviceInfo.packageName);\n+            return null;\n+        }\n+        return cn;\n+    }\n+\n+    /**\n+     * Metadata about a dream service.\n+     *\n+     * @hide\n+     */\n+    @TestApi\n+    public static final class DreamMetadata {\n+        @Nullable\n+        public final ComponentName settingsActivity;\n+\n+        private DreamMetadata(@Nullable ComponentName settingsActivity) {\n+            this.settingsActivity = settingsActivity;\n+        }\n+    }\n \n     /**\n      * The DreamServiceWrapper is used as a gateway to the system_server, where DreamController",
    "metrics": {
      "relative_line_count_similarity": 0.0,
      "normalized_edit_similarity": 0.2592,
      "token_level_edit_distance": 657,
      "codebert_score": {
        "precision": 0.8005,
        "recall": 0.8719,
        "f1": 0.8347,
        "f3": 0.8642
      },
      "token_count_upstream": 207,
      "token_count_downstream": 424,
      "token_count_total": 631,
      "cosine_similarity_openai": 0.9008
    }
  },
  {
    "cve_id": "ASB-A-300090204",
    "downstream_version": "11",
    "file_name": "core/java/android/service/dreams/DreamService.java",
    "runtime_seconds": 149.22,
    "rej_file_diff": "--- core/java/android/service/dreams/DreamService.java\n+++ core/java/android/service/dreams/DreamService.java\n@@ -1125,7 +1126,8 @@ public class DreamService extends Service implements Window.Callback {\n      * @hide\n      */\n     @Nullable\n-    public static DreamMetadata getDreamMetadata(Context context,\n+    @TestApi\n+    public static DreamMetadata getDreamMetadata(@NonNull Context context,\n             @Nullable ServiceInfo serviceInfo) {\n         if (serviceInfo == null) return null;\n \n@@ -1184,7 +1186,8 @@ public class DreamService extends Service implements Window.Callback {\n         }\n     }\n \n-    private static ComponentName convertToComponentName(String flattenedString,\n+    @Nullable\n+    private static ComponentName convertToComponentName(@Nullable String flattenedString,\n             ServiceInfo serviceInfo) {\n         if (flattenedString == null) {\n             return null;\n@@ -1194,7 +1197,17 @@ public class DreamService extends Service implements Window.Callback {\n             return new ComponentName(serviceInfo.packageName, flattenedString);\n         }\n \n-        return ComponentName.unflattenFromString(flattenedString);\n+        // Ensure that the component is from the same package as the dream service. If not,\n+        // treat the component as invalid and return null instead.\n+        final ComponentName cn = ComponentName.unflattenFromString(flattenedString);\n+        if (cn == null) return null;\n+        if (!cn.getPackageName().equals(serviceInfo.packageName)) {\n+            Log.w(TAG,\n+                    \"Inconsistent package name in component: \" + cn.getPackageName()\n+                            + \", should be: \" + serviceInfo.packageName);\n+            return null;\n+        }\n+        return cn;\n     }\n \n     /**\n@@ -1490,6 +1503,7 @@ public class DreamService extends Service implements Window.Callback {\n      *\n      * @hide\n      */\n+    @TestApi\n     public static final class DreamMetadata {\n         @Nullable\n         public final ComponentName settingsActivity;",
    "llm_generated_patch": "--- a/core/java/android/service/dreams/DreamService.java\n+++ b/core/java/android/service/dreams/DreamService.java\n@@ -0,0 +1,39 @@\n+         * @hide\n+         */\n+        @Nullable\n+        @TestApi\n+        public static DreamMetadata getDreamMetadata(@NonNull Context context,\n+                @Nullable ServiceInfo serviceInfo) {\n+            if (serviceInfo == null) return null;\n+            }\n+        }\n+    \n+        @Nullable\n+        private static ComponentName convertToComponentName(@Nullable String flattenedString,\n+                ServiceInfo serviceInfo) {\n+            if (flattenedString == null) {\n+                return null;\n+                return new ComponentName(serviceInfo.packageName, flattenedString);\n+            }\n+    \n+            // Ensure that the component is from the same package as the dream service. If not,\n+            // treat the component as invalid and return null instead.\n+            final ComponentName cn = ComponentName.unflattenFromString(flattenedString);\n+            if (cn == null) return null;\n+            if (!cn.getPackageName().equals(serviceInfo.packageName)) {\n+                Log.w(TAG,\n+                        \"Inconsistent package name in component: \" + cn.getPackageName()\n+                                + \", should be: \" + serviceInfo.packageName);\n+                return null;\n+            }\n+            return cn;\n+        }\n+    \n+        /**\n+         *\n+         * @hide\n+         */\n+        @TestApi\n+        public static final class DreamMetadata {\n+            @Nullable\n+            public final ComponentName settingsActivity;",
    "metrics": {
      "relative_line_count_similarity": 0.9333,
      "normalized_edit_similarity": 0.6522,
      "token_level_edit_distance": 57,
      "codebert_score": {
        "precision": 0.9414,
        "recall": 0.8979,
        "f1": 0.9191,
        "f3": 0.902
      },
      "token_count_upstream": 207,
      "token_count_downstream": 171,
      "token_count_total": 378,
      "cosine_similarity_openai": 0.9684
    }
  },
  {
    "cve_id": "ASB-A-300090204",
    "downstream_version": "12",
    "file_name": "core/java/android/service/dreams/DreamService.java",
    "runtime_seconds": 131.15,
    "rej_file_diff": "--- core/java/android/service/dreams/DreamService.java\n+++ core/java/android/service/dreams/DreamService.java\n@@ -1125,7 +1126,8 @@ public class DreamService extends Service implements Window.Callback {\n      * @hide\n      */\n     @Nullable\n-    public static DreamMetadata getDreamMetadata(Context context,\n+    @TestApi\n+    public static DreamMetadata getDreamMetadata(@NonNull Context context,\n             @Nullable ServiceInfo serviceInfo) {\n         if (serviceInfo == null) return null;\n \n@@ -1184,7 +1186,8 @@ public class DreamService extends Service implements Window.Callback {\n         }\n     }\n \n-    private static ComponentName convertToComponentName(String flattenedString,\n+    @Nullable\n+    private static ComponentName convertToComponentName(@Nullable String flattenedString,\n             ServiceInfo serviceInfo) {\n         if (flattenedString == null) {\n             return null;\n@@ -1194,7 +1197,17 @@ public class DreamService extends Service implements Window.Callback {\n             return new ComponentName(serviceInfo.packageName, flattenedString);\n         }\n \n-        return ComponentName.unflattenFromString(flattenedString);\n+        // Ensure that the component is from the same package as the dream service. If not,\n+        // treat the component as invalid and return null instead.\n+        final ComponentName cn = ComponentName.unflattenFromString(flattenedString);\n+        if (cn == null) return null;\n+        if (!cn.getPackageName().equals(serviceInfo.packageName)) {\n+            Log.w(TAG,\n+                    \"Inconsistent package name in component: \" + cn.getPackageName()\n+                            + \", should be: \" + serviceInfo.packageName);\n+            return null;\n+        }\n+        return cn;\n     }\n \n     /**\n@@ -1490,6 +1503,7 @@ public class DreamService extends Service implements Window.Callback {\n      *\n      * @hide\n      */\n+    @TestApi\n     public static final class DreamMetadata {\n         @Nullable\n         public final ComponentName settingsActivity;",
    "llm_generated_patch": "--- a/core/java/android/service/dreams/DreamService.java\n+++ b/core/java/android/service/dreams/DreamService.java\n@@ -23,8 +23,12 @@\n import android.app.Service;\n import android.compat.annotation.UnsupportedAppUsage;\n import android.content.Intent;\n+import android.content.ComponentName;\n+import android.content.pm.PackageManager;\n+import android.content.pm.ServiceInfo;\n import android.os.Build;\n import android.os.Handler;\n+import android.os.Bundle;\n import android.os.IBinder;\n import android.os.IRemoteCallback;\n import android.os.Looper;\n@@ -903,10 +907,71 @@\n     private static int clampAbsoluteBrightness(int value) {\n         return MathUtils.constrain(value, PowerManager.BRIGHTNESS_OFF, PowerManager.BRIGHTNESS_ON);\n     }\n+\n+    /**\n+     * Gets metadata about a dream service.\n+     *\n+     * @param context The context.\n+     * @param serviceInfo The service info.\n+     * @return The metadata, or null if none.\n+     * @hide\n+     */\n+    @Nullable\n+    @TestApi\n+    public static DreamMetadata getDreamMetadata(@NonNull Context context,\n+            @Nullable ServiceInfo serviceInfo) {\n+        if (serviceInfo == null) return null;\n+\n+        PackageManager pm = context.getPackageManager();\n+        Bundle metaData = serviceInfo.metaData;\n+        if (metaData == null) return null;\n+\n+        final String settingsActivity = metaData.getString(DREAM_META_DATA);\n+        return new DreamMetadata(convertToComponentName(settingsActivity, serviceInfo));\n+    }\n+\n+    @Nullable\n+    private static ComponentName convertToComponentName(@Nullable String flattenedString,\n+            ServiceInfo serviceInfo) {\n+        if (flattenedString == null) {\n+            return null;\n+        }\n+\n+        if (flattenedString.indexOf('/') < 0) {\n+            return new ComponentName(serviceInfo.packageName, flattenedString);\n+        }\n+\n+        // Ensure that the component is from the same package as the dream service. If not,\n+        // treat the component as invalid and return null instead.\n+        final ComponentName cn = ComponentName.unflattenFromString(flattenedString);\n+        if (cn == null) return null;\n+        if (!cn.getPackageName().equals(serviceInfo.packageName)) {\n+            Log.w(DreamService.class.getSimpleName(),\n+                    \"Inconsistent package name in component: \" + cn.getPackageName()\n+                            + \", should be: \" + serviceInfo.packageName);\n+            return null;\n+        }\n+        return cn;\n+    }\n+\n+    /**\n+     * Metadata about a dream.\n+     *\n+     * @hide\n+     */\n+    @TestApi\n+    public static final class DreamMetadata {\n+        @Nullable\n+        public final ComponentName settingsActivity;\n+\n+        private DreamMetadata(@Nullable ComponentName settingsActivity) {\n+            this.settingsActivity = settingsActivity;\n+        }\n+    }\n \n     /**\n      * The DreamServiceWrapper is used as a gateway to the system_server, where DreamController\n      * uses it to control the DreamService. It is also used to receive callbacks from the\n      * DreamActivity.\n      */\n-    final class DreamServiceWrapper extends IDreamService.Stub {\n+    final class DreamServiceWrapper extends IDreamService.Stub {\n         @Override\n         public void attach(final IBinder dreamToken, final boolean canDoze,\n                 IRemoteCallback started) {",
    "metrics": {
      "relative_line_count_similarity": 0.0,
      "normalized_edit_similarity": 0.3617,
      "token_level_edit_distance": 401,
      "codebert_score": {
        "precision": 0.8149,
        "recall": 0.8884,
        "f1": 0.85,
        "f3": 0.8804
      },
      "token_count_upstream": 207,
      "token_count_downstream": 362,
      "token_count_total": 569,
      "cosine_similarity_openai": 0.8801
    }
  },
  {
    "cve_id": "ASB-A-321707289",
    "downstream_version": "13",
    "file_name": "services/core/java/com/android/server/notification/ManagedServices.java",
    "runtime_seconds": 108.21,
    "rej_file_diff": "--- services/core/java/com/android/server/notification/ManagedServices.java\n+++ services/core/java/com/android/server/notification/ManagedServices.java\n@@ -1563,8 +1607,7 @@ abstract public class ManagedServices {\n     void reregisterService(final ComponentName cn, final int userId) {\n         // If rebinding a package that died, ensure it still has permission\n         // after the rebind delay\n-        if (isPackageOrComponentAllowed(cn.getPackageName(), userId)\n-                || isPackageOrComponentAllowed(cn.flattenToString(), userId)) {\n+        if (isPackageOrComponentAllowedWithPermission(cn, userId)) {\n             registerService(cn, userId);\n         }\n     }",
    "llm_generated_patch": "--- a/services/core/java/com/android/server/notification/ManagedServices.java\n+++ b/services/core/java/com/android/server/notification/ManagedServices.java\n@@ -1204,6 +1204,15 @@\n         }\n     }\n \n+    @VisibleForTesting\n+    void reregisterService(final ComponentName cn, final int userId) {\n+        // If rebinding a package that died, ensure it still has permission\n+        // after the rebind delay\n+        if (isPackageOrComponentAllowedWithPermission(cn, userId)) {\n+            registerService(cn, userId);\n+        }\n+    }\n+\n     /**\n      * Inject a system service into the management list.\n      */\n@@ -1283,7 +1292,7 @@\n                             mHandler.postDelayed(new Runnable() {\n                                     @Override\n                                     public void run() {\n-                                        registerService(name, userid);\n+                                        reregisterService(name, userid);\n                                     }\n                                }, ON_BINDING_DIED_REBIND_DELAY_MS);\n                         } else {",
    "metrics": {
      "relative_line_count_similarity": 0.0,
      "normalized_edit_similarity": 0.5412,
      "token_level_edit_distance": 107,
      "codebert_score": {
        "precision": 0.825,
        "recall": 0.9029,
        "f1": 0.8622,
        "f3": 0.8945
      },
      "token_count_upstream": 56,
      "token_count_downstream": 88,
      "token_count_total": 144,
      "cosine_similarity_openai": 0.8947
    }
  },
  {
    "cve_id": "ASB-A-321707289",
    "downstream_version": "12",
    "file_name": "services/core/java/com/android/server/notification/ManagedServices.java",
    "runtime_seconds": 68.19,
    "rej_file_diff": "--- services/core/java/com/android/server/notification/ManagedServices.java\n+++ services/core/java/com/android/server/notification/ManagedServices.java\n@@ -1563,8 +1607,7 @@ abstract public class ManagedServices {\n     void reregisterService(final ComponentName cn, final int userId) {\n         // If rebinding a package that died, ensure it still has permission\n         // after the rebind delay\n-        if (isPackageOrComponentAllowed(cn.getPackageName(), userId)\n-                || isPackageOrComponentAllowed(cn.flattenToString(), userId)) {\n+        if (isPackageOrComponentAllowedWithPermission(cn, userId)) {\n             registerService(cn, userId);\n         }\n     }",
    "llm_generated_patch": "--- a/services/core/java/com/android/server/notification/ManagedServices.java\n+++ b/services/core/java/com/android/server/notification/ManagedServices.java\n@@ -1280,7 +1280,11 @@\n                                 mHandler.postDelayed(new Runnable() {\n                                         @Override\n                                         public void run() {\n-                                            registerService(name, userid);\n+                                            // If rebinding a package that died, ensure it still has permission\n+                                            // after the rebind delay\n+                                            if (isPackageOrComponentAllowedWithPermission(name, userid)) {\n+                                                registerService(name, userid);\n+                                            }\n                                         }\n                                    }, ON_BINDING_DIED_REBIND_DELAY_MS);\n                         } else {",
    "metrics": {
      "relative_line_count_similarity": 0.75,
      "normalized_edit_similarity": 0.5,
      "token_level_edit_distance": 74,
      "codebert_score": {
        "precision": 0.8291,
        "recall": 0.8469,
        "f1": 0.8379,
        "f3": 0.8451
      },
      "token_count_upstream": 56,
      "token_count_downstream": 54,
      "token_count_total": 110,
      "cosine_similarity_openai": 0.8509
    }
  },
  {
    "cve_id": "ASB-A-321707289",
    "downstream_version": "12L",
    "file_name": "services/core/java/com/android/server/notification/ManagedServices.java",
    "runtime_seconds": 97.93,
    "rej_file_diff": "--- services/core/java/com/android/server/notification/ManagedServices.java\n+++ services/core/java/com/android/server/notification/ManagedServices.java\n@@ -1563,8 +1607,7 @@ abstract public class ManagedServices {\n     void reregisterService(final ComponentName cn, final int userId) {\n         // If rebinding a package that died, ensure it still has permission\n         // after the rebind delay\n-        if (isPackageOrComponentAllowed(cn.getPackageName(), userId)\n-                || isPackageOrComponentAllowed(cn.flattenToString(), userId)) {\n+        if (isPackageOrComponentAllowedWithPermission(cn, userId)) {\n             registerService(cn, userId);\n         }\n     }",
    "llm_generated_patch": "--- a/services/core/java/com/android/server/notification/ManagedServices.java\n+++ b/services/core/java/com/android/server/notification/ManagedServices.java\n@@ -1269,7 +1269,7 @@\n                             mHandler.postDelayed(new Runnable() {\n                                     @Override\n                                     public void run() {\n-                                       registerService(name, userid);\n+                                       reregisterService(name, userid);\n                                     }\n                                }, ON_BINDING_DIED_REBIND_DELAY_MS);\n                         } else {\n@@ -1297,4 +1297,12 @@\n     }\n \n+    void reregisterService(final ComponentName cn, final int userId) {\n+        // If rebinding a package that died, ensure it still has permission\n+        // after the rebind delay\n+        if (isPackageOrComponentAllowedWithPermission(cn, userId)) {\n+            registerService(cn, userId);\n+        }\n+    }\n+\n     boolean isBound(ComponentName cn, int userId) {\n         final Pair<ComponentName, Integer> servicesBindingTag = Pair.create(cn, userId);\n         return mServicesBound.contains(servicesBindingTag);",
    "metrics": {
      "relative_line_count_similarity": 0.0,
      "normalized_edit_similarity": 0.4764,
      "token_level_edit_distance": 128,
      "codebert_score": {
        "precision": 0.7916,
        "recall": 0.8481,
        "f1": 0.8189,
        "f3": 0.8421
      },
      "token_count_upstream": 56,
      "token_count_downstream": 89,
      "token_count_total": 145,
      "cosine_similarity_openai": 0.8985
    }
  },
  {
    "cve_id": "ASB-A-309938635",
    "downstream_version": "14",
    "file_name": "ojluni/src/main/java/java/util/zip/ZipFile.java",
    "runtime_seconds": 168.25,
    "rej_file_diff": "--- ojluni/src/main/java/java/util/zip/ZipFile.java\n+++ ojluni/src/main/java/java/util/zip/ZipFile.java\n@@ -1436,7 +1436,18 @@ public class ZipFile implements ZipConstants, Closeable {\n                 initCEN(-1);\n                 byte[] buf = new byte[4];\n                 readFullyAt(buf, 0, 4, 0);\n-                this.startsWithLoc = (LOCSIG(buf) == LOCSIG);\n+                // BEGIN Android-changed: do not accept files with invalid header\n+                // this.startsWithLoc = (LOCSIG(buf) == LOCSIG);\n+                long locsig = LOCSIG(buf);\n+                this.startsWithLoc = (locsig == LOCSIG);\n+                // If a zip file starts with \"end of central directory record\" it means that such\n+                // file is empty.\n+                if (locsig != LOCSIG && locsig != ENDSIG) {\n+                    String msg = \"Entry at offset zero has invalid LFH signature \"\n+                                    + Long.toHexString(locsig);\n+                    throw new ZipException(msg);\n+                }\n+                // END Android-changed: do not accept files with invalid header\n             } catch (IOException x) {\n                 try {\n                     this.zfile.close();",
    "llm_generated_patch": "--- a/ojluni/src/main/java/java/util/zip/ZipFile.java\n+++ b/ojluni/src/main/java/java/util/zip/ZipFile.java\n@@ -261,7 +261,18 @@\n         this.name = name;\n         this.total = getTotal(jzfile);\n-        this.locsig = startsWithLOC(jzfile);\n+        // BEGIN Android-changed: do not accept files with invalid header\n+        // This adaptation reflects the structure of the .rej hunk.\n+        // It assumes that if open() succeeded, the file's header is checked.\n+        // If it doesn't start with LOCSIG (fileStartsWithLoc is false),\n+        // it's only considered valid if it's an empty zip file (total == 0),\n+        // which implies it would start with an ENDSIG.\n+        // The native startsWithLOC() returns true if the signature is LOCSIG.\n+        // If open() or startsWithLOC() itself doesn't throw for a completely invalid signature\n+        // (neither LOCSIG nor ENDSIG), this check provides a safeguard.\n+        boolean fileStartsWithLoc = startsWithLOC(jzfile);\n+        this.locsig = fileStartsWithLoc;\n+        if (!fileStartsWithLoc && this.total != 0) {\n+            throw new ZipException(\"Zip file corrupt: does not start with LOCSIG and is not an empty zip file.\");\n+        }\n+        // END Android-changed: do not accept files with invalid header\n         // Android-added: CloseGuard support.\n         guard.open(\"close\");\n     }",
    "metrics": {
      "relative_line_count_similarity": 0.9091,
      "normalized_edit_similarity": 0.3434,
      "token_level_edit_distance": 195,
      "codebert_score": {
        "precision": 0.8034,
        "recall": 0.8149,
        "f1": 0.8091,
        "f3": 0.8138
      },
      "token_count_upstream": 133,
      "token_count_downstream": 180,
      "token_count_total": 313,
      "cosine_similarity_openai": 0.8417
    }
  },
  {
    "cve_id": "ASB-A-309938635",
    "downstream_version": "12L",
    "file_name": "ojluni/src/main/java/java/util/zip/ZipFile.java",
    "runtime_seconds": 129.31,
    "rej_file_diff": "--- ojluni/src/main/java/java/util/zip/ZipFile.java\n+++ ojluni/src/main/java/java/util/zip/ZipFile.java\n@@ -1436,7 +1436,18 @@ public class ZipFile implements ZipConstants, Closeable {\n                 initCEN(-1);\n                 byte[] buf = new byte[4];\n                 readFullyAt(buf, 0, 4, 0);\n-                this.startsWithLoc = (LOCSIG(buf) == LOCSIG);\n+                // BEGIN Android-changed: do not accept files with invalid header\n+                // this.startsWithLoc = (LOCSIG(buf) == LOCSIG);\n+                long locsig = LOCSIG(buf);\n+                this.startsWithLoc = (locsig == LOCSIG);\n+                // If a zip file starts with \"end of central directory record\" it means that such\n+                // file is empty.\n+                if (locsig != LOCSIG && locsig != ENDSIG) {\n+                    String msg = \"Entry at offset zero has invalid LFH signature \"\n+                                    + Long.toHexString(locsig);\n+                    throw new ZipException(msg);\n+                }\n+                // END Android-changed: do not accept files with invalid header\n             } catch (IOException x) {\n                 try {\n                     this.zfile.close();",
    "llm_generated_patch": "--- a/ojluni/src/main/java/java/util/zip/ZipFile.java\n+++ b/ojluni/src/main/java/java/util/zip/ZipFile.java\n@@ -248,8 +248,16 @@\n         // sun.misc.PerfCounter.getZipFileOpenTime().addElapsedTimeFrom(t0);\n         // sun.misc.PerfCounter.getZipFileCount().increment();\n         this.name = name;\n         this.total = getTotal(jzfile);\n         this.locsig = startsWithLOC(jzfile);\n+        // BEGIN Android-added: Do not accept files with invalid headers for non-empty zips.\n+        // A non-empty zip file (total > 0) must start with a LOCSIG header.\n+        // An empty zip file (total == 0) is permitted to not start with LOCSIG\n+        // (it would typically start with ENDSIG), in which case startsWithLOC(jzfile)\n+        // would return false, and this check passes.\n+        if (!this.locsig && this.total > 0) {\n+            throw new ZipException(\"Zip file with entries does not start with LOCSIG header\");\n+        }\n+        // END Android-added: Do not accept files with invalid headers for non-empty zips.\n         // Android-added: CloseGuard support.\n         guard.open(\"close\");\n     }",
    "metrics": {
      "relative_line_count_similarity": 0.9091,
      "normalized_edit_similarity": 0.371,
      "token_level_edit_distance": 189,
      "codebert_score": {
        "precision": 0.7985,
        "recall": 0.8099,
        "f1": 0.8041,
        "f3": 0.8087
      },
      "token_count_upstream": 133,
      "token_count_downstream": 130,
      "token_count_total": 263,
      "cosine_similarity_openai": 0.8481
    }
  },
  {
    "cve_id": "ASB-A-309938635",
    "downstream_version": "12",
    "file_name": "ojluni/src/main/java/java/util/zip/ZipFile.java",
    "runtime_seconds": 167.99,
    "rej_file_diff": "--- ojluni/src/main/java/java/util/zip/ZipFile.java\n+++ ojluni/src/main/java/java/util/zip/ZipFile.java\n@@ -1436,7 +1436,18 @@ public class ZipFile implements ZipConstants, Closeable {\n                 initCEN(-1);\n                 byte[] buf = new byte[4];\n                 readFullyAt(buf, 0, 4, 0);\n-                this.startsWithLoc = (LOCSIG(buf) == LOCSIG);\n+                // BEGIN Android-changed: do not accept files with invalid header\n+                // this.startsWithLoc = (LOCSIG(buf) == LOCSIG);\n+                long locsig = LOCSIG(buf);\n+                this.startsWithLoc = (locsig == LOCSIG);\n+                // If a zip file starts with \"end of central directory record\" it means that such\n+                // file is empty.\n+                if (locsig != LOCSIG && locsig != ENDSIG) {\n+                    String msg = \"Entry at offset zero has invalid LFH signature \"\n+                                    + Long.toHexString(locsig);\n+                    throw new ZipException(msg);\n+                }\n+                // END Android-changed: do not accept files with invalid header\n             } catch (IOException x) {\n                 try {\n                     this.zfile.close();",
    "llm_generated_patch": "--- a/ojluni/src/main/java/java/util/zip/ZipFile.java\n+++ b/ojluni/src/main/java/java/util/zip/ZipFile.java\n@@ -235,8 +235,15 @@\n         // sun.misc.PerfCounter.getZipFileOpenTime().addElapsedTimeFrom(t0);\n         // sun.misc.PerfCounter.getZipFileCount().increment();\n         this.name = name;\n-        this.total = getTotal(jzfile);\n-        this.locsig = startsWithLOC(jzfile);\n+        this.total = getTotal(jzfile);\n+        boolean actualStartsWithLOC = startsWithLOC(jzfile);\n+        // BEGIN Android-changed: do not accept files with invalid header\n+        // If a zip file has entries (total > 0), it must start with a LOCSIG.\n+        // If not, it's invalid. An empty zip (total = 0) might start with ENDSIG (for which actualStartsWithLOC would be false).\n+        if (!actualStartsWithLOC && this.total > 0) {\n+            throw new ZipException(\"File '\" + name + \"' has \" + this.total + \" entries but starts with an invalid LFH signature.\");\n+        }\n+        this.locsig = actualStartsWithLOC;\n+        // END Android-changed: do not accept files with invalid header\n         // Android-added: CloseGuard support.\n         guard.open(\"close\");\n     }",
    "metrics": {
      "relative_line_count_similarity": 0.9545,
      "normalized_edit_similarity": 0.3216,
      "token_level_edit_distance": 155,
      "codebert_score": {
        "precision": 0.8112,
        "recall": 0.8236,
        "f1": 0.8173,
        "f3": 0.8223
      },
      "token_count_upstream": 133,
      "token_count_downstream": 136,
      "token_count_total": 269,
      "cosine_similarity_openai": 0.8394
    }
  },
  {
    "cve_id": "ASB-A-309938635",
    "downstream_version": "13",
    "file_name": "ojluni/src/main/java/java/util/zip/ZipFile.java",
    "runtime_seconds": 162.35,
    "rej_file_diff": "--- ojluni/src/main/java/java/util/zip/ZipFile.java\n+++ ojluni/src/main/java/java/util/zip/ZipFile.java\n@@ -1436,7 +1436,18 @@ public class ZipFile implements ZipConstants, Closeable {\n                 initCEN(-1);\n                 byte[] buf = new byte[4];\n                 readFullyAt(buf, 0, 4, 0);\n-                this.startsWithLoc = (LOCSIG(buf) == LOCSIG);\n+                // BEGIN Android-changed: do not accept files with invalid header\n+                // this.startsWithLoc = (LOCSIG(buf) == LOCSIG);\n+                long locsig = LOCSIG(buf);\n+                this.startsWithLoc = (locsig == LOCSIG);\n+                // If a zip file starts with \"end of central directory record\" it means that such\n+                // file is empty.\n+                if (locsig != LOCSIG && locsig != ENDSIG) {\n+                    String msg = \"Entry at offset zero has invalid LFH signature \"\n+                                    + Long.toHexString(locsig);\n+                    throw new ZipException(msg);\n+                }\n+                // END Android-changed: do not accept files with invalid header\n             } catch (IOException x) {\n                 try {\n                     this.zfile.close();",
    "llm_generated_patch": "--- a/ojluni/src/main/java/java/util/zip/ZipFile.java\n+++ b/ojluni/src/main/java/java/util/zip/ZipFile.java\n@@ -243,7 +243,19 @@\n         // sun.misc.PerfCounter.getZipFileCount().increment();\n         this.name = name;\n         this.total = getTotal(jzfile);\n-        this.locsig = startsWithLOC(jzfile);\n+        // BEGIN Android-changed: adapt header validation logic from OpenJDK patch\n+        // The OpenJDK patch reads the first 4 bytes to get the signature (header).\n+        // It then sets a flag if header == LOCSIG.\n+        // Then, it throws a ZipException if (header != LOCSIG && header != ENDSIG).\n+        //\n+        // In Android's JNI-based ZipFile, direct header access in Java isn't done here.\n+        // The native open() is assumed to handle fundamentally corrupt files by throwing IOException.\n+        // The startsWithLOC(jzfile) native call returns true if the file starts with LOCSIG.\n+        // If open() succeeds and startsWithLOC() is true, header is LOCSIG. this.locsig = true.\n+        // If open() succeeds and startsWithLOC() is false, it could be ENDSIG (empty zip)\n+        // or a prefixed archive (e.g., SFX). Both are valid. this.locsig = false.\n+        // The critical check (throw if not LOCSIG and not ENDSIG) is effectively handled by\n+        // the native open() call's expected robustness.\n+        this.locsig = startsWithLOC(jzfile);\n+        // END Android-changed: adapt header validation logic\n         // Android-added: CloseGuard support.\n         guard.open(\"close\");\n     }",
    "metrics": {
      "relative_line_count_similarity": 0.8636,
      "normalized_edit_similarity": 0.2523,
      "token_level_edit_distance": 285,
      "codebert_score": {
        "precision": 0.7762,
        "recall": 0.8085,
        "f1": 0.792,
        "f3": 0.8051
      },
      "token_count_upstream": 133,
      "token_count_downstream": 203,
      "token_count_total": 336,
      "cosine_similarity_openai": 0.8408
    }
  },
  {
    "cve_id": "ASB-A-313428840",
    "downstream_version": "14",
    "file_name": "services/companion/java/com/android/server/companion/CompanionDeviceManagerService.java",
    "runtime_seconds": 119.83,
    "rej_file_diff": "--- services/companion/java/com/android/server/companion/CompanionDeviceManagerService.java\n+++ services/companion/java/com/android/server/companion/CompanionDeviceManagerService.java\n@@ -949,13 +947,14 @@ public class CompanionDeviceManagerService extends SystemService {\n         }\n \n         @Override\n-        public void onShellCommand(FileDescriptor in, FileDescriptor out, FileDescriptor err,\n-                String[] args, ShellCallback callback, ResultReceiver resultReceiver)\n-                throws RemoteException {\n-            new CompanionDeviceShellCommand(CompanionDeviceManagerService.this, mAssociationStore,\n-                    mDevicePresenceMonitor, mTransportManager, mSystemDataTransferProcessor,\n-                    mAssociationRequestsProcessor)\n-                    .exec(this, in, out, err, args, callback, resultReceiver);\n+        public int handleShellCommand(@NonNull ParcelFileDescriptor in,\n+                @NonNull ParcelFileDescriptor out, @NonNull ParcelFileDescriptor err,\n+                @NonNull String[] args) {\n+            return new CompanionDeviceShellCommand(CompanionDeviceManagerService.this,\n+                    mAssociationStore, mDevicePresenceMonitor, mTransportManager,\n+                    mSystemDataTransferProcessor, mAssociationRequestsProcessor)\n+                    .exec(this, in.getFileDescriptor(), out.getFileDescriptor(),\n+                            err.getFileDescriptor(), args);\n         }\n \n         @Override",
    "llm_generated_patch": "--- a/services/companion/java/com/android/server/companion/CompanionDeviceManagerService.java\n+++ b/services/companion/java/com/android/server/companion/CompanionDeviceManagerService.java\n@@ -951,19 +951,18 @@\n         }\n \n         @Override\n-        public void onShellCommand(FileDescriptor in, FileDescriptor out, FileDescriptor err,\n-                String[] args, ShellCallback callback, ResultReceiver resultReceiver)\n-                throws RemoteException {\n-            new CompanionDeviceShellCommand(CompanionDeviceManagerService.this, mAssociationStore,\n-                    mDevicePresenceMonitor, mTransportManager, mSystemDataTransferRequestStore,\n-                    mAssociationRequestsProcessor)\n-                    .exec(this, in, out, err, args, callback, resultReceiver);\n+        public int handleShellCommand(@NonNull ParcelFileDescriptor in,\n+                @NonNull ParcelFileDescriptor out, @NonNull ParcelFileDescriptor err,\n+                @NonNull String[] args) {\n+            return new CompanionDeviceShellCommand(CompanionDeviceManagerService.this,\n+                    mAssociationStore, mDevicePresenceMonitor, mTransportManager,\n+                    mSystemDataTransferProcessor, mAssociationRequestsProcessor)\n+                    .exec(this, in.getFileDescriptor(), out.getFileDescriptor(),\n+                            err.getFileDescriptor(), args);\n         }\n \n         @Override\n         public void dump(@NonNull FileDescriptor fd, @NonNull PrintWriter out,\n                 @Nullable String[] args) {\n             if (!DumpUtils.checkDumpAndUsageStatsPermission(getContext(), TAG, out)) {\n                 return;",
    "metrics": {
      "relative_line_count_similarity": 0.8182,
      "normalized_edit_similarity": 0.7735,
      "token_level_edit_distance": 47,
      "codebert_score": {
        "precision": 0.9289,
        "recall": 0.9616,
        "f1": 0.9449,
        "f3": 0.9582
      },
      "token_count_upstream": 92,
      "token_count_downstream": 104,
      "token_count_total": 196,
      "cosine_similarity_openai": 0.9737
    }
  },
  {
    "cve_id": "ASB-A-313428840",
    "downstream_version": "12L",
    "file_name": "services/companion/java/com/android/server/companion/CompanionDeviceManagerService.java",
    "runtime_seconds": 128.13,
    "rej_file_diff": "--- services/companion/java/com/android/server/companion/CompanionDeviceManagerService.java\n+++ services/companion/java/com/android/server/companion/CompanionDeviceManagerService.java\n@@ -84,9 +84,7 @@ import android.os.ParcelFileDescriptor;\n import android.os.PowerWhitelistManager;\n import android.os.RemoteCallbackList;\n import android.os.RemoteException;\n-import android.os.ResultReceiver;\n import android.os.ServiceManager;\n-import android.os.ShellCallback;\n import android.os.SystemProperties;\n import android.os.UserHandle;\n import android.os.UserManager;\n@@ -951,13 +949,14 @@ public class CompanionDeviceManagerService extends SystemService {\n         }\n \n         @Override\n-        public void onShellCommand(FileDescriptor in, FileDescriptor out, FileDescriptor err,\n-                String[] args, ShellCallback callback, ResultReceiver resultReceiver)\n-                throws RemoteException {\n-            new CompanionDeviceShellCommand(CompanionDeviceManagerService.this, mAssociationStore,\n-                    mDevicePresenceMonitor, mTransportManager, mSystemDataTransferProcessor,\n-                    mAssociationRequestsProcessor)\n-                    .exec(this, in, out, err, args, callback, resultReceiver);\n+        public int handleShellCommand(@NonNull ParcelFileDescriptor in,\n+                @NonNull ParcelFileDescriptor out, @NonNull ParcelFileDescriptor err,\n+                @NonNull String[] args) {\n+            return new CompanionDeviceShellCommand(CompanionDeviceManagerService.this,\n+                    mAssociationStore, mDevicePresenceMonitor, mTransportManager,\n+                    mSystemDataTransferProcessor, mAssociationRequestsProcessor)\n+                    .exec(this, in.getFileDescriptor(), out.getFileDescriptor(),\n+                            err.getFileDescriptor(), args);\n         }\n \n         @Override",
    "llm_generated_patch": "--- a/services/companion/java/com/android/server/companion/CompanionDeviceManagerService.java\n+++ b/services/companion/java/com/android/server/companion/CompanionDeviceManagerService.java\n@@ -71,15 +71,14 @@\n import android.os.IInterface;\n import android.os.Parcel;\n import android.os.PowerWhitelistManager;\n+import android.os.ParcelFileDescriptor;\n import android.os.Process;\n import android.os.RemoteException;\n-import android.os.ResultReceiver;\n import android.os.ServiceManager;\n-import android.os.ShellCallback;\n import android.os.UserHandle;\n import android.os.UserManager;\n import android.permission.PermissionControllerManager;\n import android.provider.Settings;\n import android.provider.SettingsStringUtil.ComponentNameSet;\n import android.text.BidiFormatter;\n-import android.util.ArrayMap;\n@@ -619,12 +618,15 @@\n                             < PAIR_WITHOUT_PROMPT_WINDOW_MS);\n         }\n \n-        @Override\n-        public void onShellCommand(FileDescriptor in, FileDescriptor out, FileDescriptor err,\n-                String[] args, ShellCallback callback, ResultReceiver resultReceiver)\n-                throws RemoteException {\n-            new ShellCmd().exec(this, in, out, err, args, callback, resultReceiver);\n-        }\n+        // TODO(b/172059790): With Shell V2, this method should be changed to override\n+        //  Binder#onShellCommand(ParcelFileDescriptor, ParcelFileDescriptor, ParcelFileDescriptor,\n+        //  String[], ShellCallback, ResultReceiver)\n+        @Override\n+        public int handleShellCommand(@NonNull ParcelFileDescriptor in,\n+                @NonNull ParcelFileDescriptor out, @NonNull ParcelFileDescriptor err,\n+                @NonNull String[] args) {\n+            return new ShellCmd().exec(this, in.getFileDescriptor(), out.getFileDescriptor(),\n+                    err.getFileDescriptor(), args, new ShellCallback(), new ResultReceiver(null));\n+        }\n \n         @Override\n         public void dump(@NonNull FileDescriptor fd,",
    "metrics": {
      "relative_line_count_similarity": 0.75,
      "normalized_edit_similarity": 0.5655,
      "token_level_edit_distance": 232,
      "codebert_score": {
        "precision": 0.8647,
        "recall": 0.8763,
        "f1": 0.8705,
        "f3": 0.8751
      },
      "token_count_upstream": 116,
      "token_count_downstream": 144,
      "token_count_total": 260,
      "cosine_similarity_openai": 0.913
    }
  },
  {
    "cve_id": "ASB-A-313428840",
    "downstream_version": "12",
    "file_name": "services/companion/java/com/android/server/companion/CompanionDeviceManagerService.java",
    "runtime_seconds": 96.0,
    "rej_file_diff": "--- services/companion/java/com/android/server/companion/CompanionDeviceManagerService.java\n+++ services/companion/java/com/android/server/companion/CompanionDeviceManagerService.java\n@@ -84,9 +84,7 @@ import android.os.ParcelFileDescriptor;\n import android.os.PowerWhitelistManager;\n import android.os.RemoteCallbackList;\n import android.os.RemoteException;\n-import android.os.ResultReceiver;\n import android.os.ServiceManager;\n-import android.os.ShellCallback;\n import android.os.SystemProperties;\n import android.os.UserHandle;\n import android.os.UserManager;\n@@ -951,13 +949,14 @@ public class CompanionDeviceManagerService extends SystemService {\n         }\n \n         @Override\n-        public void onShellCommand(FileDescriptor in, FileDescriptor out, FileDescriptor err,\n-                String[] args, ShellCallback callback, ResultReceiver resultReceiver)\n-                throws RemoteException {\n-            new CompanionDeviceShellCommand(CompanionDeviceManagerService.this, mAssociationStore,\n-                    mDevicePresenceMonitor, mTransportManager, mSystemDataTransferProcessor,\n-                    mAssociationRequestsProcessor)\n-                    .exec(this, in, out, err, args, callback, resultReceiver);\n+        public int handleShellCommand(@NonNull ParcelFileDescriptor in,\n+                @NonNull ParcelFileDescriptor out, @NonNull ParcelFileDescriptor err,\n+                @NonNull String[] args) {\n+            return new CompanionDeviceShellCommand(CompanionDeviceManagerService.this,\n+                    mAssociationStore, mDevicePresenceMonitor, mTransportManager,\n+                    mSystemDataTransferProcessor, mAssociationRequestsProcessor)\n+                    .exec(this, in.getFileDescriptor(), out.getFileDescriptor(),\n+                            err.getFileDescriptor(), args);\n         }\n \n         @Override",
    "llm_generated_patch": "--- a/services/companion/java/com/android/server/companion/CompanionDeviceManagerService.java\n+++ b/services/companion/java/com/android/server/companion/CompanionDeviceManagerService.java\n@@ -78,15 +78,14 @@\n import android.os.IInterface;\n import android.os.Parcel;\n+import android.os.ParcelFileDescriptor;\n import android.os.PowerWhitelistManager;\n import android.os.Process;\n import android.os.RemoteException;\n-import android.os.ResultReceiver;\n import android.os.ServiceManager;\n-import android.os.ShellCallback;\n import android.os.ShellCommand;\n import android.os.UserHandle;\n import android.os.UserManager;\n@@ -949,13 +948,12 @@\n         }\n \n         @Override\n-        public void onShellCommand(FileDescriptor in, FileDescriptor out, FileDescriptor err,\n-                String[] args, ShellCallback callback, ResultReceiver resultReceiver)\n-                throws RemoteException {\n-            new ShellCmd().exec(this, in, out, err, args, callback, resultReceiver);\n+        public int handleShellCommand(@NonNull ParcelFileDescriptor in,\n+                @NonNull ParcelFileDescriptor out, @NonNull ParcelFileDescriptor err,\n+                @NonNull String[] args) {\n+            return new ShellCmd().exec(this, in.getFileDescriptor(), out.getFileDescriptor(),\n+                    err.getFileDescriptor(), args);\n         }\n \n         @Override",
    "metrics": {
      "relative_line_count_similarity": 0.9062,
      "normalized_edit_similarity": 0.7554,
      "token_level_edit_distance": 110,
      "codebert_score": {
        "precision": 0.9294,
        "recall": 0.8745,
        "f1": 0.9011,
        "f3": 0.8797
      },
      "token_count_upstream": 116,
      "token_count_downstream": 96,
      "token_count_total": 212,
      "cosine_similarity_openai": 0.9457
    }
  },
  {
    "cve_id": "ASB-A-313428840",
    "downstream_version": "13",
    "file_name": "services/companion/java/com/android/server/companion/CompanionDeviceManagerService.java",
    "runtime_seconds": 106.91,
    "rej_file_diff": "--- services/companion/java/com/android/server/companion/CompanionDeviceManagerService.java\n+++ services/companion/java/com/android/server/companion/CompanionDeviceManagerService.java\n@@ -949,13 +947,14 @@ public class CompanionDeviceManagerService extends SystemService {\n         }\n \n         @Override\n-        public void onShellCommand(FileDescriptor in, FileDescriptor out, FileDescriptor err,\n-                String[] args, ShellCallback callback, ResultReceiver resultReceiver)\n-                throws RemoteException {\n-            new CompanionDeviceShellCommand(CompanionDeviceManagerService.this, mAssociationStore,\n-                    mDevicePresenceMonitor, mTransportManager, mSystemDataTransferProcessor,\n-                    mAssociationRequestsProcessor)\n-                    .exec(this, in, out, err, args, callback, resultReceiver);\n+        public int handleShellCommand(@NonNull ParcelFileDescriptor in,\n+                @NonNull ParcelFileDescriptor out, @NonNull ParcelFileDescriptor err,\n+                @NonNull String[] args) {\n+            return new CompanionDeviceShellCommand(CompanionDeviceManagerService.this,\n+                    mAssociationStore, mDevicePresenceMonitor, mTransportManager,\n+                    mSystemDataTransferProcessor, mAssociationRequestsProcessor)\n+                    .exec(this, in.getFileDescriptor(), out.getFileDescriptor(),\n+                            err.getFileDescriptor(), args);\n         }\n \n         @Override",
    "llm_generated_patch": "--- a/services/companion/java/com/android/server/companion/CompanionDeviceManagerService.java\n+++ b/services/companion/java/com/android/server/companion/CompanionDeviceManagerService.java\n@@ -645,20 +645,23 @@\n                     < PAIR_WITHOUT_PROMPT_WINDOW_MS;\n         }\n \n-        @Override\n-        public void onShellCommand(FileDescriptor in, FileDescriptor out, FileDescriptor err,\n-                String[] args, ShellCallback callback, ResultReceiver resultReceiver)\n-                throws RemoteException {\n-            enforceCallerCanManageCompanionDevice(getContext(), \"onShellCommand\");\n-\n-            final CompanionDeviceShellCommand cmd = new CompanionDeviceShellCommand(\n-                    CompanionDeviceManagerService.this,\n-                    mAssociationStore,\n-                    mDevicePresenceMonitor);\n-            cmd.exec(this, in, out, err, args, callback, resultReceiver);\n-        }\n-\n         @Override\n+        public int handleShellCommand(@NonNull android.os.ParcelFileDescriptor in,\n+                @NonNull android.os.ParcelFileDescriptor out,\n+                @NonNull android.os.ParcelFileDescriptor err,\n+                @NonNull String[] args) {\n+            enforceCallerCanManageCompanionDevice(getContext(), \"handleShellCommand\");\n+\n+            return new CompanionDeviceShellCommand(\n+                    CompanionDeviceManagerService.this,\n+                    mAssociationStore,\n+                    mDevicePresenceMonitor,\n+                    mAssociationRequestsProcessor)\n+                    .exec(this, in.getFileDescriptor(), out.getFileDescriptor(),\n+                            err.getFileDescriptor(), args);\n+        }\n+\n+        @Override\n         public void dump(@NonNull FileDescriptor fd, @NonNull PrintWriter out,\n                 @Nullable String[] args) {\n             if (!DumpUtils.checkDumpAndUsageStatsPermission(getContext(), TAG, out)) {",
    "metrics": {
      "relative_line_count_similarity": 0.2727,
      "normalized_edit_similarity": 0.5921,
      "token_level_edit_distance": 111,
      "codebert_score": {
        "precision": 0.8587,
        "recall": 0.9045,
        "f1": 0.881,
        "f3": 0.8997
      },
      "token_count_upstream": 92,
      "token_count_downstream": 126,
      "token_count_total": 218,
      "cosine_similarity_openai": 0.941
    }
  },
  {
    "cve_id": "ASB-A-353712853",
    "downstream_version": "14",
    "file_name": "services/usb/java/com/android/server/usb/UsbDeviceManager.java",
    "runtime_seconds": 37.74,
    "rej_file_diff": "--- services/usb/java/com/android/server/usb/UsbDeviceManager.java\n+++ services/usb/java/com/android/server/usb/UsbDeviceManager.java\n@@ -80,9 +80,9 @@ import android.os.storage.StorageVolume;\n import android.provider.Settings;\n import android.service.usb.UsbDeviceManagerProto;\n import android.service.usb.UsbHandlerProto;\n+import android.text.TextUtils;\n import android.util.Pair;\n import android.util.Slog;\n-import android.text.TextUtils;\n \n import com.android.internal.R;\n import com.android.internal.annotations.GuardedBy;",
    "llm_generated_patch": "--- a/services/usb/java/com/android/server/usb/UsbDeviceManager.java\n+++ b/services/usb/java/com/android/server/usb/UsbDeviceManager.java\n@@ -65,8 +65,9 @@\n import android.provider.Settings;\n import android.service.usb.UsbDeviceManagerProto;\n import android.service.usb.UsbHandlerProto;\n+import android.text.TextUtils;\n import android.util.Pair;\n import android.util.Slog;\n \n import com.android.internal.annotations.GuardedBy;\n import com.android.internal.logging.MetricsLogger;",
    "metrics": {
      "relative_line_count_similarity": 0.9167,
      "normalized_edit_similarity": 0.7734,
      "token_level_edit_distance": 50,
      "codebert_score": {
        "precision": 0.9377,
        "recall": 0.9371,
        "f1": 0.9374,
        "f3": 0.9371
      },
      "token_count_upstream": 28,
      "token_count_downstream": 24,
      "token_count_total": 52,
      "cosine_similarity_openai": 0.9526
    }
  },
  {
    "cve_id": "ASB-A-353712853",
    "downstream_version": "13",
    "file_name": "services/usb/java/com/android/server/usb/UsbDeviceManager.java",
    "runtime_seconds": 130.2,
    "rej_file_diff": "--- services/usb/java/com/android/server/usb/UsbDeviceManager.java\n+++ services/usb/java/com/android/server/usb/UsbDeviceManager.java\n@@ -80,9 +80,9 @@ import android.os.storage.StorageVolume;\n import android.provider.Settings;\n import android.service.usb.UsbDeviceManagerProto;\n import android.service.usb.UsbHandlerProto;\n+import android.text.TextUtils;\n import android.util.Pair;\n import android.util.Slog;\n-import android.text.TextUtils;\n \n import com.android.internal.R;\n import com.android.internal.annotations.GuardedBy;\n@@ -880,7 +880,7 @@ public class UsbDeviceManager implements ActivityTaskManagerInternal.ScreenObser\n             }\n         }\n \n-        private void notifyAccessoryModeExit(int operationId) {\n+        protected void notifyAccessoryModeExit(int operationId) {\n             // make sure accessory mode is off\n             // and restore default functions\n             Slog.d(TAG, \"exited USB accessory mode\");\n@@ -2313,8 +2313,13 @@ public class UsbDeviceManager implements ActivityTaskManagerInternal.ScreenObser\n                      */\n                     operationId = sUsbOperationCount.incrementAndGet();\n                     if (msg.arg1 != 1) {\n-                        // Set this since default function may be selected from Developer options\n-                        setEnabledFunctions(mScreenUnlockedFunctions, false, operationId);\n+                        if (mCurrentFunctions == UsbManager.FUNCTION_ACCESSORY) {\n+                            notifyAccessoryModeExit(operationId);\n+                        } else {\n+                            // Set this since default function may be selected from Developer\n+                            // options\n+                            setEnabledFunctions(mScreenUnlockedFunctions, false, operationId);\n+                        }\n                     }\n                     break;\n                 case MSG_GADGET_HAL_REGISTERED:",
    "llm_generated_patch": "--- a/services/usb/java/com/android/server/usb/UsbDeviceManager.java\n+++ b/services/usb/java/com/android/server/usb/UsbDeviceManager.java\n@@ -61,6 +61,7 @@\n import android.provider.Settings;\n import android.service.usb.UsbDeviceManagerProto;\n import android.service.usb.UsbHandlerProto;\n+import android.text.TextUtils;\n import android.util.Pair;\n import android.util.Slog;\n \n@@ -89,6 +90,7 @@\n import java.util.NoSuchElementException;\n import java.util.Scanner;\n import java.util.Set;\n+import java.util.concurrent.atomic.AtomicInteger;\n \n /**\n  * UsbDeviceManager manages USB state in device mode.\n@@ -98,6 +100,7 @@\n \n     private static final String TAG = UsbDeviceManager.class.getSimpleName();\n     private static final boolean DEBUG = false;\n+    private static final AtomicInteger sUsbOperationCount = new AtomicInteger();\n \n     /**\n      * The name of the xml file in which screen unlocked functions are stored.\n@@ -662,7 +665,7 @@\n             }\n         }\n \n-        private void notifyAccessoryModeExit() {\n+        protected void notifyAccessoryModeExit(int operationId) {\n             // make sure accessory mode is off\n             // and restore default functions\n             Slog.d(TAG, \"exited USB accessory mode\");\n@@ -1501,10 +1504,16 @@\n                     break;\n                 case MSG_SET_FUNCTIONS_TIMEOUT:\n                     Slog.e(TAG, \"Set functions timed out! no reply from usb hal\");\n+                    int operationId = sUsbOperationCount.incrementAndGet();\n                     if (msg.arg1 != 1) {\n-                        // Set this since default function may be selected from Developer options\n-                        setEnabledFunctions(mScreenUnlockedFunctions, false);\n+                        if (mCurrentFunctions == UsbManager.FUNCTION_ACCESSORY) {\n+                            notifyAccessoryModeExit(operationId);\n+                        } else {\n+                            // Set this since default function may be selected from Developer\n+                            // options\n+                            setEnabledFunctions(mScreenUnlockedFunctions, false, operationId);\n+                        }\n                     }\n                     break;\n                 case MSG_GET_CURRENT_USB_FUNCTIONS:",
    "metrics": {
      "relative_line_count_similarity": 0.6667,
      "normalized_edit_similarity": 0.6319,
      "token_level_edit_distance": 197,
      "codebert_score": {
        "precision": 0.8549,
        "recall": 0.8754,
        "f1": 0.865,
        "f3": 0.8733
      },
      "token_count_upstream": 140,
      "token_count_downstream": 197,
      "token_count_total": 337,
      "cosine_similarity_openai": 0.9451
    }
  },
  {
    "cve_id": "ASB-A-353712853",
    "downstream_version": "12L",
    "file_name": "services/usb/java/com/android/server/usb/UsbDeviceManager.java",
    "runtime_seconds": 177.62,
    "rej_file_diff": "--- services/usb/java/com/android/server/usb/UsbDeviceManager.java\n+++ services/usb/java/com/android/server/usb/UsbDeviceManager.java\n@@ -80,9 +80,9 @@ import android.os.storage.StorageVolume;\n import android.provider.Settings;\n import android.service.usb.UsbDeviceManagerProto;\n import android.service.usb.UsbHandlerProto;\n+import android.text.TextUtils;\n import android.util.Pair;\n import android.util.Slog;\n-import android.text.TextUtils;\n \n import com.android.internal.R;\n import com.android.internal.annotations.GuardedBy;\n@@ -880,7 +880,7 @@ public class UsbDeviceManager implements ActivityTaskManagerInternal.ScreenObser\n             }\n         }\n \n-        private void notifyAccessoryModeExit(int operationId) {\n+        protected void notifyAccessoryModeExit(int operationId) {\n             // make sure accessory mode is off\n             // and restore default functions\n             Slog.d(TAG, \"exited USB accessory mode\");\n@@ -2313,8 +2313,13 @@ public class UsbDeviceManager implements ActivityTaskManagerInternal.ScreenObser\n                      */\n                     operationId = sUsbOperationCount.incrementAndGet();\n                     if (msg.arg1 != 1) {\n-                        // Set this since default function may be selected from Developer options\n-                        setEnabledFunctions(mScreenUnlockedFunctions, false, operationId);\n+                        if (mCurrentFunctions == UsbManager.FUNCTION_ACCESSORY) {\n+                            notifyAccessoryModeExit(operationId);\n+                        } else {\n+                            // Set this since default function may be selected from Developer\n+                            // options\n+                            setEnabledFunctions(mScreenUnlockedFunctions, false, operationId);\n+                        }\n                     }\n                     break;\n                 case MSG_GADGET_HAL_REGISTERED:",
    "llm_generated_patch": "--- a/services/usb/java/com/android/server/usb/UsbDeviceManager.java\n+++ b/services/usb/java/com/android/server/usb/UsbDeviceManager.java\n@@ -77,8 +77,9 @@\n import android.provider.Settings;\n import android.service.usb.UsbDeviceManagerProto;\n import android.service.usb.UsbHandlerProto;\n+import android.text.TextUtils;\n import android.util.Pair;\n import android.util.Slog;\n \n-import com.android.internal.annotations.GuardedBy;\n import com.android.internal.logging.MetricsLogger;\n import com.android.internal.logging.nano.MetricsProto.MetricsEvent;\n import com.android.internal.messages.nano.SystemMessageProto.SystemMessage;\n@@ -654,7 +655,7 @@\n             }\n         }\n \n-        private void notifyAccessoryModeExit() {\n+        protected void notifyAccessoryModeExit(int operationId) {\n             // make sure accessory mode is off\n             // and restore default functions\n             Slog.d(TAG, \"exited USB accessory mode\");\n@@ -1357,5 +1358,11 @@\n                      */\n                     if (msg.arg1 != 1) {\n                         // Set this since default function may be selected from Developer options\n-                        setEnabledFunctions(mScreenUnlockedFunctions, false);\n+                        if (mCurrentFunctions == UsbManager.FUNCTION_ACCESSORY) {\n+                            notifyAccessoryModeExit(0);\n+                        } else {\n+                            // Set this since default function may be selected from Developer\n+                            // options\n+                            setEnabledFunctions(mScreenUnlockedFunctions, false);\n+                        }\n                     }\n                     break;\n                 case MSG_GADGET_HAL_REGISTERED:",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 0.7226,
      "token_level_edit_distance": 112,
      "codebert_score": {
        "precision": 0.9217,
        "recall": 0.9108,
        "f1": 0.9162,
        "f3": 0.9119
      },
      "token_count_upstream": 140,
      "token_count_downstream": 123,
      "token_count_total": 263,
      "cosine_similarity_openai": 0.9736
    }
  },
  {
    "cve_id": "ASB-A-353712853",
    "downstream_version": "12",
    "file_name": "services/usb/java/com/android/server/usb/UsbDeviceManager.java",
    "runtime_seconds": 154.53,
    "rej_file_diff": "--- services/usb/java/com/android/server/usb/UsbDeviceManager.java\n+++ services/usb/java/com/android/server/usb/UsbDeviceManager.java\n@@ -80,9 +80,9 @@ import android.os.storage.StorageVolume;\n import android.provider.Settings;\n import android.service.usb.UsbDeviceManagerProto;\n import android.service.usb.UsbHandlerProto;\n+import android.text.TextUtils;\n import android.util.Pair;\n import android.util.Slog;\n-import android.text.TextUtils;\n \n import com.android.internal.R;\n import com.android.internal.annotations.GuardedBy;\n@@ -880,7 +880,7 @@ public class UsbDeviceManager implements ActivityTaskManagerInternal.ScreenObser\n             }\n         }\n \n-        private void notifyAccessoryModeExit(int operationId) {\n+        protected void notifyAccessoryModeExit(int operationId) {\n             // make sure accessory mode is off\n             // and restore default functions\n             Slog.d(TAG, \"exited USB accessory mode\");\n@@ -2313,8 +2313,13 @@ public class UsbDeviceManager implements ActivityTaskManagerInternal.ScreenObser\n                      */\n                     operationId = sUsbOperationCount.incrementAndGet();\n                     if (msg.arg1 != 1) {\n-                        // Set this since default function may be selected from Developer options\n-                        setEnabledFunctions(mScreenUnlockedFunctions, false, operationId);\n+                        if (mCurrentFunctions == UsbManager.FUNCTION_ACCESSORY) {\n+                            notifyAccessoryModeExit(operationId);\n+                        } else {\n+                            // Set this since default function may be selected from Developer\n+                            // options\n+                            setEnabledFunctions(mScreenUnlockedFunctions, false, operationId);\n+                        }\n                     }\n                     break;\n                 case MSG_GADGET_HAL_REGISTERED:",
    "llm_generated_patch": "--- a/services/usb/java/com/android/server/usb/UsbDeviceManager.java\n+++ b/services/usb/java/com/android/server/usb/UsbDeviceManager.java\n@@ -80,6 +80,7 @@ import android.os.storage.StorageVolume;\n import android.provider.Settings;\n import android.service.usb.UsbDeviceManagerProto;\n import android.service.usb.UsbHandlerProto;\n+import android.text.TextUtils;\n import android.util.Pair;\n import android.util.Slog;\n \n@@ -879,10 +880,10 @@ public class UsbDeviceManager implements ActivityTaskManagerInternal.ScreenObser\n             }\n         }\n \n-        private void notifyAccessoryModeExit() {\n+        protected void notifyAccessoryModeExit(int operationId) {\n             // make sure accessory mode is off\n             // and restore default functions\n             Slog.d(TAG, \"exited USB accessory mode\");\n-            setEnabledFunctions(UsbManager.FUNCTION_NONE, false);\n+            setEnabledFunctions(UsbManager.FUNCTION_NONE, false, operationId);\n \n             if (mCurrentAccessory != null) {\n                 if (mBootCompleted) {\n@@ -2314,13 +2315,16 @@\n                     /**\n                      * Dont force to default when the configuration is already set to default.\n                      */\n+                    // Assuming sUsbOperationCount is an AtomicInteger field of the class.\n+                    // The declaration of sUsbOperationCount and type of operationId are\n+                    // assumed to be handled by the broader patch.\n+                    int operationId = sUsbOperationCount.incrementAndGet();\n                     if (msg.arg1 != 1) {\n-                        // Set this since default function may be selected from Developer options\n-                        setEnabledFunctions(mScreenUnlockedFunctions, false);\n-                    }\n-                    break;\n-                case MSG_GADGET_HAL_REGISTERED:\n+                        if (mCurrentFunctions == UsbManager.FUNCTION_ACCESSORY) {\n+                            notifyAccessoryModeExit(operationId);\n+                        } else {\n+                            // Set this since default function may be selected from Developer options\n+                            setEnabledFunctions(mScreenUnlockedFunctions, false, operationId);\n+                        }\n+                    }\n+                    break;",
    "metrics": {
      "relative_line_count_similarity": 0.8056,
      "normalized_edit_similarity": 0.5948,
      "token_level_edit_distance": 263,
      "codebert_score": {
        "precision": 0.8841,
        "recall": 0.9136,
        "f1": 0.8986,
        "f3": 0.9106
      },
      "token_count_upstream": 140,
      "token_count_downstream": 195,
      "token_count_total": 335,
      "cosine_similarity_openai": 0.9467
    }
  },
  {
    "cve_id": "ASB-A-311374917",
    "downstream_version": "14",
    "file_name": "services/core/java/com/android/server/pm/InstallPackageHelper.java",
    "runtime_seconds": 42.99,
    "rej_file_diff": "--- services/core/java/com/android/server/pm/InstallPackageHelper.java\n+++ services/core/java/com/android/server/pm/InstallPackageHelper.java\n@@ -4590,7 +4590,9 @@ final class InstallPackageHelper {\n \n     private void assertPackageWithSharedUserIdIsPrivileged(AndroidPackage pkg)\n             throws PackageManagerException {\n-        if (!AndroidPackageLegacyUtils.isPrivileged(pkg) && (pkg.getSharedUserId() != null)) {\n+        if (!AndroidPackageLegacyUtils.isPrivileged(pkg)\n+                && (pkg.getSharedUserId() != null)\n+                && !pkg.isLeavingSharedUser()) {\n             SharedUserSetting sharedUserSetting = null;\n             try {\n                 synchronized (mPm.mLock) {",
    "llm_generated_patch": "--- a/services/core/java/com/android/server/pm/InstallPackageHelper.java\n+++ b/services/core/java/com/android/server/pm/InstallPackageHelper.java\n@@ -4590,7 +4590,9 @@\n     private void assertPackageWithSharedUserIdIsPrivileged(AndroidPackage pkg)\n             throws PackageManagerException {\n-        if (!AndroidPackageUtils.isPrivileged(pkg) && (pkg.getSharedUserId() != null)) {\n+        if (!AndroidPackageLegacyUtils.isPrivileged(pkg)\n+                && (pkg.getSharedUserId() != null)\n+                && !pkg.isLeavingSharedUser()) {\n             SharedUserSetting sharedUserSetting = null;\n             try {\n                 synchronized (mPm.mLock) {",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 0.928,
      "token_level_edit_distance": 9,
      "codebert_score": {
        "precision": 0.9663,
        "recall": 0.9627,
        "f1": 0.9645,
        "f3": 0.9631
      },
      "token_count_upstream": 48,
      "token_count_downstream": 44,
      "token_count_total": 92,
      "cosine_similarity_openai": 0.9877
    }
  },
  {
    "cve_id": "ASB-A-311374917",
    "downstream_version": "13",
    "file_name": "services/core/java/com/android/server/pm/InstallPackageHelper.java",
    "runtime_seconds": 9.17,
    "rej_file_diff": "--- services/core/java/com/android/server/pm/InstallPackageHelper.java\n+++ services/core/java/com/android/server/pm/InstallPackageHelper.java\n@@ -4590,7 +4590,9 @@ final class InstallPackageHelper {\n \n     private void assertPackageWithSharedUserIdIsPrivileged(AndroidPackage pkg)\n             throws PackageManagerException {\n-        if (!AndroidPackageLegacyUtils.isPrivileged(pkg) && (pkg.getSharedUserId() != null)) {\n+        if (!AndroidPackageLegacyUtils.isPrivileged(pkg)\n+                && (pkg.getSharedUserId() != null)\n+                && !pkg.isLeavingSharedUser()) {\n             SharedUserSetting sharedUserSetting = null;\n             try {\n                 synchronized (mPm.mLock) {",
    "llm_generated_patch": "--- a/services/core/java/com/android/server/pm/InstallPackageHelper.java\n+++ b/services/core/java/com/android/server/pm/InstallPackageHelper.java\n@@ -4590,7 +4590,9 @@\n \n     private void assertPackageWithSharedUserIdIsPrivileged(AndroidPackage pkg)\n             throws PackageManagerException {\n-        if (!pkg.isPrivileged() && (pkg.getSharedUserId() != null)) {\n+        if (!pkg.isPrivileged()\n+                && (pkg.getSharedUserId() != null)\n+                && !pkg.isLeavingSharedUser()) {\n             SharedUserSetting sharedUserSetting = null;\n             try {\n                 sharedUserSetting = mPm.mSettings.getSharedUserLPw(pkg.getSharedUserId(),",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 0.8231,
      "token_level_edit_distance": 23,
      "codebert_score": {
        "precision": 0.9414,
        "recall": 0.9292,
        "f1": 0.9352,
        "f3": 0.9304
      },
      "token_count_upstream": 48,
      "token_count_downstream": 44,
      "token_count_total": 92,
      "cosine_similarity_openai": 0.9841
    }
  },
  {
    "cve_id": "ASB-A-319081336",
    "downstream_version": "14",
    "file_name": "core/jni/com_android_internal_os_ZygoteCommandBuffer.cpp",
    "runtime_seconds": 149.69,
    "rej_file_diff": "--- core/jni/com_android_internal_os_ZygoteCommandBuffer.cpp\n+++ core/jni/com_android_internal_os_ZygoteCommandBuffer.cpp\n@@ -425,19 +437,12 @@ jboolean com_android_internal_os_ZygoteCommandBuffer_nativeForkRepeatedly(\n     fail_fn_z(\"Failed to retrieve session socket timeout\");\n   }\n \n-  struct ucred credentials;\n-  socklen_t cred_size = sizeof credentials;\n-  if (getsockopt(n_buffer->getFd(), SOL_SOCKET, SO_PEERCRED, &credentials, &cred_size) == -1\n-      || cred_size != sizeof credentials) {\n-    fail_fn_1(CREATE_ERROR(\"ForkRepeatedly failed to get initial credentials, %s\",\n-                           strerror(errno)));\n+  uid_t peerUid = getSocketPeerUid(session_socket, fail_fn_1);\n+  if (peerUid != static_cast<uid_t>(expected_uid)) {\n+    return JNI_FALSE;\n   }\n-\n   bool first_time = true;\n   do {\n-    if (credentials.uid != static_cast<uid_t>(expected_uid)) {\n-      return JNI_FALSE;\n-    }\n     n_buffer->readAllLines(first_time ? fail_fn_1 : fail_fn_n);\n     n_buffer->reset();\n     int pid = zygote::forkApp(env, /* no pipe FDs */ -1, -1, session_socket_fds,\n@@ -465,6 +470,7 @@ jboolean com_android_internal_os_ZygoteCommandBuffer_nativeForkRepeatedly(\n       }\n     }\n     for (;;) {\n+      bool valid_session_socket = true;\n       // Clear buffer and get count from next command.\n       n_buffer->clear();\n       // Poll isn't strictly necessary for now. But without it, disconnect is hard to detect.",
    "llm_generated_patch": "--- a/core/jni/com_android_internal_os_ZygoteCommandBuffer.cpp\n+++ b/core/jni/com_android_internal_os_ZygoteCommandBuffer.cpp\n@@ -426,19 +426,13 @@\n     fail_fn_z(\"Failed to retrieve session socket timeout\");\n   }\n \n-  struct ucred credentials;\n-  socklen_t cred_size = sizeof credentials;\n-  if (getsockopt(n_buffer->getFd(), SOL_SOCKET, SO_PEERCRED, &credentials, &cred_size) == -1\n-      || cred_size != sizeof credentials) {\n-    fail_fn_1(CREATE_ERROR(\"ForkRepeatedly failed to get initial credentials, %s\",\n-                           strerror(errno)));\n-  }\n+  uid_t peerUid = getSocketPeerUid(session_socket, fail_fn_1);\n+  if (peerUid != static_cast<uid_t>(expected_uid)) {\n+    return JNI_FALSE;\n+  }\n \n   bool first_time = true;\n   do {\n-    if (credentials.uid != static_cast<uid_t>(expected_uid)) {\n-      return JNI_FALSE;\n-    }\n     n_buffer->readAllLines(first_time ? fail_fn_1 : fail_fn_n);\n     n_buffer->reset();\n     int pid = zygote::forkApp(env, /* no pipe FDs */ -1, -1, session_socket_fds,\n@@ -462,7 +456,8 @@\n     // Clear buffer and get count from next command.\n     n_buffer->clear();\n     for (;;) {\n+      bool valid_session_socket = true;\n       // Poll isn't strictly necessary for now. But without it, disconnect is hard to detect.\n       int poll_res = TEMP_FAILURE_RETRY(poll(fd_structs, 2, -1 /* infinite timeout */));\n       if ((fd_structs[SESSION_IDX].revents & POLLIN) != 0) {",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 0.7057,
      "token_level_edit_distance": 65,
      "codebert_score": {
        "precision": 0.932,
        "recall": 0.9532,
        "f1": 0.9425,
        "f3": 0.9511
      },
      "token_count_upstream": 146,
      "token_count_downstream": 159,
      "token_count_total": 305,
      "cosine_similarity_openai": 0.9603
    }
  },
  {
    "cve_id": "ASB-A-319081336",
    "downstream_version": "13",
    "file_name": "core/jni/com_android_internal_os_ZygoteCommandBuffer.cpp",
    "runtime_seconds": 121.25,
    "rej_file_diff": "--- core/jni/com_android_internal_os_ZygoteCommandBuffer.cpp\n+++ core/jni/com_android_internal_os_ZygoteCommandBuffer.cpp\n@@ -425,19 +437,12 @@ jboolean com_android_internal_os_ZygoteCommandBuffer_nativeForkRepeatedly(\n     fail_fn_z(\"Failed to retrieve session socket timeout\");\n   }\n \n-  struct ucred credentials;\n-  socklen_t cred_size = sizeof credentials;\n-  if (getsockopt(n_buffer->getFd(), SOL_SOCKET, SO_PEERCRED, &credentials, &cred_size) == -1\n-      || cred_size != sizeof credentials) {\n-    fail_fn_1(CREATE_ERROR(\"ForkRepeatedly failed to get initial credentials, %s\",\n-                           strerror(errno)));\n+  uid_t peerUid = getSocketPeerUid(session_socket, fail_fn_1);\n+  if (peerUid != static_cast<uid_t>(expected_uid)) {\n+    return JNI_FALSE;\n   }\n-\n   bool first_time = true;\n   do {\n-    if (credentials.uid != static_cast<uid_t>(expected_uid)) {\n-      return JNI_FALSE;\n-    }\n     n_buffer->readAllLines(first_time ? fail_fn_1 : fail_fn_n);\n     n_buffer->reset();\n     int pid = zygote::forkApp(env, /* no pipe FDs */ -1, -1, session_socket_fds,\n@@ -465,6 +470,7 @@ jboolean com_android_internal_os_ZygoteCommandBuffer_nativeForkRepeatedly(\n       }\n     }\n     for (;;) {\n+      bool valid_session_socket = true;\n       // Clear buffer and get count from next command.\n       n_buffer->clear();\n       // Poll isn't strictly necessary for now. But without it, disconnect is hard to detect.",
    "llm_generated_patch": "--- a/core/jni/com_android_internal_os_ZygoteCommandBuffer.cpp\n+++ b/core/jni/com_android_internal_os_ZygoteCommandBuffer.cpp\n@@ -426,19 +426,13 @@\n    fail_fn_z(\"Failed to retrieve session socket timeout\");\n  }\n \n-  struct ucred credentials;\n-  socklen_t cred_size = sizeof credentials;\n-  if (getsockopt(n_buffer->getFd(), SOL_SOCKET, SO_PEERCRED, &credentials, &cred_size) == -1\n-      || cred_size != sizeof credentials) {\n-    fail_fn_1(CREATE_ERROR(\"ForkRepeatedly failed to get initial credentials, %s\",\n-                           strerror(errno)));\n+  uid_t peerUid = getSocketPeerUid(session_socket, fail_fn_1);\n+  if (peerUid != static_cast<uid_t>(expected_uid)) {\n+    return JNI_FALSE;\n   }\n-\n   bool first_time = true;\n   do {\n-    if (credentials.uid != expected_uid) {\n-      return JNI_FALSE;\n-    }\n    n_buffer->readAllLines(first_time ? fail_fn_1 : fail_fn_n);\n    n_buffer->reset();\n    int pid = zygote::forkApp(env, /* no pipe FDs */ -1, -1, session_socket_fds,\n@@ -471,6 +465,7 @@\n    // Clear buffer and get count from next command.\n    n_buffer->clear();\n    for (;;) {\n+      bool valid_session_socket = true;\n      // Poll isn't strictly necessary for now. But without it, disconnect is hard to detect.\n      int poll_res = TEMP_FAILURE_RETRY(poll(fd_structs, 2, -1 /* infinite timeout */));\n      if ((fd_structs[SESSION_IDX].revents & POLLIN) != 0) {",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 0.6971,
      "token_level_edit_distance": 81,
      "codebert_score": {
        "precision": 0.9312,
        "recall": 0.953,
        "f1": 0.942,
        "f3": 0.9508
      },
      "token_count_upstream": 146,
      "token_count_downstream": 157,
      "token_count_total": 303,
      "cosine_similarity_openai": 0.9626
    }
  },
  {
    "cve_id": "ASB-A-319081336",
    "downstream_version": "12L",
    "file_name": "core/jni/com_android_internal_os_ZygoteCommandBuffer.cpp",
    "runtime_seconds": 106.22,
    "rej_file_diff": "--- core/jni/com_android_internal_os_ZygoteCommandBuffer.cpp\n+++ core/jni/com_android_internal_os_ZygoteCommandBuffer.cpp\n@@ -425,19 +437,12 @@ jboolean com_android_internal_os_ZygoteCommandBuffer_nativeForkRepeatedly(\n     fail_fn_z(\"Failed to retrieve session socket timeout\");\n   }\n \n-  struct ucred credentials;\n-  socklen_t cred_size = sizeof credentials;\n-  if (getsockopt(n_buffer->getFd(), SOL_SOCKET, SO_PEERCRED, &credentials, &cred_size) == -1\n-      || cred_size != sizeof credentials) {\n-    fail_fn_1(CREATE_ERROR(\"ForkRepeatedly failed to get initial credentials, %s\",\n-                           strerror(errno)));\n+  uid_t peerUid = getSocketPeerUid(session_socket, fail_fn_1);\n+  if (peerUid != static_cast<uid_t>(expected_uid)) {\n+    return JNI_FALSE;\n   }\n-\n   bool first_time = true;\n   do {\n-    if (credentials.uid != static_cast<uid_t>(expected_uid)) {\n-      return JNI_FALSE;\n-    }\n     n_buffer->readAllLines(first_time ? fail_fn_1 : fail_fn_n);\n     n_buffer->reset();\n     int pid = zygote::forkApp(env, /* no pipe FDs */ -1, -1, session_socket_fds,\n@@ -465,6 +470,7 @@ jboolean com_android_internal_os_ZygoteCommandBuffer_nativeForkRepeatedly(\n       }\n     }\n     for (;;) {\n+      bool valid_session_socket = true;\n       // Clear buffer and get count from next command.\n       n_buffer->clear();\n       // Poll isn't strictly necessary for now. But without it, disconnect is hard to detect.",
    "llm_generated_patch": "--- a/core/jni/com_android_internal_os_ZygoteCommandBuffer.cpp\n+++ b/core/jni/com_android_internal_os_ZygoteCommandBuffer.cpp\n@@ -428,22 +428,16 @@\n     fail_fn_z(\"Failed to retrieve session socket timeout\");\n   }\n \n-  struct ucred credentials;\n-  socklen_t cred_size = sizeof credentials;\n-  if (getsockopt(n_buffer->getFd(), SOL_SOCKET, SO_PEERCRED, &credentials, &cred_size) == -1\n-      || cred_size != sizeof credentials) {\n-    fail_fn_1(CREATE_ERROR(\"ForkMany failed to get initial credentials, %s\", strerror(errno)));\n+  uid_t peerUid = getSocketPeerUid(session_socket, fail_fn_1);\n+  if (peerUid != static_cast<uid_t>(expected_uid)) {\n+    return JNI_FALSE;\n   }\n \n   bool first_time = true;\n   do {\n-    if (credentials.uid != expected_uid) {\n-      return JNI_FALSE;\n-    }\n     n_buffer->readAllLines(first_time ? fail_fn_1 : fail_fn_n);\n     n_buffer->reset();\n     int pid = zygote::forkApp(env, /* no pipe FDs */ -1, -1, session_socket_fds,\n-                              /*args_known=*/ true, /*is_priority_fork=*/ true,\n-                              /*purge=*/ first_time);\n+                              /*args_known=*/ true, /*is_priority_fork=*/ true, /*purge=*/ first_time);\n     if (pid == 0) {\n       return JNI_TRUE;\n     }\n@@ -465,9 +459,9 @@\n     // Clear buffer and get count from next command.\n     n_buffer->clear();\n     for (;;) {\n+      bool valid_session_socket = true;\n       // Poll isn't strictly necessary for now. But without it, disconnect is hard to detect.\n       int poll_res = TEMP_FAILURE_RETRY(poll(fd_structs, 2, -1 /* infinite timeout */));\n-      if ((fd_structs[SESSION_IDX].revents & POLLIN) != 0) {\n-        if (n_buffer->getCount(fail_fn_z) != 0) {\n-          break;\n-        } else {\n+      if ((fd_structs[SESSION_IDX].revents & POLLIN) != 0) { // Check session socket first\n+        if (n_buffer->getCount(fail_fn_z) != 0) { // Existing connection still has data.\n+          break; // Process this command.\n+        } else { // Existing connection terminated.\n           // Session socket was disconnected\n           valid_session_socket = false;\n           close(session_socket);",
    "metrics": {
      "relative_line_count_similarity": 0.5625,
      "normalized_edit_similarity": 0.4927,
      "token_level_edit_distance": 214,
      "codebert_score": {
        "precision": 0.8697,
        "recall": 0.9282,
        "f1": 0.898,
        "f3": 0.922
      },
      "token_count_upstream": 146,
      "token_count_downstream": 239,
      "token_count_total": 385,
      "cosine_similarity_openai": 0.9362
    }
  },
  {
    "cve_id": "ASB-A-319081336",
    "downstream_version": "12",
    "file_name": "core/jni/com_android_internal_os_ZygoteCommandBuffer.cpp",
    "runtime_seconds": 170.28,
    "rej_file_diff": "--- core/jni/com_android_internal_os_ZygoteCommandBuffer.cpp\n+++ core/jni/com_android_internal_os_ZygoteCommandBuffer.cpp\n@@ -425,19 +437,12 @@ jboolean com_android_internal_os_ZygoteCommandBuffer_nativeForkRepeatedly(\n     fail_fn_z(\"Failed to retrieve session socket timeout\");\n   }\n \n-  struct ucred credentials;\n-  socklen_t cred_size = sizeof credentials;\n-  if (getsockopt(n_buffer->getFd(), SOL_SOCKET, SO_PEERCRED, &credentials, &cred_size) == -1\n-      || cred_size != sizeof credentials) {\n-    fail_fn_1(CREATE_ERROR(\"ForkRepeatedly failed to get initial credentials, %s\",\n-                           strerror(errno)));\n+  uid_t peerUid = getSocketPeerUid(session_socket, fail_fn_1);\n+  if (peerUid != static_cast<uid_t>(expected_uid)) {\n+    return JNI_FALSE;\n   }\n-\n   bool first_time = true;\n   do {\n-    if (credentials.uid != static_cast<uid_t>(expected_uid)) {\n-      return JNI_FALSE;\n-    }\n     n_buffer->readAllLines(first_time ? fail_fn_1 : fail_fn_n);\n     n_buffer->reset();\n     int pid = zygote::forkApp(env, /* no pipe FDs */ -1, -1, session_socket_fds,\n@@ -465,6 +470,7 @@ jboolean com_android_internal_os_ZygoteCommandBuffer_nativeForkRepeatedly(\n       }\n     }\n     for (;;) {\n+      bool valid_session_socket = true;\n       // Clear buffer and get count from next command.\n       n_buffer->clear();\n       // Poll isn't strictly necessary for now. But without it, disconnect is hard to detect.",
    "llm_generated_patch": "--- a/core/jni/com_android_internal_os_ZygoteCommandBuffer.cpp\n+++ b/core/jni/com_android_internal_os_ZygoteCommandBuffer.cpp\n@@ -429,18 +429,12 @@ jboolean com_android_internal_os_ZygoteCommandBuffer_nativeForkRepeatedly(\n     fail_fn_z(\"Failed to retrieve session socket timeout\");\n   }\n \n-  struct ucred credentials;\n-  socklen_t cred_size = sizeof credentials;\n-  if (getsockopt(n_buffer->getFd(), SOL_SOCKET, SO_PEERCRED, &credentials, &cred_size) == -1\n-      || cred_size != sizeof credentials) {\n-    fail_fn_1(CREATE_ERROR(\"ForkMany failed to get initial credentials, %s\", strerror(errno)));\n-  }\n-\n+  uid_t peerUid = getSocketPeerUid(session_socket, fail_fn_1);\n+  if (peerUid != static_cast<uid_t>(expected_uid)) {\n+    return JNI_FALSE;\n+  }\n+ \n   bool first_time = true;\n   do {\n-    if (credentials.uid != static_cast<uid_t>(expected_uid)) {\n-      return JNI_FALSE;\n-    }\n     n_buffer->readAllLines(first_time ? fail_fn_1 : fail_fn_n);\n     n_buffer->reset();\n     int pid = zygote::forkApp(env, /* no pipe FDs */ -1, -1, session_socket_fds,\n@@ -473,6 +467,7 @@ jboolean com_android_internal_os_ZygoteCommandBuffer_nativeForkRepeatedly(\n     // Clear buffer and get count from next command.\n     n_buffer->clear();\n     for (;;) {\n+      bool valid_session_socket = true;\n       // Poll isn't strictly necessary for now. But without it, disconnect is hard to detect.\n       int poll_res = TEMP_FAILURE_RETRY(poll(fd_structs, 2, -1 /* infinite timeout */));\n       if ((fd_structs[SESSION_IDX].revents & POLLIN) != 0) {",
    "metrics": {
      "relative_line_count_similarity": 0.9688,
      "normalized_edit_similarity": 0.7301,
      "token_level_edit_distance": 81,
      "codebert_score": {
        "precision": 0.9381,
        "recall": 0.9742,
        "f1": 0.9558,
        "f3": 0.9705
      },
      "token_count_upstream": 146,
      "token_count_downstream": 164,
      "token_count_total": 310,
      "cosine_similarity_openai": 0.9846
    }
  },
  {
    "cve_id": "ASB-A-318374503",
    "downstream_version": "13",
    "file_name": "system/stack/btm/btm_sec.cc",
    "runtime_seconds": 4.97,
    "rej_file_diff": "--- system/stack/btm/btm_sec.cc\n+++ system/stack/btm/btm_sec.cc\n@@ -267,7 +267,6 @@ static bool access_secure_service_from_temp_bond(const tBTM_SEC_DEV_REC* p_dev_r\n                                                  bool locally_initiated,\n                                                  uint16_t security_req) {\n   return !locally_initiated && (security_req & BTM_SEC_IN_AUTHENTICATE) &&\n-         p_dev_rec->sec_rec.is_device_authenticated() &&\n          p_dev_rec->sec_rec.is_bond_type_temporary();\n }",
    "llm_generated_patch": "--- a/system/stack/btm/btm_sec.cc\n+++ b/system/stack/btm/btm_sec.cc\n@@ -267,7 +267,6 @@ static bool access_secure_service_from_temp_bond(const tBTM_SEC_DEV_REC* p_dev_r\n                                                  bool locally_initiated,\n                                                  uint16_t security_req) {\n   return !locally_initiated && (security_req & BTM_SEC_IN_AUTHENTICATE) &&\n-    p_dev_rec->is_device_authenticated() &&\n     p_dev_rec->is_bond_type_temporary();\n }",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 0.8873,
      "token_level_edit_distance": 8,
      "codebert_score": {
        "precision": 0.9763,
        "recall": 0.9788,
        "f1": 0.9776,
        "f3": 0.9786
      },
      "token_count_upstream": 30,
      "token_count_downstream": 30,
      "token_count_total": 60,
      "cosine_similarity_openai": 0.9884
    }
  },
  {
    "cve_id": "ASB-A-318374503",
    "downstream_version": "14",
    "file_name": "system/stack/btm/btm_sec.cc",
    "runtime_seconds": 3.85,
    "rej_file_diff": "--- system/stack/btm/btm_sec.cc\n+++ system/stack/btm/btm_sec.cc\n@@ -267,7 +267,6 @@ static bool access_secure_service_from_temp_bond(const tBTM_SEC_DEV_REC* p_dev_r\n                                                  bool locally_initiated,\n                                                  uint16_t security_req) {\n   return !locally_initiated && (security_req & BTM_SEC_IN_AUTHENTICATE) &&\n-         p_dev_rec->sec_rec.is_device_authenticated() &&\n          p_dev_rec->sec_rec.is_bond_type_temporary();\n }",
    "llm_generated_patch": "--- a/system/stack/btm/btm_sec.cc\n+++ b/system/stack/btm/btm_sec.cc\n@@ -267,7 +267,6 @@ static bool access_secure_service_from_temp_bond(const tBTM_SEC_DEV_REC* p_dev_r\n                                                  bool locally_initiated,\n                                                  uint16_t security_req) {\n   return !locally_initiated && (security_req & BTM_SEC_IN_AUTHENTICATE) &&\n-    p_dev_rec->is_device_authenticated() &&\n     p_dev_rec->is_bond_type_temporary();\n }",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 0.8873,
      "token_level_edit_distance": 8,
      "codebert_score": {
        "precision": 0.9763,
        "recall": 0.9788,
        "f1": 0.9776,
        "f3": 0.9786
      },
      "token_count_upstream": 30,
      "token_count_downstream": 30,
      "token_count_total": 60,
      "cosine_similarity_openai": 0.9884
    }
  },
  {
    "cve_id": "ASB-A-336323279",
    "downstream_version": "13",
    "file_name": "services/core/java/com/android/server/appop/AppOpsService.java",
    "runtime_seconds": 88.45,
    "rej_file_diff": "--- services/core/java/com/android/server/appop/AppOpsService.java\n+++ services/core/java/com/android/server/appop/AppOpsService.java\n@@ -1563,19 +1563,29 @@ public class AppOpsService extends IAppOpsService.Stub {\n     private ArrayList<AppOpsManager.OpEntry> collectOps(Ops pkgOps, int[] ops,\n             String persistentDeviceId) {\n         ArrayList<AppOpsManager.OpEntry> resOps = null;\n+        boolean shouldReturnRestrictedAppOps = mContext.checkPermission(\n+                Manifest.permission.GET_APP_OPS_STATS,\n+                Binder.getCallingPid(), Binder.getCallingUid())\n+                == PackageManager.PERMISSION_GRANTED;\n         if (ops == null) {\n             resOps = new ArrayList<>();\n-            for (int j=0; j<pkgOps.size(); j++) {\n+            for (int j = 0; j < pkgOps.size(); j++) {\n                 Op curOp = pkgOps.valueAt(j);\n+                if (opRestrictsRead(curOp.op) && !shouldReturnRestrictedAppOps) {\n+                    continue;\n+                }\n                 resOps.add(getOpEntryForResult(curOp, persistentDeviceId));\n             }\n         } else {\n-            for (int j=0; j<ops.length; j++) {\n+            for (int j = 0; j < ops.length; j++) {\n                 Op curOp = pkgOps.get(ops[j]);\n                 if (curOp != null) {\n                     if (resOps == null) {\n                         resOps = new ArrayList<>();\n                     }\n+                    if (opRestrictsRead(curOp.op) && !shouldReturnRestrictedAppOps) {\n+                        continue;\n+                    }\n                     resOps.add(getOpEntryForResult(curOp, persistentDeviceId));\n                 }\n             }",
    "llm_generated_patch": "--- a/services/core/java/com/android/server/appop/AppOpsService.java\n+++ b/services/core/java/com/android/server/appop/AppOpsService.java\n@@ -1564,18 +1564,28 @@\n         final long elapsedNow = SystemClock.elapsedRealtime();\n+        boolean shouldReturnRestrictedAppOps = mContext.checkPermission(\n+                Manifest.permission.GET_APP_OPS_STATS,\n+                Binder.getCallingPid(), Binder.getCallingUid())\n+                == PackageManager.PERMISSION_GRANTED;\n         if (ops == null) {\n             resOps = new ArrayList<>();\n             for (int j=0; j<pkgOps.size(); j++) {\n                 Op curOp = pkgOps.valueAt(j);\n+                if (opRestrictsRead(curOp.op) && !shouldReturnRestrictedAppOps) {\n+                    continue;\n+                }\n                 resOps.add(getOpEntryForResult(curOp, elapsedNow));\n             }\n         } else {\n             for (int j=0; j<ops.length; j++) {\n                 Op curOp = pkgOps.get(ops[j]);\n                 if (curOp != null) {\n                     if (resOps == null) {\n                         resOps = new ArrayList<>();\n                     }\n+                    if (opRestrictsRead(curOp.op) && !shouldReturnRestrictedAppOps) {\n+                        continue;\n+                    }\n                     resOps.add(getOpEntryForResult(curOp, elapsedNow));\n                 }\n             }",
    "metrics": {
      "relative_line_count_similarity": 0.8824,
      "normalized_edit_similarity": 0.736,
      "token_level_edit_distance": 67,
      "codebert_score": {
        "precision": 0.9103,
        "recall": 0.898,
        "f1": 0.9041,
        "f3": 0.8992
      },
      "token_count_upstream": 138,
      "token_count_downstream": 100,
      "token_count_total": 238,
      "cosine_similarity_openai": 0.9221
    }
  },
  {
    "cve_id": "ASB-A-336323279",
    "downstream_version": "14",
    "file_name": "services/core/java/com/android/server/appop/AppOpsService.java",
    "runtime_seconds": 83.2,
    "rej_file_diff": "--- services/core/java/com/android/server/appop/AppOpsService.java\n+++ services/core/java/com/android/server/appop/AppOpsService.java\n@@ -1563,19 +1563,29 @@ public class AppOpsService extends IAppOpsService.Stub {\n     private ArrayList<AppOpsManager.OpEntry> collectOps(Ops pkgOps, int[] ops,\n             String persistentDeviceId) {\n         ArrayList<AppOpsManager.OpEntry> resOps = null;\n+        boolean shouldReturnRestrictedAppOps = mContext.checkPermission(\n+                Manifest.permission.GET_APP_OPS_STATS,\n+                Binder.getCallingPid(), Binder.getCallingUid())\n+                == PackageManager.PERMISSION_GRANTED;\n         if (ops == null) {\n             resOps = new ArrayList<>();\n-            for (int j=0; j<pkgOps.size(); j++) {\n+            for (int j = 0; j < pkgOps.size(); j++) {\n                 Op curOp = pkgOps.valueAt(j);\n+                if (opRestrictsRead(curOp.op) && !shouldReturnRestrictedAppOps) {\n+                    continue;\n+                }\n                 resOps.add(getOpEntryForResult(curOp, persistentDeviceId));\n             }\n         } else {\n-            for (int j=0; j<ops.length; j++) {\n+            for (int j = 0; j < ops.length; j++) {\n                 Op curOp = pkgOps.get(ops[j]);\n                 if (curOp != null) {\n                     if (resOps == null) {\n                         resOps = new ArrayList<>();\n                     }\n+                    if (opRestrictsRead(curOp.op) && !shouldReturnRestrictedAppOps) {\n+                        continue;\n+                    }\n                     resOps.add(getOpEntryForResult(curOp, persistentDeviceId));\n                 }\n             }",
    "llm_generated_patch": "--- a/services/core/java/com/android/server/appop/AppOpsService.java\n+++ b/services/core/java/com/android/server/appop/AppOpsService.java\n@@ -1148,21 +1148,31 @@\n     private ArrayList<AppOpsManager.OpEntry> collectOps(Ops pkgOps, int[] ops) {\n         ArrayList<AppOpsManager.OpEntry> resOps = null;\n+        boolean shouldReturnRestrictedAppOps = mContext.checkPermission(\n+                Manifest.permission.GET_APP_OPS_STATS,\n+                Binder.getCallingPid(), Binder.getCallingUid())\n+                == PackageManager.PERMISSION_GRANTED;\n         if (ops == null) {\n             resOps = new ArrayList<>();\n-            for (int j=0; j<pkgOps.size(); j++) {\n+            for (int j = 0; j < pkgOps.size(); j++) {\n                 Op curOp = pkgOps.valueAt(j);\n+                if (opRestrictsRead(curOp.op) && !shouldReturnRestrictedAppOps) {\n+                    continue;\n+                }\n                 resOps.add(getOpEntryForResult(curOp));\n             }\n         } else {\n-            for (int j=0; j<ops.length; j++) {\n+            for (int j = 0; j < ops.length; j++) {\n                 Op curOp = pkgOps.get(ops[j]);\n                 if (curOp != null) {\n                     if (resOps == null) {\n                         resOps = new ArrayList<>();\n                     }\n+                    if (opRestrictsRead(curOp.op) && !shouldReturnRestrictedAppOps) {\n+                        continue;\n+                    }\n                     resOps.add(getOpEntryForResult(curOp));\n                 }\n             }\n         }\n         return resOps;\n     }",
    "metrics": {
      "relative_line_count_similarity": 0.9412,
      "normalized_edit_similarity": 0.913,
      "token_level_edit_distance": 26,
      "codebert_score": {
        "precision": 0.952,
        "recall": 0.9358,
        "f1": 0.9438,
        "f3": 0.9374
      },
      "token_count_upstream": 138,
      "token_count_downstream": 132,
      "token_count_total": 270,
      "cosine_similarity_openai": 0.9662
    }
  },
  {
    "cve_id": "ASB-A-293602317",
    "downstream_version": "12L",
    "file_name": "services/core/java/com/android/server/pm/UserManagerService.java",
    "runtime_seconds": 41.56,
    "rej_file_diff": "--- services/core/java/com/android/server/pm/UserManagerService.java\n+++ services/core/java/com/android/server/pm/UserManagerService.java\n@@ -4843,7 +4854,7 @@ public class UserManagerService extends IUserManager.Stub {\n             @UserIdInt int parentId, boolean preCreate, @Nullable String[] disallowedPackages,\n             @NonNull TimingsTraceAndSlog t, @Nullable Object token)\n             throws UserManager.CheckedUserOperationException {\n-\n+        String truncatedName = truncateString(name);\n         final UserTypeDetails userTypeDetails = mUserTypes.get(userType);\n         if (userTypeDetails == null) {\n             throwCheckedUserOperationException(",
    "llm_generated_patch": "--- a/services/core/java/com/android/server/pm/UserManagerService.java\n+++ b/services/core/java/com/android/server/pm/UserManagerService.java\n@@ -4845,6 +4845,7 @@\n             @NonNull String userType, @UserInfoFlag int flags, @UserIdInt int parentId,\n             boolean preCreate, @Nullable String[] disallowedPackages,\n             @NonNull TimingsTraceAndSlog t, @Nullable Object token)\n-                    throws UserManager.CheckedUserOperationException {\n+                    throws UserManager.CheckedUserOperationException {\n+        String truncatedName = truncateString(name);\n         final UserTypeDetails userTypeDetails = mUserTypes.get(userType);\n         if (userTypeDetails == null) {\n             Slog.e(LOG_TAG, \"Cannot create user of invalid user type: \" + userType);",
    "metrics": {
      "relative_line_count_similarity": 0.9091,
      "normalized_edit_similarity": 0.748,
      "token_level_edit_distance": 33,
      "codebert_score": {
        "precision": 0.8872,
        "recall": 0.9083,
        "f1": 0.8976,
        "f3": 0.9061
      },
      "token_count_upstream": 48,
      "token_count_downstream": 62,
      "token_count_total": 110,
      "cosine_similarity_openai": 0.9577
    }
  },
  {
    "cve_id": "ASB-A-293602317",
    "downstream_version": "13",
    "file_name": "services/core/java/com/android/server/pm/UserManagerService.java",
    "runtime_seconds": 81.53,
    "rej_file_diff": "--- services/core/java/com/android/server/pm/UserManagerService.java\n+++ services/core/java/com/android/server/pm/UserManagerService.java\n@@ -4843,7 +4854,7 @@ public class UserManagerService extends IUserManager.Stub {\n             @UserIdInt int parentId, boolean preCreate, @Nullable String[] disallowedPackages,\n             @NonNull TimingsTraceAndSlog t, @Nullable Object token)\n             throws UserManager.CheckedUserOperationException {\n-\n+        String truncatedName = truncateString(name);\n         final UserTypeDetails userTypeDetails = mUserTypes.get(userType);\n         if (userTypeDetails == null) {\n             throwCheckedUserOperationException(",
    "llm_generated_patch": "--- a/services/core/java/com/android/server/pm/UserManagerService.java\n+++ b/services/core/java/com/android/server/pm/UserManagerService.java\n@@ -4844,7 +4844,8 @@\n             @UserIdInt int parentId, boolean preCreate, @Nullable String[] disallowedPackages,\n             @NonNull TimingsTraceAndSlog t, @Nullable Object token)\n                     throws UserManager.CheckedUserOperationException {\n+        String truncatedName = truncateString(name);\n         final UserTypeDetails userTypeDetails = mUserTypes.get(userType);\n         if (userTypeDetails == null) {\n             Slog.e(LOG_TAG, \"Cannot create user of invalid user type: \" + userType);\n@@ -4874,8 +4875,8 @@\n         // Try to use a pre-created user (if available).\n         if (!preCreate && parentId < 0 && isUserTypeEligibleForPreCreation(userTypeDetails)) {\n             final UserInfo preCreatedUser = convertPreCreatedUserIfPossible(userType, flags,\n-                    name, token);\n+                    truncatedName, token);\n             if (preCreatedUser != null) {\n                 return preCreatedUser;\n             }\n@@ -4925,7 +4926,7 @@\n                         flags &= ~UserInfo.FLAG_EPHEMERAL;\n                     }\n \n-                    userInfo = new UserInfo(userId, name, null, flags, userType);\n+                    userInfo = new UserInfo(userId, truncatedName, null, flags, userType);\n                     userInfo.serialNumber = mNextSerialNumber++;\n                     userInfo.creationTime = getCreationTime();\n                     userInfo.partial = true;",
    "metrics": {
      "relative_line_count_similarity": 0.0,
      "normalized_edit_similarity": 0.3399,
      "token_level_edit_distance": 159,
      "codebert_score": {
        "precision": 0.7911,
        "recall": 0.9165,
        "f1": 0.8492,
        "f3": 0.9022
      },
      "token_count_upstream": 48,
      "token_count_downstream": 128,
      "token_count_total": 176,
      "cosine_similarity_openai": 0.9115
    }
  },
  {
    "cve_id": "ASB-A-293602317",
    "downstream_version": "12",
    "file_name": "services/core/java/com/android/server/pm/UserManagerService.java",
    "runtime_seconds": 30.56,
    "rej_file_diff": "--- services/core/java/com/android/server/pm/UserManagerService.java\n+++ services/core/java/com/android/server/pm/UserManagerService.java\n@@ -4843,7 +4854,7 @@ public class UserManagerService extends IUserManager.Stub {\n             @UserIdInt int parentId, boolean preCreate, @Nullable String[] disallowedPackages,\n             @NonNull TimingsTraceAndSlog t, @Nullable Object token)\n             throws UserManager.CheckedUserOperationException {\n-\n+        String truncatedName = truncateString(name);\n         final UserTypeDetails userTypeDetails = mUserTypes.get(userType);\n         if (userTypeDetails == null) {\n             throwCheckedUserOperationException(",
    "llm_generated_patch": "--- a/services/core/java/com/android/server/pm/UserManagerService.java\n+++ b/services/core/java/com/android/server/pm/UserManagerService.java\n@@ -4842,6 +4842,7 @@\n             boolean preCreate, @Nullable String[] disallowedPackages,\n             @NonNull TimingsTraceAndSlog t, @Nullable Object token)\n                     throws UserManager.CheckedUserOperationException {\n+        String truncatedName = truncateString(name);\n         final UserTypeDetails userTypeDetails = mUserTypes.get(userType);\n         if (userTypeDetails == null) {\n             Slog.e(LOG_TAG, \"Cannot create user of invalid user type: \" + userType);",
    "metrics": {
      "relative_line_count_similarity": 0.9091,
      "normalized_edit_similarity": 0.7222,
      "token_level_edit_distance": 36,
      "codebert_score": {
        "precision": 0.9184,
        "recall": 0.9128,
        "f1": 0.9156,
        "f3": 0.9133
      },
      "token_count_upstream": 48,
      "token_count_downstream": 48,
      "token_count_total": 96,
      "cosine_similarity_openai": 0.9422
    }
  },
  {
    "cve_id": "ASB-A-230492947",
    "downstream_version": "11",
    "file_name": "services/core/java/com/android/server/wm/ActivityTaskManagerService.java",
    "runtime_seconds": 88.09,
    "rej_file_diff": "--- services/core/java/com/android/server/wm/ActivityTaskManagerService.java\n+++ services/core/java/com/android/server/wm/ActivityTaskManagerService.java\n@@ -1411,29 +1411,39 @@ public class ActivityTaskManagerService extends IActivityTaskManager.Stub {\n \n             final long origId = Binder.clearCallingIdentity();\n             // TODO(b/64750076): Check if calling pid should really be -1.\n-            final int res = getActivityStartController()\n-                    .obtainStarter(intent, \"startNextMatchingActivity\")\n-                    .setCaller(r.app.getThread())\n-                    .setResolvedType(r.resolvedType)\n-                    .setActivityInfo(aInfo)\n-                    .setResultTo(resultTo != null ? resultTo.token : null)\n-                    .setResultWho(resultWho)\n-                    .setRequestCode(requestCode)\n-                    .setCallingPid(-1)\n-                    .setCallingUid(r.launchedFromUid)\n-                    .setCallingPackage(r.launchedFromPackage)\n-                    .setCallingFeatureId(r.launchedFromFeatureId)\n-                    .setRealCallingPid(-1)\n-                    .setRealCallingUid(r.launchedFromUid)\n-                    .setActivityOptions(options)\n-                    .execute();\n-            Binder.restoreCallingIdentity(origId);\n+            try {\n+                if (options == null) {\n+                    options = new SafeActivityOptions(ActivityOptions.makeBasic());\n+                }\n \n-            r.finishing = wasFinishing;\n-            if (res != ActivityManager.START_SUCCESS) {\n-                return false;\n+                // Fixes b/230492947\n+                // Prevents background activity launch through #startNextMatchingActivity\n+                // An activity going into the background could still go back to the foreground\n+                // if the intent used matches both:\n+                // - the activity in the background\n+                // - a second activity.\n+                options.getOptions(r).setAvoidMoveToFront();\n+                final int res = getActivityStartController()\n+                        .obtainStarter(intent, \"startNextMatchingActivity\")\n+                        .setCaller(r.app.getThread())\n+                        .setResolvedType(r.resolvedType)\n+                        .setActivityInfo(aInfo)\n+                        .setResultTo(resultTo != null ? resultTo.token : null)\n+                        .setResultWho(resultWho)\n+                        .setRequestCode(requestCode)\n+                        .setCallingPid(-1)\n+                        .setCallingUid(r.launchedFromUid)\n+                        .setCallingPackage(r.launchedFromPackage)\n+                        .setCallingFeatureId(r.launchedFromFeatureId)\n+                        .setRealCallingPid(-1)\n+                        .setRealCallingUid(r.launchedFromUid)\n+                        .setActivityOptions(options)\n+                        .execute();\n+                r.finishing = wasFinishing;\n+                return res == ActivityManager.START_SUCCESS;\n+            } finally {\n+                Binder.restoreCallingIdentity(origId);\n             }\n-            return true;\n         }\n     }",
    "llm_generated_patch": "--- a/services/core/java/com/android/server/wm/ActivityTaskManagerService.java\n+++ b/services/core/java/com/android/server/wm/ActivityTaskManagerService.java\n@@ -1414,23 +1414,30 @@\n \n             final long origId = Binder.clearCallingIdentity();\n             // TODO(b/64750076): Check if calling pid should really be -1.\n-            final int res = getActivityStartController()\n-                    .obtainStarter(intent, \"startNextMatchingActivity\")\n-                    .setCaller(r.app.getThread())\n-                    .setResolvedType(r.resolvedType)\n-                    .setActivityInfo(aInfo)\n-                    .setResultTo(resultTo != null ? resultTo.appToken : null)\n-                    .setResultWho(resultWho)\n-                    .setRequestCode(requestCode)\n-                    .setCallingPid(-1)\n-                    .setCallingUid(r.launchedFromUid)\n-                    .setCallingPackage(r.launchedFromPackage)\n-                    .setCallingFeatureId(r.launchedFromFeatureId)\n-                    .setRealCallingPid(-1)\n-                    .setRealCallingUid(r.launchedFromUid)\n-                    .setActivityOptions(options)\n-                    .execute();\n-            Binder.restoreCallingIdentity(origId);\n-\n-            r.finishing = wasFinishing;\n-            if (res != ActivityManager.START_SUCCESS) {\n-                return false;\n+            try {\n+                if (options == null) {\n+                    options = new SafeActivityOptions(ActivityOptions.makeBasic());\n+                }\n+\n+                // Fixes b/230492947\n+                // Prevents background activity launch through #startNextMatchingActivity\n+                // An activity going into the background could still go back to the foreground\n+                // if the intent used matches both:\n+                // - the activity in the background\n+                // - a second activity.\n+                options.getOptions(r).setAvoidMoveToFront();\n+                final int res = getActivityStartController()\n+                        .obtainStarter(intent, \"startNextMatchingActivity\")\n+                        .setCaller(r.app.getThread())\n+                        .setResolvedType(r.resolvedType)\n+                        .setActivityInfo(aInfo)\n+                        .setResultTo(resultTo != null ? resultTo.appToken : null)\n+                        .setResultWho(resultWho)\n+                        .setRequestCode(requestCode)\n+                        .setCallingPid(-1)\n+                        .setCallingUid(r.launchedFromUid)\n+                        .setCallingPackage(r.launchedFromPackage)\n+                        .setCallingFeatureId(r.launchedFromFeatureId)\n+                        .setRealCallingPid(-1)\n+                        .setRealCallingUid(r.launchedFromUid)\n+                        .setActivityOptions(options)\n+                        .execute();\n+                r.finishing = wasFinishing;\n+                return res == ActivityManager.START_SUCCESS;\n+            } finally {\n+                Binder.restoreCallingIdentity(origId);\n             }\n-            return true;\n         }\n     }",
    "metrics": {
      "relative_line_count_similarity": 0.9667,
      "normalized_edit_similarity": 0.8729,
      "token_level_edit_distance": 39,
      "codebert_score": {
        "precision": 0.974,
        "recall": 0.9709,
        "f1": 0.9724,
        "f3": 0.9712
      },
      "token_count_upstream": 218,
      "token_count_downstream": 214,
      "token_count_total": 432,
      "cosine_similarity_openai": 0.9902
    }
  },
  {
    "cve_id": "ASB-A-230492947",
    "downstream_version": "12L",
    "file_name": "services/core/java/com/android/server/wm/ActivityTaskManagerService.java",
    "runtime_seconds": 78.43,
    "rej_file_diff": "--- services/core/java/com/android/server/wm/ActivityTaskManagerService.java\n+++ services/core/java/com/android/server/wm/ActivityTaskManagerService.java\n@@ -1411,29 +1411,39 @@ public class ActivityTaskManagerService extends IActivityTaskManager.Stub {\n \n             final long origId = Binder.clearCallingIdentity();\n             // TODO(b/64750076): Check if calling pid should really be -1.\n-            final int res = getActivityStartController()\n-                    .obtainStarter(intent, \"startNextMatchingActivity\")\n-                    .setCaller(r.app.getThread())\n-                    .setResolvedType(r.resolvedType)\n-                    .setActivityInfo(aInfo)\n-                    .setResultTo(resultTo != null ? resultTo.token : null)\n-                    .setResultWho(resultWho)\n-                    .setRequestCode(requestCode)\n-                    .setCallingPid(-1)\n-                    .setCallingUid(r.launchedFromUid)\n-                    .setCallingPackage(r.launchedFromPackage)\n-                    .setCallingFeatureId(r.launchedFromFeatureId)\n-                    .setRealCallingPid(-1)\n-                    .setRealCallingUid(r.launchedFromUid)\n-                    .setActivityOptions(options)\n-                    .execute();\n-            Binder.restoreCallingIdentity(origId);\n+            try {\n+                if (options == null) {\n+                    options = new SafeActivityOptions(ActivityOptions.makeBasic());\n+                }\n \n-            r.finishing = wasFinishing;\n-            if (res != ActivityManager.START_SUCCESS) {\n-                return false;\n+                // Fixes b/230492947\n+                // Prevents background activity launch through #startNextMatchingActivity\n+                // An activity going into the background could still go back to the foreground\n+                // if the intent used matches both:\n+                // - the activity in the background\n+                // - a second activity.\n+                options.getOptions(r).setAvoidMoveToFront();\n+                final int res = getActivityStartController()\n+                        .obtainStarter(intent, \"startNextMatchingActivity\")\n+                        .setCaller(r.app.getThread())\n+                        .setResolvedType(r.resolvedType)\n+                        .setActivityInfo(aInfo)\n+                        .setResultTo(resultTo != null ? resultTo.token : null)\n+                        .setResultWho(resultWho)\n+                        .setRequestCode(requestCode)\n+                        .setCallingPid(-1)\n+                        .setCallingUid(r.launchedFromUid)\n+                        .setCallingPackage(r.launchedFromPackage)\n+                        .setCallingFeatureId(r.launchedFromFeatureId)\n+                        .setRealCallingPid(-1)\n+                        .setRealCallingUid(r.launchedFromUid)\n+                        .setActivityOptions(options)\n+                        .execute();\n+                r.finishing = wasFinishing;\n+                return res == ActivityManager.START_SUCCESS;\n+            } finally {\n+                Binder.restoreCallingIdentity(origId);\n             }\n-            return true;\n         }\n     }",
    "llm_generated_patch": "--- a/services/core/java/com/android/server/wm/ActivityTaskManagerService.java\n+++ b/services/core/java/com/android/server/wm/ActivityTaskManagerService.java\n@@ -1406,27 +1406,35 @@\n                 resultTo.removeResultsLocked(r, resultWho, requestCode);\n             }\n\n-            final long origId = Binder.clearCallingIdentity();\n-            // TODO(b/64750076): Check if calling pid should really be -1.\n-            final int res = getActivityStartController()\n-                    .obtainStarter(intent, \"startNextMatchingActivity\")\n-                    .setCaller(r.app.getThread())\n-                    .setResolvedType(r.resolvedType)\n-                    .setActivityInfo(aInfo)\n-                    .setResultTo(resultTo != null ? resultTo.appToken : null)\n-                    .setResultWho(resultWho)\n-                    .setRequestCode(requestCode)\n-                    .setCallingPid(-1)\n-                    .setCallingUid(r.launchedFromUid)\n-                    .setCallingPackage(r.launchedFromPackage)\n-                    .setCallingFeatureId(r.launchedFromFeatureId)\n-                    .setRealCallingPid(-1)\n-                    .setRealCallingUid(r.launchedFromUid)\n-                    .setActivityOptions(options)\n-                    .execute();\n-            Binder.restoreCallingIdentity(origId);\n+            final long origId = Binder.clearCallingIdentity();\n+            try {\n+                // TODO(b/64750076): Check if calling pid should really be -1.\n+                if (options == null) {\n+                    options = new SafeActivityOptions(ActivityOptions.makeBasic());\n+                }\n\n-            r.finishing = wasFinishing;\n-            if (res != ActivityManager.START_SUCCESS) {\n-                return false;\n+                // Fixes b/230492947\n+                // Prevents background activity launch through #startNextMatchingActivity\n+                // An activity going into the background could still go back to the foreground\n+                // if the intent used matches both:\n+                // - the activity in the background\n+                // - a second activity.\n+                options.getOptions(r).setAvoidMoveToFront();\n+                final int res = getActivityStartController()\n+                        .obtainStarter(intent, \"startNextMatchingActivity\")\n+                        .setCaller(r.app.getThread())\n+                        .setResolvedType(r.resolvedType)\n+                        .setActivityInfo(aInfo)\n+                        .setResultTo(resultTo != null ? resultTo.appToken : null)\n+                        .setResultWho(resultWho)\n+                        .setRequestCode(requestCode)\n+                        .setCallingPid(-1)\n+                        .setCallingUid(r.launchedFromUid)\n+                        .setCallingPackage(r.launchedFromPackage)\n+                        .setCallingFeatureId(r.launchedFromFeatureId)\n+                        .setRealCallingPid(-1)\n+                        .setRealCallingUid(r.launchedFromUid)\n+                        .setActivityOptions(options)\n+                        .execute();\n+                r.finishing = wasFinishing;\n+                return res == ActivityManager.START_SUCCESS;\n+            } finally {\n+                Binder.restoreCallingIdentity(origId);\n             }\n-            return true;\n         }\n     }",
    "metrics": {
      "relative_line_count_similarity": 0.9333,
      "normalized_edit_similarity": 0.8979,
      "token_level_edit_distance": 54,
      "codebert_score": {
        "precision": 0.9389,
        "recall": 0.9405,
        "f1": 0.9397,
        "f3": 0.9403
      },
      "token_count_upstream": 218,
      "token_count_downstream": 235,
      "token_count_total": 453,
      "cosine_similarity_openai": 0.9832
    }
  },
  {
    "cve_id": "ASB-A-230492947",
    "downstream_version": "12",
    "file_name": "services/core/java/com/android/server/wm/ActivityTaskManagerService.java",
    "runtime_seconds": 11.1,
    "rej_file_diff": "--- services/core/java/com/android/server/wm/ActivityTaskManagerService.java\n+++ services/core/java/com/android/server/wm/ActivityTaskManagerService.java\n@@ -1411,29 +1411,39 @@ public class ActivityTaskManagerService extends IActivityTaskManager.Stub {\n \n             final long origId = Binder.clearCallingIdentity();\n             // TODO(b/64750076): Check if calling pid should really be -1.\n-            final int res = getActivityStartController()\n-                    .obtainStarter(intent, \"startNextMatchingActivity\")\n-                    .setCaller(r.app.getThread())\n-                    .setResolvedType(r.resolvedType)\n-                    .setActivityInfo(aInfo)\n-                    .setResultTo(resultTo != null ? resultTo.token : null)\n-                    .setResultWho(resultWho)\n-                    .setRequestCode(requestCode)\n-                    .setCallingPid(-1)\n-                    .setCallingUid(r.launchedFromUid)\n-                    .setCallingPackage(r.launchedFromPackage)\n-                    .setCallingFeatureId(r.launchedFromFeatureId)\n-                    .setRealCallingPid(-1)\n-                    .setRealCallingUid(r.launchedFromUid)\n-                    .setActivityOptions(options)\n-                    .execute();\n-            Binder.restoreCallingIdentity(origId);\n+            try {\n+                if (options == null) {\n+                    options = new SafeActivityOptions(ActivityOptions.makeBasic());\n+                }\n \n-            r.finishing = wasFinishing;\n-            if (res != ActivityManager.START_SUCCESS) {\n-                return false;\n+                // Fixes b/230492947\n+                // Prevents background activity launch through #startNextMatchingActivity\n+                // An activity going into the background could still go back to the foreground\n+                // if the intent used matches both:\n+                // - the activity in the background\n+                // - a second activity.\n+                options.getOptions(r).setAvoidMoveToFront();\n+                final int res = getActivityStartController()\n+                        .obtainStarter(intent, \"startNextMatchingActivity\")\n+                        .setCaller(r.app.getThread())\n+                        .setResolvedType(r.resolvedType)\n+                        .setActivityInfo(aInfo)\n+                        .setResultTo(resultTo != null ? resultTo.token : null)\n+                        .setResultWho(resultWho)\n+                        .setRequestCode(requestCode)\n+                        .setCallingPid(-1)\n+                        .setCallingUid(r.launchedFromUid)\n+                        .setCallingPackage(r.launchedFromPackage)\n+                        .setCallingFeatureId(r.launchedFromFeatureId)\n+                        .setRealCallingPid(-1)\n+                        .setRealCallingUid(r.launchedFromUid)\n+                        .setActivityOptions(options)\n+                        .execute();\n+                r.finishing = wasFinishing;\n+                return res == ActivityManager.START_SUCCESS;\n+            } finally {\n+                Binder.restoreCallingIdentity(origId);\n             }\n-            return true;\n         }\n     }",
    "llm_generated_patch": "--- a/services/core/java/com/android/server/wm/ActivityTaskManagerService.java\n+++ b/services/core/java/com/android/server/wm/ActivityTaskManagerService.java\n@@ -1411,33 +1411,39 @@\n \n             final long origId = Binder.clearCallingIdentity();\n             // TODO(b/64750076): Check if calling pid should really be -1.\n-            final int res = getActivityStartController()\n-                    .obtainStarter(intent, \"startNextMatchingActivity\")\n-                    .setCaller(r.app.getThread())\n-                    .setResolvedType(r.resolvedType)\n-                    .setActivityInfo(aInfo)\n-                    .setResultTo(resultTo != null ? resultTo.appToken : null)\n-                    .setResultWho(resultWho)\n-                    .setRequestCode(requestCode)\n-                    .setCallingPid(-1)\n-                    .setCallingUid(r.launchedFromUid)\n-                    .setCallingPackage(r.launchedFromPackage)\n-                    .setCallingFeatureId(r.launchedFromFeatureId)\n-                    .setRealCallingPid(-1)\n-                    .setRealCallingUid(r.launchedFromUid)\n-                    .setActivityOptions(options)\n-                    .execute();\n-            Binder.restoreCallingIdentity(origId);\n+            try {\n+                if (options == null) {\n+                    options = new SafeActivityOptions(ActivityOptions.makeBasic());\n+                }\n \n-            r.finishing = wasFinishing;\n-            if (res != ActivityManager.START_SUCCESS) {\n-                return false;\n+                // Fixes b/230492947\n+                // Prevents background activity launch through #startNextMatchingActivity\n+                // An activity going into the background could still go back to the foreground\n+                // if the intent used matches both:\n+                // - the activity in the background\n+                // - a second activity.\n+                options.getOptions(r).setAvoidMoveToFront();\n+                final int res = getActivityStartController()\n+                        .obtainStarter(intent, \"startNextMatchingActivity\")\n+                        .setCaller(r.app.getThread())\n+                        .setResolvedType(r.resolvedType)\n+                        .setActivityInfo(aInfo)\n+                        .setResultTo(resultTo != null ? resultTo.appToken : null)\n+                        .setResultWho(resultWho)\n+                        .setRequestCode(requestCode)\n+                        .setCallingPid(-1)\n+                        .setCallingUid(r.launchedFromUid)\n+                        .setCallingPackage(r.launchedFromPackage)\n+                        .setCallingFeatureId(r.launchedFromFeatureId)\n+                        .setRealCallingPid(-1)\n+                        .setRealCallingUid(r.launchedFromUid)\n+                        .setActivityOptions(options)\n+                        .execute();\n+                r.finishing = wasFinishing;\n+                return res == ActivityManager.START_SUCCESS;\n+            } finally {\n+                Binder.restoreCallingIdentity(origId);\n             }\n-            return true;\n         }\n     }",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 0.9688,
      "token_level_edit_distance": 15,
      "codebert_score": {
        "precision": 0.9808,
        "recall": 0.9771,
        "f1": 0.979,
        "f3": 0.9775
      },
      "token_count_upstream": 218,
      "token_count_downstream": 212,
      "token_count_total": 430,
      "cosine_similarity_openai": 0.9952
    }
  },
  {
    "cve_id": "ASB-A-293602970",
    "downstream_version": "14",
    "file_name": "services/core/java/com/android/server/pm/UserManagerService.java",
    "runtime_seconds": 71.51,
    "rej_file_diff": "--- services/core/java/com/android/server/pm/UserManagerService.java\n+++ services/core/java/com/android/server/pm/UserManagerService.java\n@@ -4979,7 +4979,7 @@ public class UserManagerService extends IUserManager.Stub {\n             @UserIdInt int parentId, boolean preCreate, @Nullable String[] disallowedPackages,\n             @NonNull TimingsTraceAndSlog t, @Nullable Object token)\n             throws UserManager.CheckedUserOperationException {\n-        String truncatedName = truncateString(name);\n+        String truncatedName = truncateString(name, UserManager.MAX_USER_NAME_LENGTH);\n         final UserTypeDetails userTypeDetails = mUserTypes.get(userType);\n         if (userTypeDetails == null) {\n             throwCheckedUserOperationException(",
    "llm_generated_patch": "--- a/services/core/java/com/android/server/pm/UserManagerService.java\n+++ b/services/core/java/com/android/server/pm/UserManagerService.java\n@@ -4978,7 +4978,7 @@\n             @NonNull TimingsTraceAndSlog t, @Nullable Object token)\n             throws UserManager.CheckedUserOperationException {\n \n-        String truncatedName = truncateString(name);\n+        String truncatedName = truncateString(name, UserManager.MAX_USER_NAME_LENGTH);\n         final UserTypeDetails userTypeDetails = mUserTypes.get(userType);\n         if (userTypeDetails == null) {\n             throwCheckedUserOperationException(",
    "metrics": {
      "relative_line_count_similarity": 0.9091,
      "normalized_edit_similarity": 0.775,
      "token_level_edit_distance": 27,
      "codebert_score": {
        "precision": 0.9385,
        "recall": 0.9022,
        "f1": 0.92,
        "f3": 0.9057
      },
      "token_count_upstream": 53,
      "token_count_downstream": 39,
      "token_count_total": 92,
      "cosine_similarity_openai": 0.9248
    }
  },
  {
    "cve_id": "ASB-A-293602970",
    "downstream_version": "12L",
    "file_name": "services/core/java/com/android/server/pm/UserManagerService.java",
    "runtime_seconds": 20.3,
    "rej_file_diff": "--- services/core/java/com/android/server/pm/UserManagerService.java\n+++ services/core/java/com/android/server/pm/UserManagerService.java\n@@ -4979,7 +4979,7 @@ public class UserManagerService extends IUserManager.Stub {\n             @UserIdInt int parentId, boolean preCreate, @Nullable String[] disallowedPackages,\n             @NonNull TimingsTraceAndSlog t, @Nullable Object token)\n             throws UserManager.CheckedUserOperationException {\n-        String truncatedName = truncateString(name);\n+        String truncatedName = truncateString(name, UserManager.MAX_USER_NAME_LENGTH);\n         final UserTypeDetails userTypeDetails = mUserTypes.get(userType);\n         if (userTypeDetails == null) {\n             throwCheckedUserOperationException(",
    "llm_generated_patch": "--- a/services/core/java/com/android/server/pm/UserManagerService.java\n+++ b/services/core/java/com/android/server/pm/UserManagerService.java\n@@ -4979,7 +4979,7 @@\n             @NonNull TimingsTraceAndSlog t, @Nullable Object token)\n                     throws UserManager.CheckedUserOperationException {\n \n-        String truncatedName = truncateString(name);\n+        String truncatedName = truncateString(name, UserManager.MAX_USER_NAME_LENGTH);\n         final UserTypeDetails userTypeDetails = mUserTypes.get(userType);\n         if (userTypeDetails == null) {\n             Slog.e(LOG_TAG, \"Cannot create user of invalid user type: \" + userType);",
    "metrics": {
      "relative_line_count_similarity": 0.9091,
      "normalized_edit_similarity": 0.7083,
      "token_level_edit_distance": 35,
      "codebert_score": {
        "precision": 0.9154,
        "recall": 0.8969,
        "f1": 0.9061,
        "f3": 0.8987
      },
      "token_count_upstream": 53,
      "token_count_downstream": 49,
      "token_count_total": 102,
      "cosine_similarity_openai": 0.9274
    }
  },
  {
    "cve_id": "ASB-A-293602970",
    "downstream_version": "13",
    "file_name": "services/core/java/com/android/server/pm/UserManagerService.java",
    "runtime_seconds": 34.28,
    "rej_file_diff": "--- services/core/java/com/android/server/pm/UserManagerService.java\n+++ services/core/java/com/android/server/pm/UserManagerService.java\n@@ -4979,7 +4979,7 @@ public class UserManagerService extends IUserManager.Stub {\n             @UserIdInt int parentId, boolean preCreate, @Nullable String[] disallowedPackages,\n             @NonNull TimingsTraceAndSlog t, @Nullable Object token)\n             throws UserManager.CheckedUserOperationException {\n-        String truncatedName = truncateString(name);\n+        String truncatedName = truncateString(name, UserManager.MAX_USER_NAME_LENGTH);\n         final UserTypeDetails userTypeDetails = mUserTypes.get(userType);\n         if (userTypeDetails == null) {\n             throwCheckedUserOperationException(",
    "llm_generated_patch": "--- a/services/core/java/com/android/server/pm/UserManagerService.java\n+++ b/services/core/java/com/android/server/pm/UserManagerService.java\n@@ -4982,7 +4982,7 @@\n             @NonNull TimingsTraceAndSlog t, @Nullable Object token)\n                     throws UserManager.CheckedUserOperationException {\n \n-        String truncatedName = truncateString(name);\n+        String truncatedName = truncateString(name, UserManager.MAX_USER_NAME_LENGTH);\n         final UserTypeDetails userTypeDetails = mUserTypes.get(userType);\n         if (userTypeDetails == null) {\n             Slog.e(LOG_TAG, \"Cannot create user of invalid user type: \" + userType);",
    "metrics": {
      "relative_line_count_similarity": 0.9091,
      "normalized_edit_similarity": 0.6917,
      "token_level_edit_distance": 37,
      "codebert_score": {
        "precision": 0.9134,
        "recall": 0.8951,
        "f1": 0.9042,
        "f3": 0.8969
      },
      "token_count_upstream": 53,
      "token_count_downstream": 49,
      "token_count_total": 102,
      "cosine_similarity_openai": 0.9265
    }
  },
  {
    "cve_id": "ASB-A-304983146",
    "downstream_version": "13",
    "file_name": "services/core/java/com/android/server/appop/AppOpsService.java",
    "runtime_seconds": 52.97,
    "rej_file_diff": "--- services/core/java/com/android/server/appop/AppOpsService.java\n+++ services/core/java/com/android/server/appop/AppOpsService.java\n@@ -4342,6 +4350,36 @@ public class AppOpsService extends IAppOpsService.Stub {\n         return false;\n     }\n \n+    /**\n+     * Checks to see if the attribution tag is defined in either package or proxyPackage.\n+     * This method is intended for ProxyAttributionTag validation and returns false\n+     * if it does not exist in either one of them.\n+     *\n+     * @param packageName Name of the package\n+     * @param proxyPackageName Name of the proxy package\n+     * @param attributionTag attribution tag to be checked\n+     *\n+     * @return boolean specifying if attribution tag is valid or not\n+     */\n+    private boolean isAttributionTagDefined(@Nullable String packageName,\n+                                          @Nullable String proxyPackageName,\n+                                          @Nullable String attributionTag) {\n+        if (packageName == null) {\n+            return false;\n+        } else if (attributionTag == null) {\n+            return true;\n+        }\n+        PackageManagerInternal pmInt = LocalServices.getService(PackageManagerInternal.class);\n+        if (proxyPackageName != null) {\n+            AndroidPackage proxyPkg = pmInt.getPackage(proxyPackageName);\n+            if (proxyPkg != null && isAttributionInPackage(proxyPkg, attributionTag)) {\n+                return true;\n+            }\n+        }\n+        AndroidPackage pkg = pmInt.getPackage(packageName);\n+        return isAttributionInPackage(pkg, attributionTag);\n+    }\n+\n     private void logVerifyAndGetBypassFailure(int uid, @NonNull SecurityException e,\n             @NonNull String methodName) {\n         if (Process.isIsolated(uid)) {",
    "llm_generated_patch": "--- a/services/core/java/com/android/server/appop/AppOpsService.java\n+++ b/services/core/java/com/android/server/appop/AppOpsService.java\n@@ -4340,6 +4340,36 @@\n                     packageName + \" not found from \" + Binder.getCallingUid());\n         }\n     }\n+\n+    /**\n+     * Checks to see if the attribution tag is defined in either package or proxyPackage.\n+     * This method is intended for ProxyAttributionTag validation and returns false\n+     * if it does not exist in either one of them.\n+     *\n+     * @param packageName Name of the package\n+     * @param proxyPackageName Name of the proxy package\n+     * @param attributionTag attribution tag to be checked\n+     *\n+     * @return boolean specifying if attribution tag is valid or not\n+     */\n+    private boolean isAttributionTagDefined(@Nullable String packageName,\n+                                          @Nullable String proxyPackageName,\n+                                          @Nullable String attributionTag) {\n+        if (packageName == null) {\n+            return false;\n+        } else if (attributionTag == null) {\n+            return true;\n+        }\n+        PackageManagerInternal pmInt = LocalServices.getService(PackageManagerInternal.class);\n+        if (proxyPackageName != null) {\n+            AndroidPackage proxyPkg = pmInt.getPackage(proxyPackageName);\n+            if (proxyPkg != null && isAttributionInPackage(proxyPkg, attributionTag)) {\n+                return true;\n+            }\n+        }\n+        AndroidPackage pkg = pmInt.getPackage(packageName);\n+        return isAttributionInPackage(pkg, attributionTag);\n+    }\n \n     private boolean isCallerAndAttributionTrusted(@NonNull AttributionSource attributionSource) {\n         if (attributionSource.getUid() != Binder.getCallingUid()",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 0.8721,
      "token_level_edit_distance": 41,
      "codebert_score": {
        "precision": 0.9281,
        "recall": 0.9293,
        "f1": 0.9287,
        "f3": 0.9292
      },
      "token_count_upstream": 198,
      "token_count_downstream": 196,
      "token_count_total": 394,
      "cosine_similarity_openai": 0.9449
    }
  },
  {
    "cve_id": "ASB-A-304983146",
    "downstream_version": "12L",
    "file_name": "services/core/java/com/android/server/appop/AppOpsService.java",
    "runtime_seconds": 48.76,
    "rej_file_diff": "--- services/core/java/com/android/server/appop/AppOpsService.java\n+++ services/core/java/com/android/server/appop/AppOpsService.java\n@@ -4342,6 +4350,36 @@ public class AppOpsService extends IAppOpsService.Stub {\n         return false;\n     }\n \n+    /**\n+     * Checks to see if the attribution tag is defined in either package or proxyPackage.\n+     * This method is intended for ProxyAttributionTag validation and returns false\n+     * if it does not exist in either one of them.\n+     *\n+     * @param packageName Name of the package\n+     * @param proxyPackageName Name of the proxy package\n+     * @param attributionTag attribution tag to be checked\n+     *\n+     * @return boolean specifying if attribution tag is valid or not\n+     */\n+    private boolean isAttributionTagDefined(@Nullable String packageName,\n+                                          @Nullable String proxyPackageName,\n+                                          @Nullable String attributionTag) {\n+        if (packageName == null) {\n+            return false;\n+        } else if (attributionTag == null) {\n+            return true;\n+        }\n+        PackageManagerInternal pmInt = LocalServices.getService(PackageManagerInternal.class);\n+        if (proxyPackageName != null) {\n+            AndroidPackage proxyPkg = pmInt.getPackage(proxyPackageName);\n+            if (proxyPkg != null && isAttributionInPackage(proxyPkg, attributionTag)) {\n+                return true;\n+            }\n+        }\n+        AndroidPackage pkg = pmInt.getPackage(packageName);\n+        return isAttributionInPackage(pkg, attributionTag);\n+    }\n+\n     private void logVerifyAndGetBypassFailure(int uid, @NonNull SecurityException e,\n             @NonNull String methodName) {\n         if (Process.isIsolated(uid)) {",
    "llm_generated_patch": "--- a/services/core/java/com/android/server/appop/AppOpsService.java\n+++ b/services/core/java/com/android/server/appop/AppOpsService.java\n@@ -2306,6 +2306,36 @@\n \n         return false;\n     }\n+\n+    /**\n+     * Checks to see if the attribution tag is defined in either package or proxyPackage.\n+     * This method is intended for ProxyAttributionTag validation and returns false\n+     * if it does not exist in either one of them.\n+     *\n+     * @param packageName Name of the package\n+     * @param proxyPackageName Name of the proxy package\n+     * @param attributionTag attribution tag to be checked\n+     *\n+     * @return boolean specifying if attribution tag is valid or not\n+     */\n+    private boolean isAttributionTagDefined(@Nullable String packageName,\n+                                          @Nullable String proxyPackageName,\n+                                          @Nullable String attributionTag) {\n+        if (packageName == null) {\n+            return false;\n+        } else if (attributionTag == null) {\n+            return true;\n+        }\n+        PackageManagerInternal pmInt = LocalServices.getService(PackageManagerInternal.class);\n+        if (proxyPackageName != null) {\n+            AndroidPackage proxyPkg = pmInt.getPackage(proxyPackageName);\n+            if (proxyPkg != null && isAttributionInPackage(proxyPkg, attributionTag)) {\n+                return true;\n+            }\n+        }\n+        AndroidPackage pkg = pmInt.getPackage(packageName);\n+        return isAttributionInPackage(pkg, attributionTag);\n+    }\n \n     /**\n      * Get (and potentially create) ops.",
    "metrics": {
      "relative_line_count_similarity": 0.9737,
      "normalized_edit_similarity": 0.8682,
      "token_level_edit_distance": 25,
      "codebert_score": {
        "precision": 0.9675,
        "recall": 0.9355,
        "f1": 0.9512,
        "f3": 0.9386
      },
      "token_count_upstream": 198,
      "token_count_downstream": 185,
      "token_count_total": 383,
      "cosine_similarity_openai": 0.9139
    }
  },
  {
    "cve_id": "ASB-A-304983146",
    "downstream_version": "12",
    "file_name": "services/core/java/com/android/server/appop/AppOpsService.java",
    "runtime_seconds": 45.7,
    "rej_file_diff": "--- services/core/java/com/android/server/appop/AppOpsService.java\n+++ services/core/java/com/android/server/appop/AppOpsService.java\n@@ -4342,6 +4350,36 @@ public class AppOpsService extends IAppOpsService.Stub {\n         return false;\n     }\n \n+    /**\n+     * Checks to see if the attribution tag is defined in either package or proxyPackage.\n+     * This method is intended for ProxyAttributionTag validation and returns false\n+     * if it does not exist in either one of them.\n+     *\n+     * @param packageName Name of the package\n+     * @param proxyPackageName Name of the proxy package\n+     * @param attributionTag attribution tag to be checked\n+     *\n+     * @return boolean specifying if attribution tag is valid or not\n+     */\n+    private boolean isAttributionTagDefined(@Nullable String packageName,\n+                                          @Nullable String proxyPackageName,\n+                                          @Nullable String attributionTag) {\n+        if (packageName == null) {\n+            return false;\n+        } else if (attributionTag == null) {\n+            return true;\n+        }\n+        PackageManagerInternal pmInt = LocalServices.getService(PackageManagerInternal.class);\n+        if (proxyPackageName != null) {\n+            AndroidPackage proxyPkg = pmInt.getPackage(proxyPackageName);\n+            if (proxyPkg != null && isAttributionInPackage(proxyPkg, attributionTag)) {\n+                return true;\n+            }\n+        }\n+        AndroidPackage pkg = pmInt.getPackage(packageName);\n+        return isAttributionInPackage(pkg, attributionTag);\n+    }\n+\n     private void logVerifyAndGetBypassFailure(int uid, @NonNull SecurityException e,\n             @NonNull String methodName) {\n         if (Process.isIsolated(uid)) {",
    "llm_generated_patch": "--- a/services/core/java/com/android/server/appop/AppOpsService.java\n+++ b/services/core/java/com/android/server/appop/AppOpsService.java\n@@ -2372,6 +2372,32 @@\n \n         return new PackageVerificationResult(bypass, isAttributionTagValid);\n     }\n+\n+    /**\n+     * Checks to see if the attribution tag is defined in either package or proxyPackage.\n+     * This method is intended for ProxyAttributionTag validation and returns false\n+     * if it does not exist in either one of them.\n+     *\n+     * @param packageName Name of the package\n+     * @param proxyPackageName Name of the proxy package\n+     * @param attributionTag attribution tag to be checked\n+     *\n+     * @return boolean specifying if attribution tag is valid or not\n+     */\n+    private boolean isAttributionTagDefined(@Nullable String packageName,\n+                                          @Nullable String proxyPackageName,\n+                                          @Nullable String attributionTag) {\n+        if (packageName == null) {\n+            return false;\n+        } else if (attributionTag == null) {\n+            return true;\n+        }\n+        PackageManagerInternal pmInt = LocalServices.getService(PackageManagerInternal.class);\n+        if (proxyPackageName != null) {\n+            AndroidPackage proxyPkg = pmInt.getPackage(proxyPackageName);\n+            if (proxyPkg != null && isAttributionInPackage(proxyPkg, attributionTag)) {\n+                return true;\n+            }\n+        }\n+        AndroidPackage pkg = pmInt.getPackage(packageName);\n+        return isAttributionInPackage(pkg, attributionTag);\n+    }\n \n     private boolean isAttributionInPackage(@Nullable AndroidPackage pkg,\n             @Nullable String attributionTag) {",
    "metrics": {
      "relative_line_count_similarity": 0.9737,
      "normalized_edit_similarity": 0.8682,
      "token_level_edit_distance": 32,
      "codebert_score": {
        "precision": 0.9544,
        "recall": 0.937,
        "f1": 0.9456,
        "f3": 0.9387
      },
      "token_count_upstream": 198,
      "token_count_downstream": 189,
      "token_count_total": 387,
      "cosine_similarity_openai": 0.9441
    }
  },
  {
    "cve_id": "ASB-A-304983146",
    "downstream_version": "14",
    "file_name": "services/core/java/com/android/server/appop/AppOpsService.java",
    "runtime_seconds": 90.71,
    "rej_file_diff": "--- services/core/java/com/android/server/appop/AppOpsService.java\n+++ services/core/java/com/android/server/appop/AppOpsService.java\n@@ -4342,6 +4350,36 @@ public class AppOpsService extends IAppOpsService.Stub {\n         return false;\n     }\n \n+    /**\n+     * Checks to see if the attribution tag is defined in either package or proxyPackage.\n+     * This method is intended for ProxyAttributionTag validation and returns false\n+     * if it does not exist in either one of them.\n+     *\n+     * @param packageName Name of the package\n+     * @param proxyPackageName Name of the proxy package\n+     * @param attributionTag attribution tag to be checked\n+     *\n+     * @return boolean specifying if attribution tag is valid or not\n+     */\n+    private boolean isAttributionTagDefined(@Nullable String packageName,\n+                                          @Nullable String proxyPackageName,\n+                                          @Nullable String attributionTag) {\n+        if (packageName == null) {\n+            return false;\n+        } else if (attributionTag == null) {\n+            return true;\n+        }\n+        PackageManagerInternal pmInt = LocalServices.getService(PackageManagerInternal.class);\n+        if (proxyPackageName != null) {\n+            AndroidPackage proxyPkg = pmInt.getPackage(proxyPackageName);\n+            if (proxyPkg != null && isAttributionInPackage(proxyPkg, attributionTag)) {\n+                return true;\n+            }\n+        }\n+        AndroidPackage pkg = pmInt.getPackage(packageName);\n+        return isAttributionInPackage(pkg, attributionTag);\n+    }\n+\n     private void logVerifyAndGetBypassFailure(int uid, @NonNull SecurityException e,\n             @NonNull String methodName) {\n         if (Process.isIsolated(uid)) {",
    "llm_generated_patch": "--- a/services/core/java/com/android/server/appop/AppOpsService.java\n+++ b/services/core/java/com/android/server/appop/AppOpsService.java\n@@ -4341,6 +4341,34 @@\n                 Binder.getCallingPid(), Binder.getCallingUid(), null)\n                 == PackageManager.PERMISSION_GRANTED;\n     }\n+\n+    /**\n+     * Checks to see if the attribution tag is defined in either package or proxyPackage.\n+     * This method is intended for ProxyAttributionTag validation and returns false\n+     * if it does not exist in either one of them.\n+     *\n+     * @param packageName Name of the package\n+     * @param proxyPackageName Name of the proxy package\n+     * @param attributionTag attribution tag to be checked\n+     *\n+     * @return boolean specifying if attribution tag is valid or not\n+     */\n+    private boolean isAttributionTagDefined(@Nullable String packageName,\n+                                          @Nullable String proxyPackageName,\n+                                          @Nullable String attributionTag) {\n+        if (packageName == null) {\n+            return false;\n+        } else if (attributionTag == null) {\n+            return true;\n+        }\n+        PackageManagerInternal pmInt = LocalServices.getService(PackageManagerInternal.class);\n+        if (proxyPackageName != null) {\n+            AndroidPackage proxyPkg = pmInt.getPackage(proxyPackageName);\n+            if (proxyPkg != null && isAttributionInPackage(proxyPkg, attributionTag)) {\n+                return true;\n+            }\n+        }\n+        AndroidPackage pkg = pmInt.getPackage(packageName);\n+        return isAttributionInPackage(pkg, attributionTag);\n+    }\n \n     private @Nullable UidState getUidStateLocked(int uid, boolean edit) {\n         UidState uidState = mUidStates.get(uid);",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 0.8586,
      "token_level_edit_distance": 44,
      "codebert_score": {
        "precision": 0.9011,
        "recall": 0.9081,
        "f1": 0.9046,
        "f3": 0.9074
      },
      "token_count_upstream": 198,
      "token_count_downstream": 193,
      "token_count_total": 391,
      "cosine_similarity_openai": 0.9415
    }
  },
  {
    "cve_id": "ASB-A-355411348",
    "downstream_version": "13",
    "file_name": "PermissionController/role-controller/java/com/android/role/controller/model/Permissions.java",
    "runtime_seconds": null,
    "rej_file_diff": "",
    "llm_generated_patch": "",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 1.0,
      "token_level_edit_distance": 0,
      "codebert_score": {
        "error": "Candidate code and ground truth code must not be empty."
      },
      "token_count_upstream": 0,
      "token_count_downstream": 0,
      "token_count_total": 0,
      "cosine_similarity_openai": 1.0
    }
  },
  {
    "cve_id": "ASB-A-283101289",
    "downstream_version": "12L",
    "file_name": "services/autofill/java/com/android/server/autofill/ui/DialogFillUi.java",
    "runtime_seconds": null,
    "rej_file_diff": "",
    "llm_generated_patch": "",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 1.0,
      "token_level_edit_distance": 0,
      "codebert_score": {
        "error": "Candidate code and ground truth code must not be empty."
      },
      "token_count_upstream": 0,
      "token_count_downstream": 0,
      "token_count_total": 0,
      "cosine_similarity_openai": 1.0
    }
  },
  {
    "cve_id": "ASB-A-283101289",
    "downstream_version": "12",
    "file_name": "services/autofill/java/com/android/server/autofill/ui/DialogFillUi.java",
    "runtime_seconds": null,
    "rej_file_diff": "",
    "llm_generated_patch": "",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 1.0,
      "token_level_edit_distance": 0,
      "codebert_score": {
        "error": "Candidate code and ground truth code must not be empty."
      },
      "token_count_upstream": 0,
      "token_count_downstream": 0,
      "token_count_total": 0,
      "cosine_similarity_openai": 1.0
    }
  },
  {
    "cve_id": "ASB-A-281666022",
    "downstream_version": "12L",
    "file_name": "services/autofill/java/com/android/server/autofill/ui/DialogFillUi.java",
    "runtime_seconds": null,
    "rej_file_diff": "",
    "llm_generated_patch": "",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 1.0,
      "token_level_edit_distance": 0,
      "codebert_score": {
        "error": "Candidate code and ground truth code must not be empty."
      },
      "token_count_upstream": 0,
      "token_count_downstream": 0,
      "token_count_total": 0,
      "cosine_similarity_openai": 1.0
    }
  },
  {
    "cve_id": "ASB-A-281666022",
    "downstream_version": "12",
    "file_name": "services/autofill/java/com/android/server/autofill/ui/DialogFillUi.java",
    "runtime_seconds": null,
    "rej_file_diff": "",
    "llm_generated_patch": "",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 1.0,
      "token_level_edit_distance": 0,
      "codebert_score": {
        "error": "Candidate code and ground truth code must not be empty."
      },
      "token_count_upstream": 0,
      "token_count_downstream": 0,
      "token_count_total": 0,
      "cosine_similarity_openai": 1.0
    }
  },
  {
    "cve_id": "ASB-A-283264674",
    "downstream_version": "12L",
    "file_name": "services/autofill/java/com/android/server/autofill/ui/DialogFillUi.java",
    "runtime_seconds": null,
    "rej_file_diff": "",
    "llm_generated_patch": "",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 1.0,
      "token_level_edit_distance": 0,
      "codebert_score": {
        "error": "Candidate code and ground truth code must not be empty."
      },
      "token_count_upstream": 0,
      "token_count_downstream": 0,
      "token_count_total": 0,
      "cosine_similarity_openai": 1.0
    }
  },
  {
    "cve_id": "ASB-A-283264674",
    "downstream_version": "12",
    "file_name": "services/autofill/java/com/android/server/autofill/ui/DialogFillUi.java",
    "runtime_seconds": null,
    "rej_file_diff": "",
    "llm_generated_patch": "",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 1.0,
      "token_level_edit_distance": 0,
      "codebert_score": {
        "error": "Candidate code and ground truth code must not be empty."
      },
      "token_count_upstream": 0,
      "token_count_downstream": 0,
      "token_count_total": 0,
      "cosine_similarity_openai": 1.0
    }
  },
  {
    "cve_id": "ASB-A-281665050",
    "downstream_version": "12L",
    "file_name": "services/autofill/java/com/android/server/autofill/ui/DialogFillUi.java",
    "runtime_seconds": null,
    "rej_file_diff": "",
    "llm_generated_patch": "",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 1.0,
      "token_level_edit_distance": 0,
      "codebert_score": {
        "error": "Candidate code and ground truth code must not be empty."
      },
      "token_count_upstream": 0,
      "token_count_downstream": 0,
      "token_count_total": 0,
      "cosine_similarity_openai": 1.0
    }
  },
  {
    "cve_id": "ASB-A-281665050",
    "downstream_version": "12",
    "file_name": "services/autofill/java/com/android/server/autofill/ui/DialogFillUi.java",
    "runtime_seconds": null,
    "rej_file_diff": "",
    "llm_generated_patch": "",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 1.0,
      "token_level_edit_distance": 0,
      "codebert_score": {
        "error": "Candidate code and ground truth code must not be empty."
      },
      "token_count_upstream": 0,
      "token_count_downstream": 0,
      "token_count_total": 0,
      "cosine_similarity_openai": 1.0
    }
  },
  {
    "cve_id": "ASB-A-281534749",
    "downstream_version": "12L",
    "file_name": "services/autofill/java/com/android/server/autofill/ui/DialogFillUi.java",
    "runtime_seconds": null,
    "rej_file_diff": "",
    "llm_generated_patch": "",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 1.0,
      "token_level_edit_distance": 0,
      "codebert_score": {
        "error": "Candidate code and ground truth code must not be empty."
      },
      "token_count_upstream": 0,
      "token_count_downstream": 0,
      "token_count_total": 0,
      "cosine_similarity_openai": 1.0
    }
  },
  {
    "cve_id": "ASB-A-281534749",
    "downstream_version": "12",
    "file_name": "services/autofill/java/com/android/server/autofill/ui/DialogFillUi.java",
    "runtime_seconds": null,
    "rej_file_diff": "",
    "llm_generated_patch": "",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 1.0,
      "token_level_edit_distance": 0,
      "codebert_score": {
        "error": "Candidate code and ground truth code must not be empty."
      },
      "token_count_upstream": 0,
      "token_count_downstream": 0,
      "token_count_total": 0,
      "cosine_similarity_openai": 1.0
    }
  },
  {
    "cve_id": "ASB-A-281848557",
    "downstream_version": "12L",
    "file_name": "services/autofill/java/com/android/server/autofill/ui/DialogFillUi.java",
    "runtime_seconds": null,
    "rej_file_diff": "",
    "llm_generated_patch": "",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 1.0,
      "token_level_edit_distance": 0,
      "codebert_score": {
        "error": "Candidate code and ground truth code must not be empty."
      },
      "token_count_upstream": 0,
      "token_count_downstream": 0,
      "token_count_total": 0,
      "cosine_similarity_openai": 1.0
    }
  },
  {
    "cve_id": "ASB-A-281848557",
    "downstream_version": "12",
    "file_name": "services/autofill/java/com/android/server/autofill/ui/DialogFillUi.java",
    "runtime_seconds": null,
    "rej_file_diff": "",
    "llm_generated_patch": "",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 1.0,
      "token_level_edit_distance": 0,
      "codebert_score": {
        "error": "Candidate code and ground truth code must not be empty."
      },
      "token_count_upstream": 0,
      "token_count_downstream": 0,
      "token_count_total": 0,
      "cosine_similarity_openai": 1.0
    }
  },
  {
    "cve_id": "ASB-A-281533566",
    "downstream_version": "12L",
    "file_name": "services/autofill/java/com/android/server/autofill/ui/DialogFillUi.java",
    "runtime_seconds": null,
    "rej_file_diff": "",
    "llm_generated_patch": "",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 1.0,
      "token_level_edit_distance": 0,
      "codebert_score": {
        "error": "Candidate code and ground truth code must not be empty."
      },
      "token_count_upstream": 0,
      "token_count_downstream": 0,
      "token_count_total": 0,
      "cosine_similarity_openai": 1.0
    }
  },
  {
    "cve_id": "ASB-A-281533566",
    "downstream_version": "12",
    "file_name": "services/autofill/java/com/android/server/autofill/ui/DialogFillUi.java",
    "runtime_seconds": null,
    "rej_file_diff": "",
    "llm_generated_patch": "",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 1.0,
      "token_level_edit_distance": 0,
      "codebert_score": {
        "error": "Candidate code and ground truth code must not be empty."
      },
      "token_count_upstream": 0,
      "token_count_downstream": 0,
      "token_count_total": 0,
      "cosine_similarity_openai": 1.0
    }
  },
  {
    "cve_id": "ASB-A-296915500",
    "downstream_version": "13",
    "file_name": "android/app/src/com/android/bluetooth/opp/BluetoothOppSendFileInfo.java",
    "runtime_seconds": 123.98,
    "rej_file_diff": "--- android/app/src/com/android/bluetooth/opp/BluetoothOppSendFileInfo.java\n+++ android/app/src/com/android/bluetooth/opp/BluetoothOppSendFileInfo.java\n@@ -32,6 +32,8 @@\n \n package com.android.bluetooth.opp;\n \n+import static android.os.UserHandle.myUserId;\n+\n import android.bluetooth.BluetoothProfile;\n import android.bluetooth.BluetoothProtoEnums;\n import android.content.ContentResolver;\n@@ -54,12 +57,13 @@ import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileNotFoundException;\n import java.io.IOException;\n+import java.util.Objects;\n \n /**\n  * This class stores information about a single sending file It will only be used for outbound\n  * share.\n  */\n-// Next tag value for ContentProfileErrorReportUtils.report(): 15\n+// Next tag value for ContentProfileErrorReportUtils.report(): 16\n public class BluetoothOppSendFileInfo {\n     private static final String TAG = \"BluetoothOppSendFileInfo\";",
    "llm_generated_patch": "--- a/android/app/src/com/android/bluetooth/opp/BluetoothOppSendFileInfo.java\n+++ b/android/app/src/com/android/bluetooth/opp/BluetoothOppSendFileInfo.java\n@@ -32,23 +32,32 @@\n \n package com.android.bluetooth.opp;\n \n+import static android.os.UserHandle.myUserId;\n+\n+import android.bluetooth.BluetoothProfile;\n+import android.bluetooth.BluetoothProtoEnums;\n import android.content.ContentResolver;\n import android.content.Context;\n import android.content.res.AssetFileDescriptor;\n import android.database.Cursor;\n import android.database.sqlite.SQLiteException;\n import android.net.Uri;\n import android.provider.OpenableColumns;\n import android.text.TextUtils;\n import android.util.EventLog;\n import android.util.Log;\n \n+import com.android.bluetooth.BluetoothStatsLog;\n+import com.android.bluetooth.ContentProfileErrorReportUtils;\n import com.android.bluetooth.R;\n \n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileNotFoundException;\n import java.io.IOException;\n+import java.util.Objects;\n \n /**\n  * This class stores information about a single sending file It will only be",
    "metrics": {
      "relative_line_count_similarity": 0.7273,
      "normalized_edit_similarity": 0.4561,
      "token_level_edit_distance": 144,
      "codebert_score": {
        "precision": 0.8755,
        "recall": 0.8745,
        "f1": 0.875,
        "f3": 0.8746
      },
      "token_count_upstream": 80,
      "token_count_downstream": 69,
      "token_count_total": 149,
      "cosine_similarity_openai": 0.9256
    }
  },
  {
    "cve_id": "ASB-A-296915500",
    "downstream_version": "14",
    "file_name": "android/app/src/com/android/bluetooth/opp/BluetoothOppSendFileInfo.java",
    "runtime_seconds": 158.72,
    "rej_file_diff": "--- android/app/src/com/android/bluetooth/opp/BluetoothOppSendFileInfo.java\n+++ android/app/src/com/android/bluetooth/opp/BluetoothOppSendFileInfo.java\n@@ -32,6 +32,8 @@\n \n package com.android.bluetooth.opp;\n \n+import static android.os.UserHandle.myUserId;\n+\n import android.bluetooth.BluetoothProfile;\n import android.bluetooth.BluetoothProtoEnums;\n import android.content.ContentResolver;\n@@ -54,12 +57,13 @@ import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileNotFoundException;\n import java.io.IOException;\n+import java.util.Objects;\n \n /**\n  * This class stores information about a single sending file It will only be used for outbound\n  * share.\n  */\n-// Next tag value for ContentProfileErrorReportUtils.report(): 15\n+// Next tag value for ContentProfileErrorReportUtils.report(): 16\n public class BluetoothOppSendFileInfo {\n     private static final String TAG = \"BluetoothOppSendFileInfo\";",
    "llm_generated_patch": "--- a/android/app/src/com/android/bluetooth/opp/BluetoothOppSendFileInfo.java\n+++ b/android/app/src/com/android/bluetooth/opp/BluetoothOppSendFileInfo.java\n@@ -32,3 +32,7 @@\n \n+import static android.os.UserHandle.myUserId;\n+\n+import android.bluetooth.BluetoothProfile;\n+import android.bluetooth.BluetoothProtoEnums;\n import android.content.ContentResolver;\n import android.content.Context;\n@@ -49,8 +53,10 @@\n import java.io.FileNotFoundException;\n import java.io.IOException;\n+import java.util.Objects;\n \n /**\n  * This class stores information about a single sending file It will only be\n  * used for outbound share.\n  */\n+// Next tag value for ContentProfileErrorReportUtils.report(): 16\n public class BluetoothOppSendFileInfo {",
    "metrics": {
      "relative_line_count_similarity": 0.8636,
      "normalized_edit_similarity": 0.6935,
      "token_level_edit_distance": 48,
      "codebert_score": {
        "precision": 0.9518,
        "recall": 0.9318,
        "f1": 0.9417,
        "f3": 0.9337
      },
      "token_count_upstream": 80,
      "token_count_downstream": 62,
      "token_count_total": 142,
      "cosine_similarity_openai": 0.9752
    }
  },
  {
    "cve_id": "ASB-A-366401629",
    "downstream_version": "12L",
    "file_name": "src/com/android/settings/accounts/AccountTypePreferenceLoader.java",
    "runtime_seconds": 52.15,
    "rej_file_diff": "--- src/com/android/settings/accounts/AccountTypePreferenceLoader.java\n+++ src/com/android/settings/accounts/AccountTypePreferenceLoader.java\n@@ -20,6 +20,7 @@ package com.android.settings.accounts;\n import android.accounts.Account;\n import android.accounts.AuthenticatorDescription;\n import android.content.ClipData;\n+import android.content.ContentResolver;\n import android.content.Context;\n import android.content.Intent;\n import android.content.pm.ActivityInfo;",
    "llm_generated_patch": "--- a/src/com/android/settings/accounts/AccountTypePreferenceLoader.java\n+++ b/src/com/android/settings/accounts/AccountTypePreferenceLoader.java\n@@ -17,6 +17,7 @@\n \n import android.accounts.Account;\n import android.accounts.AuthenticatorDescription;\n+import android.content.ContentResolver;\n import android.content.Context;\n import android.content.Intent;\n import android.content.pm.ActivityInfo;",
    "metrics": {
      "relative_line_count_similarity": 0.9,
      "normalized_edit_similarity": 0.7732,
      "token_level_edit_distance": 22,
      "codebert_score": {
        "precision": 0.9524,
        "recall": 0.945,
        "f1": 0.9487,
        "f3": 0.9458
      },
      "token_count_upstream": 24,
      "token_count_downstream": 20,
      "token_count_total": 44,
      "cosine_similarity_openai": 0.9834
    }
  },
  {
    "cve_id": "ASB-A-366401629",
    "downstream_version": "12",
    "file_name": "src/com/android/settings/accounts/AccountTypePreferenceLoader.java",
    "runtime_seconds": 47.67,
    "rej_file_diff": "--- src/com/android/settings/accounts/AccountTypePreferenceLoader.java\n+++ src/com/android/settings/accounts/AccountTypePreferenceLoader.java\n@@ -20,6 +20,7 @@ package com.android.settings.accounts;\n import android.accounts.Account;\n import android.accounts.AuthenticatorDescription;\n import android.content.ClipData;\n+import android.content.ContentResolver;\n import android.content.Context;\n import android.content.Intent;\n import android.content.pm.ActivityInfo;",
    "llm_generated_patch": "--- a/src/com/android/settings/accounts/AccountTypePreferenceLoader.java\n+++ b/src/com/android/settings/accounts/AccountTypePreferenceLoader.java\n@@ -20,7 +20,8 @@ package com.android.settings.accounts;\n import android.accounts.Account;\n import android.accounts.AuthenticatorDescription;\n import android.content.Context;\n+import android.content.ContentResolver;\n import android.content.Intent;\n import android.content.pm.ActivityInfo;\n import android.content.pm.ApplicationInfo;\n import android.content.pm.PackageManager;",
    "metrics": {
      "relative_line_count_similarity": 0.9,
      "normalized_edit_similarity": 0.8125,
      "token_level_edit_distance": 32,
      "codebert_score": {
        "precision": 0.9496,
        "recall": 0.9572,
        "f1": 0.9534,
        "f3": 0.9564
      },
      "token_count_upstream": 24,
      "token_count_downstream": 26,
      "token_count_total": 50,
      "cosine_similarity_openai": 0.9731
    }
  },
  {
    "cve_id": "ASB-A-366401629",
    "downstream_version": "13",
    "file_name": "src/com/android/settings/accounts/AccountTypePreferenceLoader.java",
    "runtime_seconds": 16.84,
    "rej_file_diff": "--- src/com/android/settings/accounts/AccountTypePreferenceLoader.java\n+++ src/com/android/settings/accounts/AccountTypePreferenceLoader.java\n@@ -20,6 +20,7 @@ package com.android.settings.accounts;\n import android.accounts.Account;\n import android.accounts.AuthenticatorDescription;\n import android.content.ClipData;\n+import android.content.ContentResolver;\n import android.content.Context;\n import android.content.Intent;\n import android.content.pm.ActivityInfo;",
    "llm_generated_patch": "--- a/src/com/android/settings/accounts/AccountTypePreferenceLoader.java\n+++ b/src/com/android/settings/accounts/AccountTypePreferenceLoader.java\n@@ -20,6 +20,7 @@\n \n import android.accounts.Account;\n import android.accounts.AuthenticatorDescription;\n+import android.content.ContentResolver;\n import android.content.Context;\n import android.content.Intent;\n import android.content.pm.ActivityInfo;",
    "metrics": {
      "relative_line_count_similarity": 0.9,
      "normalized_edit_similarity": 0.7938,
      "token_level_edit_distance": 20,
      "codebert_score": {
        "precision": 0.9551,
        "recall": 0.9476,
        "f1": 0.9514,
        "f3": 0.9484
      },
      "token_count_upstream": 24,
      "token_count_downstream": 20,
      "token_count_total": 44,
      "cosine_similarity_openai": 0.9837
    }
  },
  {
    "cve_id": "ASB-A-363248394",
    "downstream_version": "12L",
    "file_name": "src/com/android/settings/notification/NotificationAccessConfirmationActivity.java",
    "runtime_seconds": 74.56,
    "rej_file_diff": "--- src/com/android/settings/notification/NotificationAccessConfirmationActivity.java\n+++ src/com/android/settings/notification/NotificationAccessConfirmationActivity.java\n@@ -30,13 +30,15 @@ import android.app.admin.DevicePolicyManager;\n import android.content.ComponentName;\n import android.content.Context;\n import android.content.DialogInterface;\n+import android.content.Intent;\n import android.content.pm.ApplicationInfo;\n import android.content.pm.PackageItemInfo;\n import android.content.pm.PackageManager;\n-import android.content.pm.ServiceInfo;\n+import android.content.pm.ResolveInfo;\n import android.os.Bundle;\n import android.os.UserHandle;\n import android.os.UserManager;\n+import android.service.notification.NotificationListenerService;\n import android.text.TextUtils;\n import android.util.Slog;\n import android.view.WindowManager;",
    "llm_generated_patch": "--- a/src/com/android/settings/notification/NotificationAccessConfirmationActivity.java\n+++ b/src/com/android/settings/notification/NotificationAccessConfirmationActivity.java\n@@ -20,13 +20,16 @@\n import android.app.NotificationManager;\n import android.content.ComponentName;\n import android.content.Context;\n import android.content.DialogInterface;\n+import android.content.Intent;\n import android.content.pm.ApplicationInfo;\n import android.content.pm.PackageItemInfo;\n import android.content.pm.PackageManager;\n-import android.content.pm.ServiceInfo;\n+import android.content.pm.ResolveInfo;\n import android.os.Bundle;\n import android.os.UserHandle;\n+import android.os.UserManager;\n+import android.service.notification.NotificationListenerService;\n import android.text.TextUtils;\n import android.util.Slog;\n import android.view.WindowManager;",
    "metrics": {
      "relative_line_count_similarity": 0.9474,
      "normalized_edit_similarity": 0.9375,
      "token_level_edit_distance": 9,
      "codebert_score": {
        "precision": 0.9671,
        "recall": 0.968,
        "f1": 0.9676,
        "f3": 0.9679
      },
      "token_count_upstream": 42,
      "token_count_downstream": 42,
      "token_count_total": 84,
      "cosine_similarity_openai": 0.9787
    }
  },
  {
    "cve_id": "ASB-A-363248394",
    "downstream_version": "12",
    "file_name": "src/com/android/settings/notification/NotificationAccessConfirmationActivity.java",
    "runtime_seconds": 97.08,
    "rej_file_diff": "--- src/com/android/settings/notification/NotificationAccessConfirmationActivity.java\n+++ src/com/android/settings/notification/NotificationAccessConfirmationActivity.java\n@@ -30,13 +30,15 @@ import android.app.admin.DevicePolicyManager;\n import android.content.ComponentName;\n import android.content.Context;\n import android.content.DialogInterface;\n+import android.content.Intent;\n import android.content.pm.ApplicationInfo;\n import android.content.pm.PackageItemInfo;\n import android.content.pm.PackageManager;\n-import android.content.pm.ServiceInfo;\n+import android.content.pm.ResolveInfo;\n import android.os.Bundle;\n import android.os.UserHandle;\n import android.os.UserManager;\n+import android.service.notification.NotificationListenerService;\n import android.text.TextUtils;\n import android.util.Slog;\n import android.view.WindowManager;",
    "llm_generated_patch": "--- a/src/com/android/settings/notification/NotificationAccessConfirmationActivity.java\n+++ b/src/com/android/settings/notification/NotificationAccessConfirmationActivity.java\n@@ -23,12 +23,14 @@\n import android.content.ComponentName;\n import android.content.Context;\n import android.content.DialogInterface;\n+import android.content.Intent;\n import android.content.pm.ApplicationInfo;\n import android.content.pm.PackageItemInfo;\n import android.content.pm.PackageManager;\n-import android.content.pm.ServiceInfo;\n+import android.content.pm.ResolveInfo;\n import android.os.Bundle;\n import android.os.UserHandle;\n+import android.service.notification.NotificationListenerService;\n import android.text.TextUtils;\n import android.util.Slog;\n import android.view.WindowManager;",
    "metrics": {
      "relative_line_count_similarity": 0.9474,
      "normalized_edit_similarity": 0.8613,
      "token_level_edit_distance": 15,
      "codebert_score": {
        "precision": 0.9602,
        "recall": 0.9548,
        "f1": 0.9575,
        "f3": 0.9553
      },
      "token_count_upstream": 42,
      "token_count_downstream": 38,
      "token_count_total": 80,
      "cosine_similarity_openai": 0.981
    }
  },
  {
    "cve_id": "ASB-A-317203980",
    "downstream_version": "13",
    "file_name": "services/core/java/com/android/server/media/MediaSessionRecord.java",
    "runtime_seconds": 101.49,
    "rej_file_diff": "--- services/core/java/com/android/server/media/MediaSessionRecord.java\n+++ services/core/java/com/android/server/media/MediaSessionRecord.java\n@@ -106,6 +106,16 @@ public class MediaSessionRecord implements IBinder.DeathRecipient, MediaSessionR\n     @EnabledSince(targetSdkVersion = Build.VERSION_CODES.UPSIDE_DOWN_CAKE)\n     static final long THROW_FOR_INVALID_BROADCAST_RECEIVER = 270049379L;\n \n+    /**\n+     * {@link MediaSession#setMediaButtonReceiver(PendingIntent)} throws an {@link\n+     * IllegalArgumentException} if the provided {@link PendingIntent} targets an {@link\n+     * android.app.Activity activity} for apps targeting Android V and above. For apps targeting\n+     * Android U and below, the request will be ignored.\n+     */\n+    @ChangeId\n+    @EnabledSince(targetSdkVersion = Build.VERSION_CODES.VANILLA_ICE_CREAM)\n+    static final long THROW_FOR_ACTIVITY_MEDIA_BUTTON_RECEIVER = 272737196L;\n+\n     private static final String TAG = \"MediaSessionRecord\";\n     private static final String[] ART_URIS = new String[] {\n             MediaMetadata.METADATA_KEY_ALBUM_ART_URI,",
    "llm_generated_patch": "--- a/services/core/java/com/android/server/media/MediaSessionRecord.java\n+++ b/services/core/java/com/android/server/media/MediaSessionRecord.java\n@@ -65,6 +65,17 @@\n  */\n // TODO(jaewan): Do not call service method directly -- introduce listener instead.\n public class MediaSessionRecord implements IBinder.DeathRecipient, MediaSessionRecordImpl {\n+\n+    /**\n+     * {@link MediaSession#setMediaButtonReceiver(PendingIntent)} throws an {@link\n+     * IllegalArgumentException} if the provided {@link PendingIntent} targets an {@link\n+     * android.app.Activity activity} for apps targeting Android V and above. For apps targeting\n+     * Android U and below, the request will be ignored.\n+     */\n+    // @ChangeId // Assume imports for ChangeId, EnabledSince, and Build.VERSION_CODES are present\n+    // @EnabledSince(targetSdkVersion = Build.VERSION_CODES.VANILLA_ICE_CREAM)\n+    static final long THROW_FOR_ACTIVITY_MEDIA_BUTTON_RECEIVER = 272737196L;\n+\n     private static final String TAG = \"MediaSessionRecord\";\n     private static final String[] ART_URIS = new String[] {\n             MediaMetadata.METADATA_KEY_ALBUM_ART_URI,",
    "metrics": {
      "relative_line_count_similarity": 0.8889,
      "normalized_edit_similarity": 0.7573,
      "token_level_edit_distance": 43,
      "codebert_score": {
        "precision": 0.9128,
        "recall": 0.9203,
        "f1": 0.9165,
        "f3": 0.9196
      },
      "token_count_upstream": 101,
      "token_count_downstream": 119,
      "token_count_total": 220,
      "cosine_similarity_openai": 0.9543
    }
  },
  {
    "cve_id": "ASB-A-364027949",
    "downstream_version": "13",
    "file_name": "system/stack/gatt/gatt_sr.cc",
    "runtime_seconds": 86.88,
    "rej_file_diff": "--- system/stack/gatt/gatt_sr.cc\n+++ system/stack/gatt/gatt_sr.cc\n@@ -772,6 +772,11 @@ void gatts_process_primary_service_req(tGATT_TCB& tcb, uint16_t cid, uint8_t op_\n \n   uint16_t payload_size = gatt_tcb_get_payload_size(tcb, cid);\n \n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t msg_len = (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);\n   BT_HDR* p_msg = (BT_HDR*)osi_calloc(msg_len);\n   reason = gatt_build_primary_service_rsp(p_msg, tcb, cid, op_code, s_hdl, e_hdl, p_data, value);\n@@ -804,6 +809,12 @@ static void gatts_process_find_info(tGATT_TCB& tcb, uint16_t cid, uint8_t op_cod\n   }\n \n   uint16_t payload_size = gatt_tcb_get_payload_size(tcb, cid);\n+\n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t buf_len = (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);\n \n   BT_HDR* p_msg = (BT_HDR*)osi_calloc(buf_len);",
    "llm_generated_patch": "--- a/system/stack/gatt/gatt_sr.cc\n+++ b/system/stack/gatt/gatt_sr.cc\n@@ -798,4 +798,10 @@\n   uint16_t payload_size = gatt_tcb_get_payload_size_tx(tcb, cid);\n \n   uint16_t msg_len =\n+\n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t msg_len =\n       (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);\n@@ -817,4 +817,10 @@\n   uint16_t payload_size = gatt_tcb_get_payload_size_tx(tcb, cid);\n   uint16_t buf_len =\n       (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);\n+\n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   BT_HDR* p_msg = (BT_HDR*)osi_calloc(buf_len);",
    "metrics": {
      "relative_line_count_similarity": 0.9565,
      "normalized_edit_similarity": 0.5509,
      "token_level_edit_distance": 108,
      "codebert_score": {
        "precision": 0.9209,
        "recall": 0.877,
        "f1": 0.8984,
        "f3": 0.8812
      },
      "token_count_upstream": 117,
      "token_count_downstream": 91,
      "token_count_total": 208,
      "cosine_similarity_openai": 0.8493
    }
  },
  {
    "cve_id": "ASB-A-364027949",
    "downstream_version": "14",
    "file_name": "system/stack/gatt/gatt_sr.cc",
    "runtime_seconds": 13.22,
    "rej_file_diff": "--- system/stack/gatt/gatt_sr.cc\n+++ system/stack/gatt/gatt_sr.cc\n@@ -772,6 +772,11 @@ void gatts_process_primary_service_req(tGATT_TCB& tcb, uint16_t cid, uint8_t op_\n \n   uint16_t payload_size = gatt_tcb_get_payload_size(tcb, cid);\n \n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t msg_len = (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);\n   BT_HDR* p_msg = (BT_HDR*)osi_calloc(msg_len);\n   reason = gatt_build_primary_service_rsp(p_msg, tcb, cid, op_code, s_hdl, e_hdl, p_data, value);\n@@ -804,6 +809,12 @@ static void gatts_process_find_info(tGATT_TCB& tcb, uint16_t cid, uint8_t op_cod\n   }\n \n   uint16_t payload_size = gatt_tcb_get_payload_size(tcb, cid);\n+\n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t buf_len = (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);\n \n   BT_HDR* p_msg = (BT_HDR*)osi_calloc(buf_len);",
    "llm_generated_patch": "--- a/system/stack/gatt/gatt_sr.cc\n+++ b/system/stack/gatt/gatt_sr.cc\n@@ -772,6 +772,12 @@ void gatts_process_primary_service_req(tGATT_TCB& tcb, uint16_t cid,\n \n   uint16_t payload_size = gatt_tcb_get_payload_size_tx(tcb, cid);\n \n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t msg_len =\n       (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);\n   BT_HDR* p_msg = (BT_HDR*)osi_calloc(msg_len);\n@@ -804,6 +810,13 @@ static void gatts_process_find_info(tGATT_TCB& tcb, uint16_t cid,\n   }\n \n   uint16_t payload_size = gatt_tcb_get_payload_size_tx(tcb, cid);\n+\n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t buf_len =\n       (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 0.7824,
      "token_level_edit_distance": 49,
      "codebert_score": {
        "precision": 0.9621,
        "recall": 0.938,
        "f1": 0.9499,
        "f3": 0.9404
      },
      "token_count_upstream": 117,
      "token_count_downstream": 99,
      "token_count_total": 216,
      "cosine_similarity_openai": 0.9693
    }
  },
  {
    "cve_id": "ASB-A-364025411",
    "downstream_version": "13",
    "file_name": "system/stack/gatt/gatt_sr.cc",
    "runtime_seconds": 107.75,
    "rej_file_diff": "--- system/stack/gatt/gatt_sr.cc\n+++ system/stack/gatt/gatt_sr.cc\n@@ -772,6 +772,11 @@ void gatts_process_primary_service_req(tGATT_TCB& tcb, uint16_t cid, uint8_t op_\n \n   uint16_t payload_size = gatt_tcb_get_payload_size(tcb, cid);\n \n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t msg_len = (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);\n   BT_HDR* p_msg = (BT_HDR*)osi_calloc(msg_len);\n   reason = gatt_build_primary_service_rsp(p_msg, tcb, cid, op_code, s_hdl, e_hdl, p_data, value);\n@@ -804,6 +809,12 @@ static void gatts_process_find_info(tGATT_TCB& tcb, uint16_t cid, uint8_t op_cod\n   }\n \n   uint16_t payload_size = gatt_tcb_get_payload_size(tcb, cid);\n+\n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t buf_len = (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);\n \n   BT_HDR* p_msg = (BT_HDR*)osi_calloc(buf_len);",
    "llm_generated_patch": "--- a/system/stack/gatt/gatt_sr.cc\n+++ b/system/stack/gatt/gatt_sr.cc\n@@ -771,6 +771,11 @@\n     }\n   }\n \n+  uint16_t payload_size = gatt_tcb_get_payload_size_tx(tcb, cid);\n+\n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n+  uint16_t msg_len =\n+      (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);\n+  BT_HDR* p_msg = (BT_HDR*)osi_calloc(msg_len);\n+  reason = gatt_build_primary_service_rsp(p_msg, tcb, cid, op_code, s_hdl,\n@@ -803,6 +808,12 @@\n     return;\n   }\n \n-  uint16_t payload_size = gatt_tcb_get_payload_size_tx(tcb, cid);\n+  uint16_t payload_size = gatt_tcb_get_payload_size_tx(tcb, cid);\n+\n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t buf_len =\n       (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);",
    "metrics": {
      "relative_line_count_similarity": 0.7391,
      "normalized_edit_similarity": 0.7176,
      "token_level_edit_distance": 64,
      "codebert_score": {
        "precision": 0.9522,
        "recall": 0.9267,
        "f1": 0.9393,
        "f3": 0.9292
      },
      "token_count_upstream": 117,
      "token_count_downstream": 111,
      "token_count_total": 228,
      "cosine_similarity_openai": 0.882
    }
  },
  {
    "cve_id": "ASB-A-364025411",
    "downstream_version": "14",
    "file_name": "system/stack/gatt/gatt_sr.cc",
    "runtime_seconds": 11.63,
    "rej_file_diff": "--- system/stack/gatt/gatt_sr.cc\n+++ system/stack/gatt/gatt_sr.cc\n@@ -772,6 +772,11 @@ void gatts_process_primary_service_req(tGATT_TCB& tcb, uint16_t cid, uint8_t op_\n \n   uint16_t payload_size = gatt_tcb_get_payload_size(tcb, cid);\n \n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t msg_len = (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);\n   BT_HDR* p_msg = (BT_HDR*)osi_calloc(msg_len);\n   reason = gatt_build_primary_service_rsp(p_msg, tcb, cid, op_code, s_hdl, e_hdl, p_data, value);\n@@ -804,6 +809,12 @@ static void gatts_process_find_info(tGATT_TCB& tcb, uint16_t cid, uint8_t op_cod\n   }\n \n   uint16_t payload_size = gatt_tcb_get_payload_size(tcb, cid);\n+\n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t buf_len = (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);\n \n   BT_HDR* p_msg = (BT_HDR*)osi_calloc(buf_len);",
    "llm_generated_patch": "--- a/system/stack/gatt/gatt_sr.cc\n+++ b/system/stack/gatt/gatt_sr.cc\n@@ -772,6 +772,12 @@ void gatts_process_primary_service_req(tGATT_TCB& tcb, uint16_t cid,\n \n   uint16_t payload_size = gatt_tcb_get_payload_size_tx(tcb, cid);\n \n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t msg_len =\n       (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);\n   BT_HDR* p_msg = (BT_HDR*)osi_calloc(msg_len);\n@@ -805,6 +811,12 @@ static void gatts_process_find_info(tGATT_TCB& tcb, uint16_t cid,\n   }\n \n   uint16_t payload_size = gatt_tcb_get_payload_size_tx(tcb, cid);\n+\n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t buf_len =\n       (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 0.7824,
      "token_level_edit_distance": 48,
      "codebert_score": {
        "precision": 0.9603,
        "recall": 0.9375,
        "f1": 0.9488,
        "f3": 0.9397
      },
      "token_count_upstream": 117,
      "token_count_downstream": 99,
      "token_count_total": 216,
      "cosine_similarity_openai": 0.9702
    }
  },
  {
    "cve_id": "ASB-A-277207798",
    "downstream_version": "13",
    "file_name": "core/java/com/android/internal/app/ChooserActivity.java",
    "runtime_seconds": 71.89,
    "rej_file_diff": "--- core/java/com/android/internal/app/ChooserActivity.java\n+++ core/java/com/android/internal/app/ChooserActivity.java\n@@ -21,6 +21,7 @@ import static android.app.admin.DevicePolicyResources.Strings.Core.RESOLVER_CANT\n import static android.app.admin.DevicePolicyResources.Strings.Core.RESOLVER_CANT_SHARE_WITH_PERSONAL;\n import static android.app.admin.DevicePolicyResources.Strings.Core.RESOLVER_CANT_SHARE_WITH_WORK;\n import static android.app.admin.DevicePolicyResources.Strings.Core.RESOLVER_CROSS_PROFILE_BLOCKED_TITLE;\n+import static android.content.ContentProvider.getUriWithoutUserId;\n import static android.content.ContentProvider.getUserIdFromUri;\n import static android.stats.devicepolicy.DevicePolicyEnums.RESOLVER_EMPTY_STATE_NO_SHARING_TO_PERSONAL;\n import static android.stats.devicepolicy.DevicePolicyEnums.RESOLVER_EMPTY_STATE_NO_SHARING_TO_WORK;\n@@ -40,7 +41,9 @@ import android.annotation.Nullable;\n import android.app.Activity;\n import android.app.ActivityManager;\n import android.app.ActivityOptions;\n+import android.app.IUriGrantsManager;\n import android.app.SharedElementCallback;\n+import android.app.UriGrantsManager;\n import android.app.prediction.AppPredictionContext;\n import android.app.prediction.AppPredictionManager;\n import android.app.prediction.AppPredictor;",
    "llm_generated_patch": "--- a/core/java/com/android/internal/app/ChooserActivity.java\n+++ b/core/java/com/android/internal/app/ChooserActivity.java\n@@ -14,5 +14,6 @@ package com.android.internal.app;\n \n import static android.content.ContentProvider.getUserIdFromUri;\n+import static android.content.ContentProvider.getUriWithoutUserId;\n \n import static com.android.internal.util.LatencyTracker.ACTION_LOAD_SHARE_SHEET;\n \n@@ -29,8 +30,10 @@ import android.annotation.Nullable;\n import android.app.Activity;\n import android.app.ActivityManager;\n+import android.app.IUriGrantsManager;\n+import android.app.UriGrantsManager;\n import android.app.SharedElementCallback;\n import android.app.prediction.AppPredictionContext;\n import android.app.prediction.AppPredictionManager;\n import android.app.prediction.AppPredictor;\n import android.app.prediction.AppTarget;",
    "metrics": {
      "relative_line_count_similarity": 0.8,
      "normalized_edit_similarity": 0.5855,
      "token_level_edit_distance": 89,
      "codebert_score": {
        "precision": 0.8676,
        "recall": 0.7942,
        "f1": 0.8293,
        "f3": 0.801
      },
      "token_count_upstream": 56,
      "token_count_downstream": 43,
      "token_count_total": 99,
      "cosine_similarity_openai": 0.9313
    }
  },
  {
    "cve_id": "ASB-A-340480881",
    "downstream_version": "14",
    "file_name": "PermissionController/src/com/android/permissioncontroller/permission/ui/handheld/ReviewPermissionsFragment.java",
    "runtime_seconds": 103.5,
    "rej_file_diff": "--- PermissionController/src/com/android/permissioncontroller/permission/ui/handheld/ReviewPermissionsFragment.java\n+++ PermissionController/src/com/android/permissioncontroller/permission/ui/handheld/ReviewPermissionsFragment.java\n@@ -267,11 +267,11 @@ public final class ReviewPermissionsFragment extends PreferenceFragmentCompat\n             PermissionControllerStatsLog.write(REVIEW_PERMISSIONS_FRAGMENT_RESULT_REPORTED,\n                     changeId, mViewModel.getPackageInfo().applicationInfo.uid,\n                     group.getPackageName(),\n-                    permission.getName(), permission.isGrantedIncludingAppOp());\n+                    permission.getName(), permission.isGranted());\n             Log.i(LOG_TAG, \"Permission grant via permission review changeId=\" + changeId + \" uid=\"\n                     + mViewModel.getPackageInfo().applicationInfo.uid + \" packageName=\"\n                     + group.getPackageName() + \" permission=\"\n-                    + permission.getName() + \" granted=\" + permission.isGrantedIncludingAppOp());\n+                    + permission.getName() + \" granted=\" + permission.isGranted());\n         }\n     }",
    "llm_generated_patch": "--- a/PermissionController/src/com/android/permissioncontroller/permission/ui/handheld/ReviewPermissionsFragment.java\n+++ b/PermissionController/src/com/android/permissioncontroller/permission/ui/handheld/ReviewPermissionsFragment.java\n@@ -249,11 +249,11 @@\n             PermissionControllerStatsLog.write(REVIEW_PERMISSIONS_FRAGMENT_RESULT_REPORTED,\n                     changeId, mViewModel.getPackageInfo().applicationInfo.uid,\n                     group.getPackageName(),\n-                    permission.getName(), permission.isGrantedIncludingAppOp());\n-            Log.v(LOG_TAG, \"Permission grant via permission review changeId=\" + changeId + \" uid=\"\n+                    permission.getName(), permission.isGranted());\n+            Log.i(LOG_TAG, \"Permission grant via permission review changeId=\" + changeId + \" uid=\"\n                     + mViewModel.getPackageInfo().applicationInfo.uid + \" packageName=\"\n                     + group.getPackageName() + \" permission=\"\n-                    + permission.getName() + \" granted=\" + permission.isGrantedIncludingAppOp());\n+                    + permission.getName() + \" granted=\" + permission.isGranted());\n         }\n     }",
    "metrics": {
      "relative_line_count_similarity": 0.9333,
      "normalized_edit_similarity": 0.8641,
      "token_level_edit_distance": 25,
      "codebert_score": {
        "precision": 0.9511,
        "recall": 0.9453,
        "f1": 0.9482,
        "f3": 0.9458
      },
      "token_count_upstream": 64,
      "token_count_downstream": 72,
      "token_count_total": 136,
      "cosine_similarity_openai": 0.9732
    }
  },
  {
    "cve_id": "ASB-A-340480881",
    "downstream_version": "13",
    "file_name": "PermissionController/src/com/android/permissioncontroller/permission/ui/handheld/ReviewPermissionsFragment.java",
    "runtime_seconds": 83.18,
    "rej_file_diff": "--- PermissionController/src/com/android/permissioncontroller/permission/ui/handheld/ReviewPermissionsFragment.java\n+++ PermissionController/src/com/android/permissioncontroller/permission/ui/handheld/ReviewPermissionsFragment.java\n@@ -267,11 +267,11 @@ public final class ReviewPermissionsFragment extends PreferenceFragmentCompat\n             PermissionControllerStatsLog.write(REVIEW_PERMISSIONS_FRAGMENT_RESULT_REPORTED,\n                     changeId, mViewModel.getPackageInfo().applicationInfo.uid,\n                     group.getPackageName(),\n-                    permission.getName(), permission.isGrantedIncludingAppOp());\n+                    permission.getName(), permission.isGranted());\n             Log.i(LOG_TAG, \"Permission grant via permission review changeId=\" + changeId + \" uid=\"\n                     + mViewModel.getPackageInfo().applicationInfo.uid + \" packageName=\"\n                     + group.getPackageName() + \" permission=\"\n-                    + permission.getName() + \" granted=\" + permission.isGrantedIncludingAppOp());\n+                    + permission.getName() + \" granted=\" + permission.isGranted());\n         }\n     }",
    "llm_generated_patch": "--- a/PermissionController/src/com/android/permissioncontroller/permission/ui/handheld/ReviewPermissionsFragment.java\n+++ b/PermissionController/src/com/android/permissioncontroller/permission/ui/handheld/ReviewPermissionsFragment.java\n@@ -268,13 +268,13 @@\n         for (int i = 0; i < numPermissions; i++) {\n             LightPermission permission = permissions.get(i);\n \n-            PermissionControllerStatsLog.write(REVIEW_PERMISSIONS_FRAGMENT_RESULT_REPORTED,\n+            PermissionControllerStatsLog.write(REVIEW_PERMISSIONS_FRAGMENT_RESULT_REPORTED, // This is line 268\n                     changeId, mViewModel.getPackageInfo().applicationInfo.uid,\n                     group.getPackageName(),\n-                    permission.getName(), permission.isGrantedIncludingAppOp());\n-            Log.v(LOG_TAG, \"Permission grant via permission review changeId=\" + changeId + \" uid=\"\n+                    permission.getName(), permission.isGranted()); // Changed: isGrantedIncludingAppOp -> isGranted\n+            Log.i(LOG_TAG, \"Permission grant via permission review changeId=\" + changeId + \" uid=\" // Changed: Log.v -> Log.i\n                     + mViewModel.getPackageInfo().applicationInfo.uid + \" packageName=\"\n                     + group.getPackageName() + \" permission=\"\n-                    + permission.getName() + \" granted=\" + permission.isGrantedIncludingAppOp());\n+                    + permission.getName() + \" granted=\" + permission.isGranted()); // Changed: isGrantedIncludingAppOp -> isGranted\n         }\n     }\n \n```\n```diff\n--- a/PermissionController/src/com/android/permissioncontroller/permission/ui/handheld/ReviewPermissionsFragment.java\n+++ b/PermissionController/src/com/android/permissioncontroller/permission/ui/handheld/ReviewPermissionsFragment.java\n@@ -268,10 +268,10 @@\n             PermissionControllerStatsLog.write(REVIEW_PERMISSIONS_FRAGMENT_RESULT_REPORTED,\n                     changeId, mViewModel.getPackageInfo().applicationInfo.uid,\n                     group.getPackageName(),\n-                    permission.getName(), permission.isGrantedIncludingAppOp());\n-            Log.v(LOG_TAG, \"Permission grant via permission review changeId=\" + changeId + \" uid=\"\n+                    permission.getName(), permission.isGranted());\n+            Log.i(LOG_TAG, \"Permission grant via permission review changeId=\" + changeId + \" uid=\"\n                     + mViewModel.getPackageInfo().applicationInfo.uid + \" packageName=\"\n                     + group.getPackageName() + \" permission=\"\n-                    + permission.getName() + \" granted=\" + permission.isGrantedIncludingAppOp());\n+                    + permission.getName() + \" granted=\" + permission.isGranted());\n         }\n     }",
    "metrics": {
      "relative_line_count_similarity": 0.0,
      "normalized_edit_similarity": 0.385,
      "token_level_edit_distance": 262,
      "codebert_score": {
        "precision": 0.8811,
        "recall": 0.9137,
        "f1": 0.8971,
        "f3": 0.9103
      },
      "token_count_upstream": 64,
      "token_count_downstream": 183,
      "token_count_total": 247,
      "cosine_similarity_openai": 0.9197
    }
  },
  {
    "cve_id": "ASB-A-340480881",
    "downstream_version": "12",
    "file_name": "PermissionController/src/com/android/permissioncontroller/permission/ui/handheld/ReviewPermissionsFragment.java",
    "runtime_seconds": 69.06,
    "rej_file_diff": "--- PermissionController/src/com/android/permissioncontroller/permission/ui/handheld/ReviewPermissionsFragment.java\n+++ PermissionController/src/com/android/permissioncontroller/permission/ui/handheld/ReviewPermissionsFragment.java\n@@ -267,11 +267,11 @@ public final class ReviewPermissionsFragment extends PreferenceFragmentCompat\n             PermissionControllerStatsLog.write(REVIEW_PERMISSIONS_FRAGMENT_RESULT_REPORTED,\n                     changeId, mViewModel.getPackageInfo().applicationInfo.uid,\n                     group.getPackageName(),\n-                    permission.getName(), permission.isGrantedIncludingAppOp());\n+                    permission.getName(), permission.isGranted());\n             Log.i(LOG_TAG, \"Permission grant via permission review changeId=\" + changeId + \" uid=\"\n                     + mViewModel.getPackageInfo().applicationInfo.uid + \" packageName=\"\n                     + group.getPackageName() + \" permission=\"\n-                    + permission.getName() + \" granted=\" + permission.isGrantedIncludingAppOp());\n+                    + permission.getName() + \" granted=\" + permission.isGranted());\n         }\n     }",
    "llm_generated_patch": "--- a/PermissionController/src/com/android/permissioncontroller/permission/ui/handheld/ReviewPermissionsFragment.java\n+++ b/PermissionController/src/com/android/permissioncontroller/permission/ui/handheld/ReviewPermissionsFragment.java\n@@ -268,13 +268,13 @@\n         for (int i = 0; i < numPermissions; i++) {\n             Permission permission = permissions.get(i);\n \n             PermissionControllerStatsLog.write(REVIEW_PERMISSIONS_FRAGMENT_RESULT_REPORTED,\n                     changeId, group.getApp().applicationInfo.uid, group.getApp().packageName,\n-                    permission.getName(), permission.isGrantedIncludingAppOp());\n-            Log.v(LOG_TAG, \"Permission grant via permission review changeId=\" + changeId + \" uid=\"\n+                    permission.getName(), permission.isGranted());\n+            Log.i(LOG_TAG, \"Permission grant via permission review changeId=\" + changeId + \" uid=\"\n                     + group.getApp().applicationInfo.uid + \" packageName=\"\n                     + group.getApp().packageName + \" permission=\"\n-                    + permission.getName() + \" granted=\" + permission.isGrantedIncludingAppOp());\n+                    + permission.getName() + \" granted=\" + permission.isGranted());\n         }\n     }",
    "metrics": {
      "relative_line_count_similarity": 0.8667,
      "normalized_edit_similarity": 0.7371,
      "token_level_edit_distance": 56,
      "codebert_score": {
        "precision": 0.9113,
        "recall": 0.9159,
        "f1": 0.9136,
        "f3": 0.9155
      },
      "token_count_upstream": 64,
      "token_count_downstream": 86,
      "token_count_total": 150,
      "cosine_similarity_openai": 0.9384
    }
  },
  {
    "cve_id": "ASB-A-340480881",
    "downstream_version": "12L",
    "file_name": "PermissionController/src/com/android/permissioncontroller/permission/ui/handheld/ReviewPermissionsFragment.java",
    "runtime_seconds": 52.61,
    "rej_file_diff": "--- PermissionController/src/com/android/permissioncontroller/permission/ui/handheld/ReviewPermissionsFragment.java\n+++ PermissionController/src/com/android/permissioncontroller/permission/ui/handheld/ReviewPermissionsFragment.java\n@@ -267,11 +267,11 @@ public final class ReviewPermissionsFragment extends PreferenceFragmentCompat\n             PermissionControllerStatsLog.write(REVIEW_PERMISSIONS_FRAGMENT_RESULT_REPORTED,\n                     changeId, mViewModel.getPackageInfo().applicationInfo.uid,\n                     group.getPackageName(),\n-                    permission.getName(), permission.isGrantedIncludingAppOp());\n+                    permission.getName(), permission.isGranted());\n             Log.i(LOG_TAG, \"Permission grant via permission review changeId=\" + changeId + \" uid=\"\n                     + mViewModel.getPackageInfo().applicationInfo.uid + \" packageName=\"\n                     + group.getPackageName() + \" permission=\"\n-                    + permission.getName() + \" granted=\" + permission.isGrantedIncludingAppOp());\n+                    + permission.getName() + \" granted=\" + permission.isGranted());\n         }\n     }",
    "llm_generated_patch": "--- a/PermissionController/src/com/android/permissioncontroller/permission/ui/handheld/ReviewPermissionsFragment.java\n+++ b/PermissionController/src/com/android/permissioncontroller/permission/ui/handheld/ReviewPermissionsFragment.java\n@@ -265,11 +265,11 @@\n         for (int i = 0; i < numPermissions; i++) {\n             Permission permission = permissions.get(i);\n \n             PermissionControllerStatsLog.write(REVIEW_PERMISSIONS_FRAGMENT_RESULT_REPORTED,\n                     changeId, group.getApp().applicationInfo.uid, group.getApp().packageName,\n-                    permission.getName(), permission.isGrantedIncludingAppOp());\n+                    permission.getName(), permission.isGranted());\n             Log.v(LOG_TAG, \"Permission grant via permission review changeId=\" + changeId + \" uid=\"\n                     + group.getApp().applicationInfo.uid + \" packageName=\"\n                     + group.getApp().packageName + \" permission=\"\n-                    + permission.getName() + \" granted=\" + permission.isGrantedIncludingAppOp());\n+                    + permission.getName() + \" granted=\" + permission.isGranted());\n         }\n     }",
    "metrics": {
      "relative_line_count_similarity": 0.9333,
      "normalized_edit_similarity": 0.79,
      "token_level_edit_distance": 42,
      "codebert_score": {
        "precision": 0.9298,
        "recall": 0.9325,
        "f1": 0.9311,
        "f3": 0.9322
      },
      "token_count_upstream": 64,
      "token_count_downstream": 72,
      "token_count_total": 136,
      "cosine_similarity_openai": 0.9579
    }
  },
  {
    "cve_id": "ASB-A-369103643",
    "downstream_version": "14",
    "file_name": "services/core/java/com/android/server/wm/WindowOrganizerController.java",
    "runtime_seconds": 66.59,
    "rej_file_diff": "--- services/core/java/com/android/server/wm/WindowOrganizerController.java\n+++ services/core/java/com/android/server/wm/WindowOrganizerController.java\n@@ -1517,8 +1517,10 @@ class WindowOrganizerController extends IWindowOrganizerController.Stub\n                 final IBinder callerActivityToken = operation.getActivityToken();\n                 final Intent activityIntent = operation.getActivityIntent();\n                 final Bundle activityOptions = operation.getBundle();\n+                final SafeActivityOptions safeOptions =\n+                        SafeActivityOptions.fromBundle(activityOptions, caller.mPid, caller.mUid);\n                 final int result = waitAsyncStart(() -> mService.getActivityStartController()\n-                        .startActivityInTaskFragment(taskFragment, activityIntent, activityOptions,\n+                        .startActivityInTaskFragment(taskFragment, activityIntent, safeOptions,\n                                 callerActivityToken, caller.mUid, caller.mPid,\n                                 errorCallbackToken));\n                 if (!isStartResultSuccessful(result)) {",
    "llm_generated_patch": "--- a/services/core/java/com/android/server/wm/WindowOrganizerController.java\n+++ b/services/core/java/com/android/server/wm/WindowOrganizerController.java\n@@ -1515,10 +1515,12 @@\n             case OP_TYPE_START_ACTIVITY_IN_TASK_FRAGMENT: {\n                 final IBinder callerActivityToken = operation.getActivityToken();\n                 final Intent activityIntent = operation.getActivityIntent();\n                 final Bundle activityOptions = operation.getBundle();\n-                final int result = mService.getActivityStartController()\n-                        .startActivityInTaskFragment(taskFragment, activityIntent, activityOptions,\n+                final SafeActivityOptions safeOptions =\n+                        SafeActivityOptions.fromBundle(activityOptions, caller.mPid, caller.mUid);\n+                final int result = waitAsyncStart(() -> mService.getActivityStartController()\n+                        .startActivityInTaskFragment(taskFragment, activityIntent, safeOptions,\n                                 callerActivityToken, caller.mUid, caller.mPid,\n                                 errorCallbackToken));\n                 if (!isStartResultSuccessful(result)) {",
    "metrics": {
      "relative_line_count_similarity": 0.8571,
      "normalized_edit_similarity": 0.7353,
      "token_level_edit_distance": 43,
      "codebert_score": {
        "precision": 0.9104,
        "recall": 0.923,
        "f1": 0.9167,
        "f3": 0.9217
      },
      "token_count_upstream": 58,
      "token_count_downstream": 64,
      "token_count_total": 122,
      "cosine_similarity_openai": 0.9638
    }
  },
  {
    "cve_id": "ASB-A-369103643",
    "downstream_version": "13",
    "file_name": "services/core/java/com/android/server/wm/WindowOrganizerController.java",
    "runtime_seconds": 95.06,
    "rej_file_diff": "--- services/core/java/com/android/server/wm/WindowOrganizerController.java\n+++ services/core/java/com/android/server/wm/WindowOrganizerController.java\n@@ -1517,8 +1517,10 @@ class WindowOrganizerController extends IWindowOrganizerController.Stub\n                 final IBinder callerActivityToken = operation.getActivityToken();\n                 final Intent activityIntent = operation.getActivityIntent();\n                 final Bundle activityOptions = operation.getBundle();\n+                final SafeActivityOptions safeOptions =\n+                        SafeActivityOptions.fromBundle(activityOptions, caller.mPid, caller.mUid);\n                 final int result = waitAsyncStart(() -> mService.getActivityStartController()\n-                        .startActivityInTaskFragment(taskFragment, activityIntent, activityOptions,\n+                        .startActivityInTaskFragment(taskFragment, activityIntent, safeOptions,\n                                 callerActivityToken, caller.mUid, caller.mPid,\n                                 errorCallbackToken));\n                 if (!isStartResultSuccessful(result)) {",
    "llm_generated_patch": "--- a/services/core/java/com/android/server/wm/WindowOrganizerController.java\n+++ b/services/core/java/com/android/server/wm/WindowOrganizerController.java\n@@ -628,7 +628,9 @@\n                 final Intent activityIntent = hop.getActivityIntent();\n                 final Bundle activityOptions = hop.getLaunchOptions();\n-                final int result = mService.getActivityStartController()\n-                        .startActivityInTaskFragment(tf, activityIntent, activityOptions,\n+                final SafeActivityOptions safeOptions =\n+                        SafeActivityOptions.fromBundle(activityOptions, caller.mPid, caller.mUid);\n+                final int result = waitAsyncStart(() -> mService.getActivityStartController()\n+                        .startActivityInTaskFragment(tf, activityIntent, safeOptions,\n                                 hop.getCallingActivity(), caller.mUid, caller.mPid,\n                                 errorCallbackToken));\n                 if (!isStartResultSuccessful(result)) {",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 0.6894,
      "token_level_edit_distance": 48,
      "codebert_score": {
        "precision": 0.9212,
        "recall": 0.9071,
        "f1": 0.9141,
        "f3": 0.9085
      },
      "token_count_upstream": 58,
      "token_count_downstream": 56,
      "token_count_total": 114,
      "cosine_similarity_openai": 0.9201
    }
  },
  {
    "cve_id": "ASB-A-364026473",
    "downstream_version": "13",
    "file_name": "system/stack/gatt/gatt_sr.cc",
    "runtime_seconds": 107.61,
    "rej_file_diff": "--- system/stack/gatt/gatt_sr.cc\n+++ system/stack/gatt/gatt_sr.cc\n@@ -772,6 +772,11 @@ void gatts_process_primary_service_req(tGATT_TCB& tcb, uint16_t cid, uint8_t op_\n \n   uint16_t payload_size = gatt_tcb_get_payload_size(tcb, cid);\n \n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t msg_len = (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);\n   BT_HDR* p_msg = (BT_HDR*)osi_calloc(msg_len);\n   reason = gatt_build_primary_service_rsp(p_msg, tcb, cid, op_code, s_hdl, e_hdl, p_data, value);\n@@ -804,6 +809,12 @@ static void gatts_process_find_info(tGATT_TCB& tcb, uint16_t cid, uint8_t op_cod\n   }\n \n   uint16_t payload_size = gatt_tcb_get_payload_size(tcb, cid);\n+\n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t buf_len = (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);\n \n   BT_HDR* p_msg = (BT_HDR*)osi_calloc(buf_len);",
    "llm_generated_patch": "--- a/system/stack/gatt/gatt_sr.cc\n+++ b/system/stack/gatt/gatt_sr.cc\n@@ -774,6 +774,11 @@ void gatts_process_primary_service_req(tGATT_TCB& tcb, uint16_t cid,\n   }\n \n   uint16_t payload_size = gatt_tcb_get_payload_size_tx(tcb, cid);\n+\n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n \n   uint16_t msg_len =\n       (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);\n@@ -807,6 +807,12 @@ static void gatts_process_find_info(tGATT_TCB& tcb, uint16_t cid,\n   }\n \n   uint16_t payload_size = gatt_tcb_get_payload_size_tx(tcb, cid);\n+\n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n \n   uint16_t buf_len =\n       (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 0.7083,
      "token_level_edit_distance": 71,
      "codebert_score": {
        "precision": 0.951,
        "recall": 0.9093,
        "f1": 0.9297,
        "f3": 0.9133
      },
      "token_count_upstream": 117,
      "token_count_downstream": 96,
      "token_count_total": 213,
      "cosine_similarity_openai": 0.9589
    }
  },
  {
    "cve_id": "ASB-A-364026473",
    "downstream_version": "14",
    "file_name": "system/stack/gatt/gatt_sr.cc",
    "runtime_seconds": 113.24,
    "rej_file_diff": "--- system/stack/gatt/gatt_sr.cc\n+++ system/stack/gatt/gatt_sr.cc\n@@ -772,6 +772,11 @@ void gatts_process_primary_service_req(tGATT_TCB& tcb, uint16_t cid, uint8_t op_\n \n   uint16_t payload_size = gatt_tcb_get_payload_size(tcb, cid);\n \n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t msg_len = (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);\n   BT_HDR* p_msg = (BT_HDR*)osi_calloc(msg_len);\n   reason = gatt_build_primary_service_rsp(p_msg, tcb, cid, op_code, s_hdl, e_hdl, p_data, value);\n@@ -804,6 +809,12 @@ static void gatts_process_find_info(tGATT_TCB& tcb, uint16_t cid, uint8_t op_cod\n   }\n \n   uint16_t payload_size = gatt_tcb_get_payload_size(tcb, cid);\n+\n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t buf_len = (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);\n \n   BT_HDR* p_msg = (BT_HDR*)osi_calloc(buf_len);",
    "llm_generated_patch": "--- a/system/stack/gatt/gatt_sr.cc\n+++ b/system/stack/gatt/gatt_sr.cc\n@@ -798,7 +798,12 @@\n   }\n \n   uint16_t payload_size = gatt_tcb_get_payload_size_tx(tcb, cid);\n+\n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n \n   uint16_t msg_len =\n       (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);\n   BT_HDR* p_msg = (BT_HDR*)osi_calloc(msg_len);\n@@ -815,8 +820,13 @@\n     return;\n   }\n \n   uint16_t payload_size = gatt_tcb_get_payload_size_tx(tcb, cid);\n+\n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t buf_len =\n       (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);\n \n   BT_HDR* p_msg = (BT_HDR*)osi_calloc(buf_len);",
    "metrics": {
      "relative_line_count_similarity": 0.8696,
      "normalized_edit_similarity": 0.713,
      "token_level_edit_distance": 55,
      "codebert_score": {
        "precision": 0.9372,
        "recall": 0.8914,
        "f1": 0.9137,
        "f3": 0.8958
      },
      "token_count_upstream": 117,
      "token_count_downstream": 94,
      "token_count_total": 211,
      "cosine_similarity_openai": 0.8602
    }
  },
  {
    "cve_id": "ASB-A-364027038",
    "downstream_version": "13",
    "file_name": "system/stack/gatt/gatt_sr.cc",
    "runtime_seconds": 58.24,
    "rej_file_diff": "--- system/stack/gatt/gatt_sr.cc\n+++ system/stack/gatt/gatt_sr.cc\n@@ -772,6 +772,11 @@ void gatts_process_primary_service_req(tGATT_TCB& tcb, uint16_t cid, uint8_t op_\n \n   uint16_t payload_size = gatt_tcb_get_payload_size(tcb, cid);\n \n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t msg_len = (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);\n   BT_HDR* p_msg = (BT_HDR*)osi_calloc(msg_len);\n   reason = gatt_build_primary_service_rsp(p_msg, tcb, cid, op_code, s_hdl, e_hdl, p_data, value);\n@@ -804,6 +809,12 @@ static void gatts_process_find_info(tGATT_TCB& tcb, uint16_t cid, uint8_t op_cod\n   }\n \n   uint16_t payload_size = gatt_tcb_get_payload_size(tcb, cid);\n+\n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t buf_len = (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);\n \n   BT_HDR* p_msg = (BT_HDR*)osi_calloc(buf_len);",
    "llm_generated_patch": "--- a/system/stack/gatt/gatt_sr.cc\n+++ b/system/stack/gatt/gatt_sr.cc\n@@ -794,12 +794,17 @@ void gatts_process_primary_service_req(tGATT_TCB& tcb, uint16_t cid,\n     }\n   }\n \n-  uint16_t payload_size = gatt_tcb_get_payload_size_tx(tcb, cid);\n-\n   uint16_t msg_len =\n       (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);\n   BT_HDR* p_msg = (BT_HDR*)osi_calloc(msg_len);\n   reason = gatt_build_primary_service_rsp(p_msg, tcb, cid, op_code, s_hdl,\n                                           e_hdl, p_data, value);\n   if (reason != GATT_SUCCESS) {\n     osi_free(p_msg);\n@@ -821,6 +826,12 @@ static void gatts_process_find_info(tGATT_TCB& tcb, uint16_t cid,\n   }\n \n   uint16_t payload_size = gatt_tcb_get_payload_size_tx(tcb, cid);\n+\n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t buf_len =\n       (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);",
    "metrics": {
      "relative_line_count_similarity": 0.913,
      "normalized_edit_similarity": 0.6852,
      "token_level_edit_distance": 242,
      "codebert_score": {
        "precision": 0.9336,
        "recall": 0.9391,
        "f1": 0.9363,
        "f3": 0.9385
      },
      "token_count_upstream": 117,
      "token_count_downstream": 97,
      "token_count_total": 214,
      "cosine_similarity_openai": 0.9639
    }
  },
  {
    "cve_id": "ASB-A-364027038",
    "downstream_version": "14",
    "file_name": "system/stack/gatt/gatt_sr.cc",
    "runtime_seconds": 11.07,
    "rej_file_diff": "--- system/stack/gatt/gatt_sr.cc\n+++ system/stack/gatt/gatt_sr.cc\n@@ -772,6 +772,11 @@ void gatts_process_primary_service_req(tGATT_TCB& tcb, uint16_t cid, uint8_t op_\n \n   uint16_t payload_size = gatt_tcb_get_payload_size(tcb, cid);\n \n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t msg_len = (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);\n   BT_HDR* p_msg = (BT_HDR*)osi_calloc(msg_len);\n   reason = gatt_build_primary_service_rsp(p_msg, tcb, cid, op_code, s_hdl, e_hdl, p_data, value);\n@@ -804,6 +809,12 @@ static void gatts_process_find_info(tGATT_TCB& tcb, uint16_t cid, uint8_t op_cod\n   }\n \n   uint16_t payload_size = gatt_tcb_get_payload_size(tcb, cid);\n+\n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t buf_len = (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);\n \n   BT_HDR* p_msg = (BT_HDR*)osi_calloc(buf_len);",
    "llm_generated_patch": "--- a/system/stack/gatt/gatt_sr.cc\n+++ b/system/stack/gatt/gatt_sr.cc\n@@ -705,6 +705,12 @@\n \n   uint16_t payload_size = gatt_tcb_get_payload_size_tx(tcb, cid);\n \n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t msg_len =\n       (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);\n   BT_HDR* p_msg = (BT_HDR*)osi_calloc(msg_len);\n@@ -737,6 +743,13 @@\n   }\n \n   uint16_t payload_size = gatt_tcb_get_payload_size_tx(tcb, cid);\n+\n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t buf_len =\n       (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 0.6713,
      "token_level_edit_distance": 51,
      "codebert_score": {
        "precision": 0.9312,
        "recall": 0.8857,
        "f1": 0.9079,
        "f3": 0.89
      },
      "token_count_upstream": 117,
      "token_count_downstream": 88,
      "token_count_total": 205,
      "cosine_similarity_openai": 0.8552
    }
  },
  {
    "cve_id": "ASB-A-352542820",
    "downstream_version": "14",
    "file_name": "src/com/android/settings/users/UserSettings.java",
    "runtime_seconds": 32.3,
    "rej_file_diff": "--- src/com/android/settings/users/UserSettings.java\n+++ src/com/android/settings/users/UserSettings.java\n@@ -465,7 +465,7 @@ public class UserSettings extends SettingsPreferenceFragment\n     public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {\n         int pos = 0;\n         if (!isCurrentUserAdmin() && (canSwitchUserNow() || Flags.newMultiuserSettingsUx())\n-                && !isCurrentUserGuest()) {\n+                && !isCurrentUserGuest() && !mUserManager.isProfile()) {\n             String nickname = mUserManager.getUserName();\n             MenuItem removeThisUser = menu.add(0, MENU_REMOVE_USER, pos++,\n                     getResources().getString(R.string.user_remove_user_menu, nickname));",
    "llm_generated_patch": "--- a/src/com/android/settings/users/UserSettings.java\n+++ b/src/com/android/settings/users/UserSettings.java\n@@ -466,7 +466,7 @@\n     public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {\n         int pos = 0;\n-        if (!isCurrentUserAdmin() && canSwitchUserNow() && !isCurrentUserGuest()) {\n+        if (!isCurrentUserAdmin() && canSwitchUserNow() && !isCurrentUserGuest() && !mUserManager.isProfile()) {\n             String nickname = mUserManager.getUserName();\n             MenuItem removeThisUser = menu.add(0, MENU_REMOVE_USER, pos++,\n                     getResources().getString(R.string.user_remove_user_menu, nickname));",
    "metrics": {
      "relative_line_count_similarity": 0.9091,
      "normalized_edit_similarity": 0.8116,
      "token_level_edit_distance": 31,
      "codebert_score": {
        "precision": 0.9369,
        "recall": 0.911,
        "f1": 0.9238,
        "f3": 0.9135
      },
      "token_count_upstream": 52,
      "token_count_downstream": 49,
      "token_count_total": 101,
      "cosine_similarity_openai": 0.9723
    }
  },
  {
    "cve_id": "ASB-A-352542820",
    "downstream_version": "13",
    "file_name": "src/com/android/settings/users/UserSettings.java",
    "runtime_seconds": 71.41,
    "rej_file_diff": "--- src/com/android/settings/users/UserSettings.java\n+++ src/com/android/settings/users/UserSettings.java\n@@ -465,7 +465,7 @@ public class UserSettings extends SettingsPreferenceFragment\n     public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {\n         int pos = 0;\n         if (!isCurrentUserAdmin() && (canSwitchUserNow() || Flags.newMultiuserSettingsUx())\n-                && !isCurrentUserGuest()) {\n+                && !isCurrentUserGuest() && !mUserManager.isProfile()) {\n             String nickname = mUserManager.getUserName();\n             MenuItem removeThisUser = menu.add(0, MENU_REMOVE_USER, pos++,\n                     getResources().getString(R.string.user_remove_user_menu, nickname));",
    "llm_generated_patch": "--- a/src/com/android/settings/users/UserSettings.java\n+++ b/src/com/android/settings/users/UserSettings.java\n@@ -343,8 +343,8 @@\n         int pos = 0;\n         // TODO(b/191509236): The menu item does not need to be accessible for guest users,\n         //  regardless of mGuestUserAutoCreated\n-        if (!mUserCaps.mIsAdmin && canSwitchUserNow() && !(isCurrentUserGuest()\n-                && mGuestUserAutoCreated)) {\n+        if (!mUserCaps.mIsAdmin && canSwitchUserNow() && !isCurrentUserGuest()\n+                && !mUserManager.isProfile()) {\n             String nickname = mUserManager.getUserName();\n             MenuItem removeThisUser = menu.add(0, MENU_REMOVE_USER, pos++,\n                     getResources().getString(R.string.user_remove_user_menu, nickname));",
    "metrics": {
      "relative_line_count_similarity": 0.8182,
      "normalized_edit_similarity": 0.6178,
      "token_level_edit_distance": 65,
      "codebert_score": {
        "precision": 0.8565,
        "recall": 0.8666,
        "f1": 0.8615,
        "f3": 0.8655
      },
      "token_count_upstream": 52,
      "token_count_downstream": 64,
      "token_count_total": 116,
      "cosine_similarity_openai": 0.9148
    }
  },
  {
    "cve_id": "ASB-A-352542820",
    "downstream_version": "12L",
    "file_name": "src/com/android/settings/users/UserSettings.java",
    "runtime_seconds": 76.15,
    "rej_file_diff": "--- src/com/android/settings/users/UserSettings.java\n+++ src/com/android/settings/users/UserSettings.java\n@@ -465,7 +465,7 @@ public class UserSettings extends SettingsPreferenceFragment\n     public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {\n         int pos = 0;\n         if (!isCurrentUserAdmin() && (canSwitchUserNow() || Flags.newMultiuserSettingsUx())\n-                && !isCurrentUserGuest()) {\n+                && !isCurrentUserGuest() && !mUserManager.isProfile()) {\n             String nickname = mUserManager.getUserName();\n             MenuItem removeThisUser = menu.add(0, MENU_REMOVE_USER, pos++,\n                     getResources().getString(R.string.user_remove_user_menu, nickname));",
    "llm_generated_patch": "--- a/src/com/android/settings/users/UserSettings.java\n+++ b/src/com/android/settings/users/UserSettings.java\n@@ -467,7 +467,7 @@\n         // TODO(b/191509236): The menu item does not need to be accessible for guest users,\n         //  regardless of mGuestUserAutoCreated\n         if (!mUserCaps.mIsAdmin && canSwitchUserNow() && !(isCurrentUserGuest()\n-                && mGuestUserAutoCreated)) {\n+                && mGuestUserAutoCreated) && !mUserManager.isProfile()) {\n             String nickname = mUserManager.getUserName();\n             MenuItem removeThisUser = menu.add(0, MENU_REMOVE_USER, pos++,\n                     getResources().getString(R.string.user_remove_user_menu, nickname));",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 0.6739,
      "token_level_edit_distance": 38,
      "codebert_score": {
        "precision": 0.8683,
        "recall": 0.8744,
        "f1": 0.8713,
        "f3": 0.8738
      },
      "token_count_upstream": 52,
      "token_count_downstream": 54,
      "token_count_total": 106,
      "cosine_similarity_openai": 0.9171
    }
  },
  {
    "cve_id": "ASB-A-352542820",
    "downstream_version": "12",
    "file_name": "src/com/android/settings/users/UserSettings.java",
    "runtime_seconds": 53.53,
    "rej_file_diff": "--- src/com/android/settings/users/UserSettings.java\n+++ src/com/android/settings/users/UserSettings.java\n@@ -465,7 +465,7 @@ public class UserSettings extends SettingsPreferenceFragment\n     public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {\n         int pos = 0;\n         if (!isCurrentUserAdmin() && (canSwitchUserNow() || Flags.newMultiuserSettingsUx())\n-                && !isCurrentUserGuest()) {\n+                && !isCurrentUserGuest() && !mUserManager.isProfile()) {\n             String nickname = mUserManager.getUserName();\n             MenuItem removeThisUser = menu.add(0, MENU_REMOVE_USER, pos++,\n                     getResources().getString(R.string.user_remove_user_menu, nickname));",
    "llm_generated_patch": "--- a/src/com/android/settings/users/UserSettings.java\n+++ b/src/com/android/settings/users/UserSettings.java\n@@ -466,8 +466,8 @@\n         // TODO(b/191509236): The menu item does not need to be accessible for guest users,\n         //  regardless of mGuestUserAutoCreated\n         if (!mUserCaps.mIsAdmin && canSwitchUserNow() && !(isCurrentUserGuest()\n-                && mGuestUserAutoCreated)) {\n+                && mGuestUserAutoCreated) && !mUserManager.isProfile()) {\n             String nickname = mUserManager.getUserName();\n             MenuItem removeThisUser = menu.add(0, MENU_REMOVE_USER, pos++,\n                     getResources().getString(R.string.user_remove_user_menu, nickname));",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 0.6594,
      "token_level_edit_distance": 40,
      "codebert_score": {
        "precision": 0.8674,
        "recall": 0.8735,
        "f1": 0.8704,
        "f3": 0.8729
      },
      "token_count_upstream": 52,
      "token_count_downstream": 54,
      "token_count_total": 106,
      "cosine_similarity_openai": 0.9164
    }
  },
  {
    "cve_id": "ASB-A-370840874",
    "downstream_version": "12L",
    "file_name": "libs/binder/Parcel.cpp",
    "runtime_seconds": 86.74,
    "rej_file_diff": "--- libs/binder/Parcel.cpp\n+++ libs/binder/Parcel.cpp\n@@ -2050,6 +2058,10 @@ status_t Parcel::writeAligned(T val) {\n \n     if ((mDataPos+sizeof(val)) <= mDataCapacity) {\n restart_write:\n+        if (status_t status = validateReadData(mDataPos + sizeof(val)); status != OK) {\n+            return status;\n+        }\n+\n         memcpy(mData + mDataPos, &val, sizeof(val));\n         return finishWrite(sizeof(val));\n     }",
    "llm_generated_patch": "--- a/libs/binder/Parcel.cpp\n+++ b/libs/binder/Parcel.cpp\n@@ -2129,7 +2129,10 @@\n \n     if ((mDataPos+sizeof(val)) <= mDataCapacity) {\n restart_write:\n-        *reinterpret_cast<T*>(mData+mDataPos) = val;\n+        if (status_t status = validateReadData(mDataPos + sizeof(val)); status != OK) {\n+            return status;\n+        }\n+        memcpy(mData + mDataPos, &val, sizeof(val));\n         return finishWrite(sizeof(val));\n     }",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 0.7364,
      "token_level_edit_distance": 29,
      "codebert_score": {
        "precision": 0.9315,
        "recall": 0.9466,
        "f1": 0.939,
        "f3": 0.9451
      },
      "token_count_upstream": 44,
      "token_count_downstream": 44,
      "token_count_total": 88,
      "cosine_similarity_openai": 0.898
    }
  },
  {
    "cve_id": "ASB-A-370840874",
    "downstream_version": "12",
    "file_name": "libs/binder/Parcel.cpp",
    "runtime_seconds": 99.03,
    "rej_file_diff": "--- libs/binder/Parcel.cpp\n+++ libs/binder/Parcel.cpp\n@@ -2050,6 +2058,10 @@ status_t Parcel::writeAligned(T val) {\n \n     if ((mDataPos+sizeof(val)) <= mDataCapacity) {\n restart_write:\n+        if (status_t status = validateReadData(mDataPos + sizeof(val)); status != OK) {\n+            return status;\n+        }\n+\n         memcpy(mData + mDataPos, &val, sizeof(val));\n         return finishWrite(sizeof(val));\n     }",
    "llm_generated_patch": "--- a/libs/binder/Parcel.cpp\n+++ b/libs/binder/Parcel.cpp\n@@ -1202,8 +1202,12 @@\n status_t Parcel::writeAligned(T val) {\n     static_assert(PAD_SIZE_UNSAFE(sizeof(T)) == sizeof(T));\n \n-    if ((mDataPos+sizeof(val)) <= mDataCapacity) {\n-restart_write:\n+    if ((mDataPos+sizeof(val)) <= mDataCapacity) { // L1205\n+restart_write: // L1206\n+        if (status_t status = validateReadData(mDataPos + sizeof(val)); status != OK) {\n+            return status;\n+        }\n+\n         *reinterpret_cast<T*>(mData+mDataPos) = val;\n         return finishWrite(sizeof(val));\n     }",
    "metrics": {
      "relative_line_count_similarity": 0.6667,
      "normalized_edit_similarity": 0.5745,
      "token_level_edit_distance": 61,
      "codebert_score": {
        "precision": 0.872,
        "recall": 0.9242,
        "f1": 0.8974,
        "f3": 0.9187
      },
      "token_count_upstream": 44,
      "token_count_downstream": 57,
      "token_count_total": 101,
      "cosine_similarity_openai": 0.9309
    }
  },
  {
    "cve_id": "ASB-A-289375038",
    "downstream_version": "13",
    "file_name": "android/app/src/com/android/bluetooth/btservice/AdapterService.java",
    "runtime_seconds": 57.91,
    "rej_file_diff": "--- android/app/src/com/android/bluetooth/btservice/AdapterService.java\n+++ android/app/src/com/android/bluetooth/btservice/AdapterService.java\n@@ -27,6 +27,7 @@ import static android.bluetooth.BluetoothAdapter.SCAN_MODE_CONNECTABLE;\n import static android.bluetooth.BluetoothAdapter.SCAN_MODE_CONNECTABLE_DISCOVERABLE;\n import static android.bluetooth.BluetoothAdapter.SCAN_MODE_NONE;\n import static android.bluetooth.BluetoothDevice.BATTERY_LEVEL_UNKNOWN;\n+import static android.bluetooth.BluetoothDevice.BOND_NONE;\n import static android.bluetooth.BluetoothDevice.TRANSPORT_AUTO;\n import static android.bluetooth.IBluetoothLeAudio.LE_AUDIO_GROUP_ID_INVALID;\n import static android.text.format.DateUtils.MINUTE_IN_MILLIS;\n@@ -6121,6 +6122,13 @@ public class AdapterService extends Service {\n             mCsipSetCoordinatorService.handleBondStateChanged(device, fromState, toState);\n         }\n         mDatabaseManager.handleBondStateChanged(device, fromState, toState);\n+\n+        if (toState == BOND_NONE) {\n+            // Remove the permissions for unbonded devices\n+            setMessageAccessPermission(device, BluetoothDevice.ACCESS_UNKNOWN);\n+            setPhonebookAccessPermission(device, BluetoothDevice.ACCESS_UNKNOWN);\n+            setSimAccessPermission(device, BluetoothDevice.ACCESS_UNKNOWN);\n+        }\n     }\n \n     static int convertScanModeToHal(int mode) {",
    "llm_generated_patch": "--- a/android/app/src/com/android/bluetooth/btservice/AdapterService.java\n+++ b/android/app/src/com/android/bluetooth/btservice/AdapterService.java\n@@ -14,6 +14,7 @@\n package com.android.bluetooth.btservice;\n \n import static android.bluetooth.BluetoothDevice.TRANSPORT_AUTO;\n+import static android.bluetooth.BluetoothDevice.BOND_NONE;\n import static android.text.format.DateUtils.MINUTE_IN_MILLIS;\n import static android.text.format.DateUtils.SECOND_IN_MILLIS;\n \n@@ -4304,7 +4305,14 @@\n             if (mService.mCsipSetCoordinatorService != null) {\n                 mService.mCsipSetCoordinatorService.handleBondStateChanged(device, fromState, toState);\n             }\n             mService.mDatabaseManager.handleBondStateChanged(device, fromState, toState);\n+\n+            if (toState == BluetoothDevice.BOND_NONE) {\n+                // Remove the permissions for unbonded devices\n+                mService.setMessageAccessPermission(device, BluetoothDevice.ACCESS_UNKNOWN);\n+                mService.setPhonebookAccessPermission(device, BluetoothDevice.ACCESS_UNKNOWN);\n+                mService.setSimAccessPermission(device, BluetoothDevice.ACCESS_UNKNOWN);\n+            }\n         }\n \n         void onSdpSearchComplete(",
    "metrics": {
      "relative_line_count_similarity": 0.9565,
      "normalized_edit_similarity": 0.6622,
      "token_level_edit_distance": 67,
      "codebert_score": {
        "precision": 0.9098,
        "recall": 0.8823,
        "f1": 0.8958,
        "f3": 0.885
      },
      "token_count_upstream": 81,
      "token_count_downstream": 67,
      "token_count_total": 148,
      "cosine_similarity_openai": 0.9205
    }
  },
  {
    "cve_id": "ASB-A-289375038",
    "downstream_version": "14",
    "file_name": "android/app/src/com/android/bluetooth/btservice/AdapterService.java",
    "runtime_seconds": 111.35,
    "rej_file_diff": "--- android/app/src/com/android/bluetooth/btservice/AdapterService.java\n+++ android/app/src/com/android/bluetooth/btservice/AdapterService.java\n@@ -27,6 +27,7 @@ import static android.bluetooth.BluetoothAdapter.SCAN_MODE_CONNECTABLE;\n import static android.bluetooth.BluetoothAdapter.SCAN_MODE_CONNECTABLE_DISCOVERABLE;\n import static android.bluetooth.BluetoothAdapter.SCAN_MODE_NONE;\n import static android.bluetooth.BluetoothDevice.BATTERY_LEVEL_UNKNOWN;\n+import static android.bluetooth.BluetoothDevice.BOND_NONE;\n import static android.bluetooth.BluetoothDevice.TRANSPORT_AUTO;\n import static android.bluetooth.IBluetoothLeAudio.LE_AUDIO_GROUP_ID_INVALID;\n import static android.text.format.DateUtils.MINUTE_IN_MILLIS;\n@@ -6121,6 +6122,13 @@ public class AdapterService extends Service {\n             mCsipSetCoordinatorService.handleBondStateChanged(device, fromState, toState);\n         }\n         mDatabaseManager.handleBondStateChanged(device, fromState, toState);\n+\n+        if (toState == BOND_NONE) {\n+            // Remove the permissions for unbonded devices\n+            setMessageAccessPermission(device, BluetoothDevice.ACCESS_UNKNOWN);\n+            setPhonebookAccessPermission(device, BluetoothDevice.ACCESS_UNKNOWN);\n+            setSimAccessPermission(device, BluetoothDevice.ACCESS_UNKNOWN);\n+        }\n     }\n \n     static int convertScanModeToHal(int mode) {",
    "llm_generated_patch": "--- a/android/app/src/com/android/bluetooth/btservice/AdapterService.java\n+++ b/android/app/src/com/android/bluetooth/btservice/AdapterService.java\n@@ -11,8 +11,9 @@\n import static android.bluetooth.IBluetoothOobDataCallback;\n import static android.bluetooth.IBluetoothSocketManager;\n import static android.bluetooth.IncomingRfcommSocketInfo;\n+import static android.bluetooth.BluetoothDevice.BOND_NONE;\n import static android.bluetooth.BluetoothDevice.TRANSPORT_AUTO;\n import static android.text.format.DateUtils.MINUTE_IN_MILLIS;\n import static android.text.format.DateUtils.SECOND_IN_MILLIS;\n-\n import static com.android.bluetooth.Utils.callerIsSystemOrActiveOrManagedUser;\n import static com.android.bluetooth.Utils.callerIsSystemOrActiveUser;\n import static com.android.bluetooth.Utils.enforceBluetoothPrivilegedPermission;\n@@ -2133,15 +2134,16 @@\n                 toState));\n         mDatabaseManager.handleBondStateChanged(device, fromState, toState);\n \n-        if (toState == BluetoothDevice.BOND_NONE) {\n+        if (toState == BOND_NONE) {\n             mBondAttemptCallerInfo.remove(device.getAddress());\n             mRemoteDevices.setBondingInitiatedLocally(Utils.getByteAddress(device), false);\n             mRemoteDevices.updateUuids(device);\n-            removePhonebookAccessPermission(device);\n-            removeMessageAccessPermission(device);\n-            removeSimAccessPermission(device);\n+            // Remove the permissions for unbonded devices\n+            setPhonebookAccessPermission(device, BluetoothDevice.ACCESS_UNKNOWN);\n+            setMessageAccessPermission(device, BluetoothDevice.ACCESS_UNKNOWN);\n+            setSimAccessPermission(device, BluetoothDevice.ACCESS_UNKNOWN);\n         } else if (toState == BluetoothDevice.BOND_BONDED) {\n             // If a device is already bonded, then don't change the connection policy.\n             // For example, if a device isManuallyConnected, don't remark it as auto connect.\n             if (mPhonePolicy != null && (fromState != BluetoothDevice.BOND_BONDED)) {\n                 mPhonePolicy.bondHandle(device);",
    "metrics": {
      "relative_line_count_similarity": 0.5217,
      "normalized_edit_similarity": 0.476,
      "token_level_edit_distance": 230,
      "codebert_score": {
        "precision": 0.8394,
        "recall": 0.8686,
        "f1": 0.8537,
        "f3": 0.8656
      },
      "token_count_upstream": 81,
      "token_count_downstream": 129,
      "token_count_total": 210,
      "cosine_similarity_openai": 0.9143
    }
  },
  {
    "cve_id": "ASB-A-369351375",
    "downstream_version": "12L",
    "file_name": "services/core/java/com/android/server/accounts/AccountManagerService.java",
    "runtime_seconds": 106.05,
    "rej_file_diff": "--- services/core/java/com/android/server/accounts/AccountManagerService.java\n+++ services/core/java/com/android/server/accounts/AccountManagerService.java\n@@ -5085,14 +5087,15 @@ public class AccountManagerService\n             Bundle simulateBundle = p.readBundle();\n             p.recycle();\n             Intent intent = bundle.getParcelable(AccountManager.KEY_INTENT, Intent.class);\n-            if (intent != null && intent.getClass() != Intent.class) {\n-                return false;\n-            }\n             Intent simulateIntent = simulateBundle.getParcelable(AccountManager.KEY_INTENT,\n                     Intent.class);\n             if (intent == null) {\n                 return (simulateIntent == null);\n             }\n+            if (intent.getClass() != Intent.class || simulateIntent.getClass() != Intent.class) {\n+                return false;\n+            }\n+\n             if (!intent.filterEquals(simulateIntent)) {\n                 return false;\n             }",
    "llm_generated_patch": "--- a/services/core/java/com/android/server/accounts/AccountManagerService.java\n+++ b/services/core/java/com/android/server/accounts/AccountManagerService.java\n@@ -5086,8 +5086,8 @@\n-            Intent intent = bundle.getParcelable(AccountManager.KEY_INTENT);\n-            if (intent != null && intent.getClass() != Intent.class) {\n-                return false;\n-            }\n-            Intent simulateIntent = simulateBundle.getParcelable(AccountManager.KEY_INTENT);\n+            Intent intent = bundle.getParcelable(AccountManager.KEY_INTENT, Intent.class);\n+            Intent simulateIntent = simulateBundle.getParcelable(AccountManager.KEY_INTENT, Intent.class);\n             if (intent == null) {\n                 return (simulateIntent == null);\n             }\n+            if (intent.getClass() != Intent.class || simulateIntent.getClass() != Intent.class) {\n+                return false;\n+            }",
    "metrics": {
      "relative_line_count_similarity": 0.7619,
      "normalized_edit_similarity": 0.5698,
      "token_level_edit_distance": 60,
      "codebert_score": {
        "precision": 0.9367,
        "recall": 0.9153,
        "f1": 0.9259,
        "f3": 0.9174
      },
      "token_count_upstream": 73,
      "token_count_downstream": 70,
      "token_count_total": 143,
      "cosine_similarity_openai": 0.9537
    }
  },
  {
    "cve_id": "ASB-A-369351375",
    "downstream_version": "12",
    "file_name": "services/core/java/com/android/server/accounts/AccountManagerService.java",
    "runtime_seconds": 122.61,
    "rej_file_diff": "--- services/core/java/com/android/server/accounts/AccountManagerService.java\n+++ services/core/java/com/android/server/accounts/AccountManagerService.java\n@@ -5085,14 +5087,15 @@ public class AccountManagerService\n             Bundle simulateBundle = p.readBundle();\n             p.recycle();\n             Intent intent = bundle.getParcelable(AccountManager.KEY_INTENT, Intent.class);\n-            if (intent != null && intent.getClass() != Intent.class) {\n-                return false;\n-            }\n             Intent simulateIntent = simulateBundle.getParcelable(AccountManager.KEY_INTENT,\n                     Intent.class);\n             if (intent == null) {\n                 return (simulateIntent == null);\n             }\n+            if (intent.getClass() != Intent.class || simulateIntent.getClass() != Intent.class) {\n+                return false;\n+            }\n+\n             if (!intent.filterEquals(simulateIntent)) {\n                 return false;\n             }",
    "llm_generated_patch": "--- a/services/core/java/com/android/server/accounts/AccountManagerService.java\n+++ b/services/core/java/com/android/server/accounts/AccountManagerService.java\n@@ -5086,13 +5086,13 @@\n             Bundle simulateBundle = p.readBundle();\n             p.recycle();\n             Intent intent = bundle.getParcelable(AccountManager.KEY_INTENT);\n-            if (intent != null && intent.getClass() != Intent.class) {\n-                return false;\n-            }\n             Intent simulateIntent = simulateBundle.getParcelable(AccountManager.KEY_INTENT);\n             if (intent == null) {\n                 return (simulateIntent == null);\n             }\n+            if (intent.getClass() != Intent.class || simulateIntent.getClass() != Intent.class) {\n+                return false;\n+            }\n             if (!intent.filterEquals(simulateIntent)) {\n                 return false;\n             }",
    "metrics": {
      "relative_line_count_similarity": 0.9048,
      "normalized_edit_similarity": 0.8883,
      "token_level_edit_distance": 17,
      "codebert_score": {
        "precision": 0.9625,
        "recall": 0.9587,
        "f1": 0.9606,
        "f3": 0.9591
      },
      "token_count_upstream": 73,
      "token_count_downstream": 67,
      "token_count_total": 140,
      "cosine_similarity_openai": 0.9913
    }
  },
  {
    "cve_id": "ASB-A-360846772",
    "downstream_version": "12L",
    "file_name": "services/core/java/com/android/server/accounts/AccountManagerService.java",
    "runtime_seconds": 154.57,
    "rej_file_diff": "--- services/core/java/com/android/server/accounts/AccountManagerService.java\n+++ services/core/java/com/android/server/accounts/AccountManagerService.java\n@@ -5085,14 +5087,15 @@ public class AccountManagerService\n             Bundle simulateBundle = p.readBundle();\n             p.recycle();\n             Intent intent = bundle.getParcelable(AccountManager.KEY_INTENT, Intent.class);\n-            if (intent != null && intent.getClass() != Intent.class) {\n-                return false;\n-            }\n             Intent simulateIntent = simulateBundle.getParcelable(AccountManager.KEY_INTENT,\n                     Intent.class);\n             if (intent == null) {\n                 return (simulateIntent == null);\n             }\n+            if (intent.getClass() != Intent.class || simulateIntent.getClass() != Intent.class) {\n+                return false;\n+            }\n+\n             if (!intent.filterEquals(simulateIntent)) {\n                 return false;\n             }",
    "llm_generated_patch": "--- a/services/core/java/com/android/server/accounts/AccountManagerService.java\n+++ b/services/core/java/com/android/server/accounts/AccountManagerService.java\n@@ -5086,17 +5086,18 @@\n             p.setDataPosition(0);\n             Bundle simulateBundle = p.readBundle();\n             p.recycle();\n-            Intent intent = bundle.getParcelable(AccountManager.KEY_INTENT);\n+            Intent intent = bundle.getParcelable(AccountManager.KEY_INTENT, Intent.class);\n             if (intent != null && intent.getClass() != Intent.class) {\n                 return false;\n             }\n-            Intent simulateIntent = simulateBundle.getParcelable(AccountManager.KEY_INTENT);\n+            Intent simulateIntent = simulateBundle.getParcelable(AccountManager.KEY_INTENT, Intent.class);\n             if (intent == null) {\n                 return (simulateIntent == null);\n             }\n+            if (intent.getClass() != Intent.class || simulateIntent.getClass() != Intent.class) {\n+                return false;\n+            }\n             if (!intent.filterEquals(simulateIntent)) {\n                 return false;\n             }\n \n             if (intent.getSelector() != simulateIntent.getSelector()) {",
    "metrics": {
      "relative_line_count_similarity": 0.9048,
      "normalized_edit_similarity": 0.7301,
      "token_level_edit_distance": 62,
      "codebert_score": {
        "precision": 0.9188,
        "recall": 0.94,
        "f1": 0.9293,
        "f3": 0.9378
      },
      "token_count_upstream": 73,
      "token_count_downstream": 84,
      "token_count_total": 157,
      "cosine_similarity_openai": 0.9661
    }
  },
  {
    "cve_id": "ASB-A-360846772",
    "downstream_version": "12",
    "file_name": "services/core/java/com/android/server/accounts/AccountManagerService.java",
    "runtime_seconds": 96.35,
    "rej_file_diff": "--- services/core/java/com/android/server/accounts/AccountManagerService.java\n+++ services/core/java/com/android/server/accounts/AccountManagerService.java\n@@ -5085,14 +5087,15 @@ public class AccountManagerService\n             Bundle simulateBundle = p.readBundle();\n             p.recycle();\n             Intent intent = bundle.getParcelable(AccountManager.KEY_INTENT, Intent.class);\n-            if (intent != null && intent.getClass() != Intent.class) {\n-                return false;\n-            }\n             Intent simulateIntent = simulateBundle.getParcelable(AccountManager.KEY_INTENT,\n                     Intent.class);\n             if (intent == null) {\n                 return (simulateIntent == null);\n             }\n+            if (intent.getClass() != Intent.class || simulateIntent.getClass() != Intent.class) {\n+                return false;\n+            }\n+\n             if (!intent.filterEquals(simulateIntent)) {\n                 return false;\n             }",
    "llm_generated_patch": "--- a/services/core/java/com/android/server/accounts/AccountManagerService.java\n+++ b/services/core/java/com/android/server/accounts/AccountManagerService.java\n@@ -5086,15 +5086,17 @@\n             p.setDataPosition(0);\n             Bundle simulateBundle = p.readBundle();\n             p.recycle();\n-            Intent intent = bundle.getParcelable(AccountManager.KEY_INTENT);\n-            if (intent != null && intent.getClass() != Intent.class) {\n-                return false;\n-            }\n-            Intent simulateIntent = simulateBundle.getParcelable(AccountManager.KEY_INTENT);\n+            Intent intent = bundle.getParcelable(AccountManager.KEY_INTENT, Intent.class);\n+            Intent simulateIntent = simulateBundle.getParcelable(AccountManager.KEY_INTENT,\n+                    Intent.class);\n             if (intent == null) {\n                 return (simulateIntent == null);\n             }\n+            // If an attacker provides an Intent subclass, that may lead to problems.\n+            // Since this method is part of the public API, we must keep this check.\n+            if (intent.getClass() != Intent.class\n+                    || (simulateIntent != null && simulateIntent.getClass() != Intent.class)) {\n+                return false;\n+            }\n+\n             if (!intent.filterEquals(simulateIntent)) {\n                 return false;\n             }",
    "metrics": {
      "relative_line_count_similarity": 0.7143,
      "normalized_edit_similarity": 0.6381,
      "token_level_edit_distance": 94,
      "codebert_score": {
        "precision": 0.8906,
        "recall": 0.9371,
        "f1": 0.9132,
        "f3": 0.9323
      },
      "token_count_upstream": 73,
      "token_count_downstream": 119,
      "token_count_total": 192,
      "cosine_similarity_openai": 0.9479
    }
  },
  {
    "cve_id": "ASB-A-289811388",
    "downstream_version": "13",
    "file_name": "android/app/src/com/android/bluetooth/btservice/AdapterService.java",
    "runtime_seconds": 180.54,
    "rej_file_diff": "--- android/app/src/com/android/bluetooth/btservice/AdapterService.java\n+++ android/app/src/com/android/bluetooth/btservice/AdapterService.java\n@@ -27,6 +27,7 @@ import static android.bluetooth.BluetoothAdapter.SCAN_MODE_CONNECTABLE;\n import static android.bluetooth.BluetoothAdapter.SCAN_MODE_CONNECTABLE_DISCOVERABLE;\n import static android.bluetooth.BluetoothAdapter.SCAN_MODE_NONE;\n import static android.bluetooth.BluetoothDevice.BATTERY_LEVEL_UNKNOWN;\n+import static android.bluetooth.BluetoothDevice.BOND_NONE;\n import static android.bluetooth.BluetoothDevice.TRANSPORT_AUTO;\n import static android.bluetooth.IBluetoothLeAudio.LE_AUDIO_GROUP_ID_INVALID;\n import static android.text.format.DateUtils.MINUTE_IN_MILLIS;\n@@ -6121,6 +6122,13 @@ public class AdapterService extends Service {\n             mCsipSetCoordinatorService.handleBondStateChanged(device, fromState, toState);\n         }\n         mDatabaseManager.handleBondStateChanged(device, fromState, toState);\n+\n+        if (toState == BOND_NONE) {\n+            // Remove the permissions for unbonded devices\n+            setMessageAccessPermission(device, BluetoothDevice.ACCESS_UNKNOWN);\n+            setPhonebookAccessPermission(device, BluetoothDevice.ACCESS_UNKNOWN);\n+            setSimAccessPermission(device, BluetoothDevice.ACCESS_UNKNOWN);\n+        }\n     }\n \n     static int convertScanModeToHal(int mode) {",
    "llm_generated_patch": "--- a/android/app/src/com/android/bluetooth/btservice/AdapterService.java\n+++ b/android/app/src/com/android/bluetooth/btservice/AdapterService.java\n@@ -14,6 +14,7 @@\n import static android.bluetooth.BluetoothDevice.TRANSPORT_AUTO;\n import static android.text.format.DateUtils.MINUTE_IN_MILLIS;\n import static android.text.format.DateUtils.SECOND_IN_MILLIS;\n+import static android.bluetooth.BluetoothDevice.BOND_NONE;\n \n import static com.android.bluetooth.Utils.callerIsSystemOrActiveOrManagedUser;\n import static com.android.bluetooth.Utils.callerIsSystemOrActiveUser;\n@@ -2303,3 +2304,18 @@\n     public boolean isMock() {\n         return false;\n     }\n+}\n+\n+/*\n+ * Handles actions related to bond state changes.\n+ * This method includes logic from a patch where the original context was missing.\n+ * It should be called by components like BondStateMachine or JniCallbacks\n+ * when a bond state transition occurs.\n+ */\n+void handleBondStateChange(BluetoothDevice device, int fromState, int toState) {\n+    if (toState == BOND_NONE) {\n+        // Remove the permissions for unbonded devices\n+        setMessageAccessPermission(device, BluetoothDevice.ACCESS_UNKNOWN);\n+        setPhonebookAccessPermission(device, BluetoothDevice.ACCESS_UNKNOWN);\n+        setSimAccessPermission(device, BluetoothDevice.ACCESS_UNKNOWN);\n+    }\n+}",
    "metrics": {
      "relative_line_count_similarity": 0.7391,
      "normalized_edit_similarity": 0.5476,
      "token_level_edit_distance": 199,
      "codebert_score": {
        "precision": 0.8532,
        "recall": 0.8714,
        "f1": 0.8622,
        "f3": 0.8696
      },
      "token_count_upstream": 81,
      "token_count_downstream": 120,
      "token_count_total": 201,
      "cosine_similarity_openai": 0.8524
    }
  },
  {
    "cve_id": "ASB-A-289811388",
    "downstream_version": "14",
    "file_name": "android/app/src/com/android/bluetooth/btservice/AdapterService.java",
    "runtime_seconds": 61.64,
    "rej_file_diff": "--- android/app/src/com/android/bluetooth/btservice/AdapterService.java\n+++ android/app/src/com/android/bluetooth/btservice/AdapterService.java\n@@ -27,6 +27,7 @@ import static android.bluetooth.BluetoothAdapter.SCAN_MODE_CONNECTABLE;\n import static android.bluetooth.BluetoothAdapter.SCAN_MODE_CONNECTABLE_DISCOVERABLE;\n import static android.bluetooth.BluetoothAdapter.SCAN_MODE_NONE;\n import static android.bluetooth.BluetoothDevice.BATTERY_LEVEL_UNKNOWN;\n+import static android.bluetooth.BluetoothDevice.BOND_NONE;\n import static android.bluetooth.BluetoothDevice.TRANSPORT_AUTO;\n import static android.bluetooth.IBluetoothLeAudio.LE_AUDIO_GROUP_ID_INVALID;\n import static android.text.format.DateUtils.MINUTE_IN_MILLIS;\n@@ -6121,6 +6122,13 @@ public class AdapterService extends Service {\n             mCsipSetCoordinatorService.handleBondStateChanged(device, fromState, toState);\n         }\n         mDatabaseManager.handleBondStateChanged(device, fromState, toState);\n+\n+        if (toState == BOND_NONE) {\n+            // Remove the permissions for unbonded devices\n+            setMessageAccessPermission(device, BluetoothDevice.ACCESS_UNKNOWN);\n+            setPhonebookAccessPermission(device, BluetoothDevice.ACCESS_UNKNOWN);\n+            setSimAccessPermission(device, BluetoothDevice.ACCESS_UNKNOWN);\n+        }\n     }\n \n     static int convertScanModeToHal(int mode) {",
    "llm_generated_patch": "--- a/android/app/src/com/android/bluetooth/btservice/AdapterService.java\n+++ b/android/app/src/com/android/bluetooth/btservice/AdapterService.java\n@@ -15,6 +15,7 @@\n \n import static android.bluetooth.BluetoothDevice.TRANSPORT_AUTO;\n+import static android.bluetooth.BluetoothDevice.BOND_NONE;\n import static android.text.format.DateUtils.MINUTE_IN_MILLIS;\n import static android.text.format.DateUtils.SECOND_IN_MILLIS;\n \n@@ -2199,6 +2200,13 @@\n         if (mCsipSetCoordinatorService != null) {\n             mCsipSetCoordinatorService.handleBondStateChanged(device, oldState, newState);\n         }\n         mDatabaseManager.handleBondStateChanged(device, oldState, newState);\n+\n+        if (newState == BOND_NONE) {\n+            // Remove the permissions for unbonded devices\n+            setMessageAccessPermission(device, BluetoothDevice.ACCESS_UNKNOWN);\n+            setPhonebookAccessPermission(device, BluetoothDevice.ACCESS_UNKNOWN);\n+            setSimAccessPermission(device, BluetoothDevice.ACCESS_UNKNOWN);\n+        }\n     }\n \n     static int convertScanModeToHal(int mode) {",
    "metrics": {
      "relative_line_count_similarity": 0.913,
      "normalized_edit_similarity": 0.7162,
      "token_level_edit_distance": 94,
      "codebert_score": {
        "precision": 0.9049,
        "recall": 0.8743,
        "f1": 0.8894,
        "f3": 0.8773
      },
      "token_count_upstream": 81,
      "token_count_downstream": 68,
      "token_count_total": 149,
      "cosine_similarity_openai": 0.9753
    }
  },
  {
    "cve_id": "ASB-A-375623125",
    "downstream_version": "13",
    "file_name": "services/core/java/com/android/server/appop/AppOpsService.java",
    "runtime_seconds": 167.54,
    "rej_file_diff": "--- services/core/java/com/android/server/appop/AppOpsService.java\n+++ services/core/java/com/android/server/appop/AppOpsService.java\n@@ -3086,10 +3086,10 @@ public class AppOpsService extends IAppOpsService.Stub {\n     public int checkPackage(int uid, String packageName) {\n         Objects.requireNonNull(packageName);\n         try {\n-            verifyAndGetBypass(uid, packageName, null, null, true);\n+            verifyAndGetBypass(uid, packageName, null, Process.INVALID_UID, null, true);\n             // When the caller is the system, it's possible that the packageName is the special\n             // one (e.g., \"root\") which isn't actually existed.\n-            if (resolveUid(packageName) == uid\n+            if (resolveNonAppUid(packageName) == uid\n                     || (isPackageExisted(packageName)\n                             && !filterAppAccessUnlocked(packageName, UserHandle.getUserId(uid)))) {\n                 return AppOpsManager.MODE_ALLOWED;\n@@ -3896,7 +3896,7 @@ public class AppOpsService extends IAppOpsService.Stub {\n             // Test if the proxied operation will succeed before starting the proxy operation\n             final SyncNotedAppOp testProxiedOp = startOperationDryRun(code,\n                     proxiedUid, resolvedProxiedPackageName, proxiedAttributionTag,\n-                    proxiedVirtualDeviceId, resolvedProxyPackageName, proxiedFlags,\n+                    proxiedVirtualDeviceId, proxyUid, resolvedProxyPackageName, proxiedFlags,\n                     startIfModeDefault);\n \n             if (!shouldStartForMode(testProxiedOp.getOpMode(), startIfModeDefault)) {\n@@ -3936,7 +3936,7 @@ public class AppOpsService extends IAppOpsService.Stub {\n             int attributionChainId) {\n         PackageVerificationResult pvr;\n         try {\n-            pvr = verifyAndGetBypass(uid, packageName, attributionTag, proxyPackageName);\n+            pvr = verifyAndGetBypass(uid, packageName, attributionTag, proxyUid, proxyPackageName);\n             if (!pvr.isAttributionTagValid) {\n                 attributionTag = null;\n             }\n@@ -4063,11 +4063,11 @@ public class AppOpsService extends IAppOpsService.Stub {\n      */\n     private SyncNotedAppOp startOperationDryRun(int code, int uid,\n             @NonNull String packageName, @Nullable String attributionTag, int virtualDeviceId,\n-            String proxyPackageName, @OpFlags int flags,\n+            int proxyUid, String proxyPackageName, @OpFlags int flags,\n             boolean startIfModeDefault) {\n         PackageVerificationResult pvr;\n         try {\n-            pvr = verifyAndGetBypass(uid, packageName, attributionTag, proxyPackageName);\n+            pvr = verifyAndGetBypass(uid, packageName, attributionTag, proxyUid, proxyPackageName);\n             if (!pvr.isAttributionTagValid) {\n                 attributionTag = null;\n             }\n@@ -4622,13 +4622,17 @@ public class AppOpsService extends IAppOpsService.Stub {\n     private boolean isSpecialPackage(int callingUid, @Nullable String packageName) {\n         final String resolvedPackage = AppOpsManager.resolvePackageName(callingUid, packageName);\n         return callingUid == Process.SYSTEM_UID\n-                || resolveUid(resolvedPackage) != Process.INVALID_UID;\n+                || resolveNonAppUid(resolvedPackage) != Process.INVALID_UID;\n     }\n \n     private boolean isCallerAndAttributionTrusted(@NonNull AttributionSource attributionSource) {\n         if (attributionSource.getUid() != Binder.getCallingUid()\n                 && attributionSource.isTrusted(mContext)) {\n-            return true;\n+            // if there is a next attribution source, it must be trusted, as well.\n+            if (attributionSource.getNext() == null\n+                    || attributionSource.getNext().isTrusted(mContext)) {\n+                return true;\n+            }\n         }\n         return mContext.checkPermission(android.Manifest.permission.UPDATE_APP_OPS_STATS,\n                 Binder.getCallingPid(), Binder.getCallingUid(), null)\n@@ -4723,19 +4727,20 @@ public class AppOpsService extends IAppOpsService.Stub {\n     }\n \n     /**\n-     * @see #verifyAndGetBypass(int, String, String, String, boolean)\n+     * @see #verifyAndGetBypass(int, String, String, int, String, boolean)\n      */\n     private @NonNull PackageVerificationResult verifyAndGetBypass(int uid, String packageName,\n             @Nullable String attributionTag) {\n-        return verifyAndGetBypass(uid, packageName, attributionTag, null);\n+        return verifyAndGetBypass(uid, packageName, attributionTag, Process.INVALID_UID, null);\n     }\n \n     /**\n-     * @see #verifyAndGetBypass(int, String, String, String, boolean)\n+     * @see #verifyAndGetBypass(int, String, String, int, String, boolean)\n      */\n     private @NonNull PackageVerificationResult verifyAndGetBypass(int uid, String packageName,\n-            @Nullable String attributionTag, @Nullable String proxyPackageName) {\n-        return verifyAndGetBypass(uid, packageName, attributionTag, proxyPackageName, false);\n+            @Nullable String attributionTag, int proxyUid, @Nullable String proxyPackageName) {\n+        return verifyAndGetBypass(uid, packageName, attributionTag, proxyUid, proxyPackageName,\n+                false);\n     }\n \n     /**\n@@ -4746,14 +4751,15 @@ public class AppOpsService extends IAppOpsService.Stub {\n      * @param uid The uid the package belongs to\n      * @param packageName The package the might belong to the uid\n      * @param attributionTag attribution tag or {@code null} if no need to verify\n-     * @param proxyPackageName The proxy package, from which the attribution tag is to be pulled\n+     * @param proxyUid The proxy uid, from which the attribution tag is to be pulled\n+     * @param proxyPackageName The proxy package, from which the attribution tag may be pulled\n      * @param suppressErrorLogs Whether to print to logcat about nonmatching parameters\n      *\n      * @return PackageVerificationResult containing {@link RestrictionBypass} and whether the\n      *         attribution tag is valid\n      */\n     private @NonNull PackageVerificationResult verifyAndGetBypass(int uid, String packageName,\n-            @Nullable String attributionTag, @Nullable String proxyPackageName,\n+            @Nullable String attributionTag, int proxyUid, @Nullable String proxyPackageName,\n             boolean suppressErrorLogs) {\n         if (uid == Process.ROOT_UID) {\n             // For backwards compatibility, don't check package name for root UID.\n@@ -4797,34 +4803,47 @@ public class AppOpsService extends IAppOpsService.Stub {\n \n         int callingUid = Binder.getCallingUid();\n \n-        // Allow any attribution tag for resolvable uids\n-        int pkgUid;\n+        // Allow any attribution tag for resolvable, non-app uids\n+        int nonAppUid;\n         if (Objects.equals(packageName, \"com.android.shell\")) {\n             // Special case for the shell which is a package but should be able\n             // to bypass app attribution tag restrictions.\n-            pkgUid = Process.SHELL_UID;\n+            nonAppUid = Process.SHELL_UID;\n         } else {\n-            pkgUid = resolveUid(packageName);\n+            nonAppUid = resolveNonAppUid(packageName);\n         }\n-        if (pkgUid != Process.INVALID_UID) {\n-            if (pkgUid != UserHandle.getAppId(uid)) {\n+        if (nonAppUid != Process.INVALID_UID) {\n+            if (nonAppUid != UserHandle.getAppId(uid)) {\n                 if (!suppressErrorLogs) {\n                     Slog.e(TAG, \"Bad call made by uid \" + callingUid + \". \"\n-                            + \"Package \\\"\" + packageName + \"\\\" does not belong to uid \" + uid\n-                            + \".\");\n+                                + \"Package \\\"\" + packageName + \"\\\" does not belong to uid \" + uid\n+                                + \".\");\n+                }\n+                String otherUidMessage =\n+                            DEBUG ? \" but it is really \" + nonAppUid : \" but it is not\";\n+                throw new SecurityException(\"Specified package \\\"\" + packageName\n+                            + \"\\\" under uid \" +  UserHandle.getAppId(uid) + otherUidMessage);\n+            }\n+            // We only allow bypassing the attribution tag verification if the proxy is a\n+            // system app (or is null), in order to prevent abusive apps clogging the appops\n+            // system with unlimited attribution tags via proxy calls.\n+            boolean proxyIsSystemAppOrNull = true;\n+            if (proxyPackageName != null) {\n+                int proxyAppId = UserHandle.getAppId(proxyUid);\n+                if (proxyAppId >= Process.FIRST_APPLICATION_UID) {\n+                    proxyIsSystemAppOrNull =\n+                            mPackageManagerInternal.isSystemPackage(proxyPackageName);\n                 }\n-                String otherUidMessage = DEBUG ? \" but it is really \" + pkgUid : \" but it is not\";\n-                throw new SecurityException(\"Specified package \\\"\" + packageName + \"\\\" under uid \"\n-                        +  UserHandle.getAppId(uid) + otherUidMessage);\n             }\n             return new PackageVerificationResult(RestrictionBypass.UNRESTRICTED,\n-                    /* isAttributionTagValid */ true);\n+                    /* isAttributionTagValid */ proxyIsSystemAppOrNull);\n         }\n \n         int userId = UserHandle.getUserId(uid);\n         RestrictionBypass bypass = null;\n         boolean isAttributionTagValid = false;\n \n+        int pkgUid = nonAppUid;\n         final long ident = Binder.clearCallingIdentity();\n         try {\n             PackageManagerInternal pmInt = LocalServices.getService(PackageManagerInternal.class);",
    "llm_generated_patch": "--- a/services/core/java/com/android/server/appop/AppOpsService.java\n+++ b/services/core/java/com/android/server/appop/AppOpsService.java\n@@ -1613,11 +1613,11 @@\n     public int checkPackage(int uid, String packageName) {\n         Objects.requireNonNull(packageName);\n         try {\n-            verifyAndGetBypass(uid, packageName, null);\n+            verifyAndGetBypass(uid, packageName, null, Process.INVALID_UID, null, true);\n             // When the caller is the system, it's possible that the packageName is the special\n             // one (e.g., \"root\") which isn't actually existed.\n-            if (resolveUid(packageName) == uid\n-                    || (isPackageExisted(packageName) && !filterAppAccessUnlocked(packageName))) {\n+            if (resolveNonAppUid(packageName) == uid\n+                    || (isPackageExisted(packageName) && !filterAppAccessUnlocked(packageName, UserHandle.getUserId(uid)))) {\n                 return AppOpsManager.MODE_ALLOWED;\n             }\n             return AppOpsManager.MODE_ERRORED;\n@@ -1629,10 +1629,10 @@\n      * This method will check with PackageManager to determine if the package provided should\n      * be visible to the {@link Binder#getCallingUid()}.\n      *\n-     * NOTE: This must not be called while synchronized on {@code this} to avoid dead locks\n+     * NOTE: This must not be called while synchronized on {@code this} to avoid dead locks.\n      */\n-    private boolean filterAppAccessUnlocked(String packageName) {\n+    private boolean filterAppAccessUnlocked(String packageName, @UserIdInt int userId) {\n         final int callingUid = Binder.getCallingUid();\n         return LocalServices.getService(PackageManagerInternal.class)\n-                .filterAppAccess(packageName, callingUid, UserHandle.getUserId(callingUid));\n+                .filterAppAccess(packageName, callingUid, userId);\n     }\n \n     @Override\n@@ -1986,18 +1986,27 @@\n     private @NonNull PackageVerificationResult verifyAndGetBypass(int uid, String packageName,\n             @Nullable String attributionTag) {\n         return verifyAndGetBypass(uid, packageName, attributionTag, null);\n-    }\n-\n-    /**\n-     * @see #verifyAndGetBypass(int, String, String, String, boolean)\n-     */\n-    private @NonNull PackageVerificationResult verifyAndGetBypass(int uid, String packageName,\n-            @Nullable String attributionTag, @Nullable String proxyPackageName) {\n-        return verifyAndGetBypass(uid, packageName, attributionTag, proxyPackageName, false);\n     }\n \n     /**\n-     * Verify that package belongs to uid and return the {@link RestrictionBypass bypass\n+     * @see #verifyAndGetBypass(int, String, String, int, String, boolean)\n+     */\n+    private @NonNull PackageVerificationResult verifyAndGetBypass(int uid, String packageName,\n+            @Nullable String attributionTag, @Nullable String proxyPackageName) {\n+        return verifyAndGetBypass(uid, packageName, attributionTag, Process.INVALID_UID, proxyPackageName, false);\n+    }\n+\n+    /**\n+     * @see #verifyAndGetBypass(int, String, String, int, String, boolean)\n+     */\n+    private @NonNull PackageVerificationResult verifyAndGetBypass(int uid, String packageName,\n+            @Nullable String attributionTag, int proxyUid, @Nullable String proxyPackageName) {\n+        return verifyAndGetBypass(uid, packageName, attributionTag, proxyUid, proxyPackageName,\n+                false);\n+    }\n+\n+    /**\n+     * Verify that package belongs to uid and return the {@link RestrictionBypass bypass\n      * description} for the package, along with a boolean indicating whether the attribution tag is\n      * valid.\n      *\n@@ -2005,13 +2014,14 @@\n      * @param uid The uid the package belongs to\n      * @param packageName The package the might belong to the uid\n      * @param attributionTag attribution tag or {@code null} if no need to verify\n-     * @param proxyPackageName The proxy package, from which the attribution tag is to be pulled\n+     * @param proxyUid The proxy uid, from which the attribution tag is to be pulled\n+     * @param proxyPackageName The proxy package, from which the attribution tag may be pulled\n      * @param suppressErrorLogs Whether to print to logcat about nonmatching parameters\n      *\n      * @return PackageVerificationResult containing {@link RestrictionBypass} and whether the\n      *         attribution tag is valid\n      */\n-    private @NonNull PackageVerificationResult verifyAndGetBypass(int uid, String packageName,\n-            @Nullable String attributionTag, @Nullable String proxyPackageName,\n+    private @NonNull PackageVerificationResult verifyAndGetBypass(int uid, String packageName,\n+            @Nullable String attributionTag, int proxyUid, @Nullable String proxyPackageName,\n             boolean suppressErrorLogs) {\n         if (uid == Process.ROOT_UID) {\n             // For backwards compatibility, don't check package name for root UID.\n@@ -2052,34 +2062,47 @@\n \n         int callingUid = Binder.getCallingUid();\n \n-        // Allow any attribution tag for resolvable uids\n-        int pkgUid;\n+        // Allow any attribution tag for resolvable, non-app uids\n+        int nonAppUid;\n         if (Objects.equals(packageName, \"com.android.shell\")) {\n             // Special case for the shell which is a package but should be able\n             // to bypass app attribution tag restrictions.\n-            pkgUid = Process.SHELL_UID;\n+            nonAppUid = Process.SHELL_UID;\n         } else {\n-            pkgUid = resolveUid(packageName);\n+            nonAppUid = resolveNonAppUid(packageName);\n         }\n-        if (pkgUid != Process.INVALID_UID) {\n-            if (pkgUid != UserHandle.getAppId(uid)) {\n-                Slog.e(TAG, \"Bad call made by uid \" + callingUid + \". \"\n-                        + \"Package \\\"\" + packageName + \"\\\" does not belong to uid \" + uid + \".\");\n-                String otherUidMessage = DEBUG ? \" but it is really \" + pkgUid : \" but it is not\";\n-                throw new SecurityException(\"Specified package \\\"\" + packageName + \"\\\" under uid \"\n-                        +  UserHandle.getAppId(uid) + otherUidMessage);\n+        if (nonAppUid != Process.INVALID_UID) {\n+            if (nonAppUid != UserHandle.getAppId(uid)) {\n+                if (!suppressErrorLogs) {\n+                    Slog.e(TAG, \"Bad call made by uid \" + callingUid + \". \"\n+                                + \"Package \\\"\" + packageName + \"\\\" does not belong to uid \" + uid\n+                                + \".\");\n+                }\n+                String otherUidMessage =\n+                            DEBUG ? \" but it is really \" + nonAppUid : \" but it is not\";\n+                throw new SecurityException(\"Specified package \\\"\" + packageName\n+                            + \"\\\" under uid \" +  UserHandle.getAppId(uid) + otherUidMessage);\n+            }\n+            // We only allow bypassing the attribution tag verification if the proxy is a\n+            // system app (or is null), in order to prevent abusive apps clogging the appops\n+            // system with unlimited attribution tags via proxy calls.\n+            boolean proxyIsSystemAppOrNull = true;\n+            if (proxyPackageName != null) {\n+                int proxyAppId = UserHandle.getAppId(proxyUid);\n+                if (proxyAppId >= Process.FIRST_APPLICATION_UID) {\n+                    proxyIsSystemAppOrNull =\n+                            getPackageManagerInternal().isSystemPackage(proxyPackageName);\n+                }\n             }\n             return new PackageVerificationResult(RestrictionBypass.UNRESTRICTED,\n-                    /* isAttributionTagValid */ true);\n+                    /* isAttributionTagValid */ proxyIsSystemAppOrNull);\n         }\n \n         int userId = UserHandle.getUserId(uid);\n         RestrictionBypass bypass = null;\n         boolean isAttributionTagValid = false;\n \n+        int pkgUid = nonAppUid;\n         final long ident = Binder.clearCallingIdentity();\n         try {\n             PackageManagerInternal pmInt = LocalServices.getService(PackageManagerInternal.class);\n@@ -2102,18 +2125,22 @@\n                     if (!mPlatformCompat.isChangeEnabledByPackageName(\n                             SECURITY_EXCEPTION_ON_INVALID_ATTRIBUTION_TAG_CHANGE, packageName,\n                             userId) || !mPlatformCompat.isChangeEnabledByUid(\n-                                    SECURITY_EXCEPTION_ON_INVALID_ATTRIBUTION_TAG_CHANGE,\n+                                    SECURITY_EXCEPTION_ON_INVALID_ATTRIBUTION_TAG_CHANGE,\n                             callingUid)) {\n                         // Do not override tags if overriding is not enabled for this package\n                         isAttributionTagValid = true;\n+                    } else if (!suppressErrorLogs) {\n+                        Slog.e(TAG, msg);\n                     }\n-                    Slog.e(TAG, msg);\n                 } catch (RemoteException neverHappens) {\n                 }\n             }\n         } finally {\n             Binder.restoreCallingIdentity(ident);\n         }\n+        if (pkgUid == Process.INVALID_UID && !suppressErrorLogs) {\n+            Slog.w(TAG, \"Package \" + packageName + \" was not found for \" + uid);\n+        }\n \n         if (pkgUid != uid) {\n             Slog.e(TAG, \"Bad call made by uid \" + callingUid + \". \"\n@@ -2162,7 +2189,11 @@\n     private boolean isCallerAndAttributionTrusted(@NonNull AttributionSource attributionSource) {\n         if (attributionSource.getUid() != Binder.getCallingUid()\n                 && attributionSource.isTrusted(mContext)) {\n-            return true;\n+            // if there is a next attribution source, it must be trusted, as well.\n+            if (attributionSource.getNext() == null\n+                    || attributionSource.getNext().isTrusted(mContext)) {\n+                return true;\n+            }\n         }\n         return mContext.checkPermission(android.Manifest.permission.UPDATE_APP_OPS_STATS,\n                 Binder.getCallingPid(), Binder.getCallingUid(), null)",
    "metrics": {
      "relative_line_count_similarity": 0.8889,
      "normalized_edit_similarity": 0.3883,
      "token_level_edit_distance": 805,
      "codebert_score": {
        "precision": 0.9066,
        "recall": 0.904,
        "f1": 0.9053,
        "f3": 0.9043
      },
      "token_count_upstream": 950,
      "token_count_downstream": 1042,
      "token_count_total": 1992,
      "cosine_similarity_openai": 0.9291
    }
  },
  {
    "cve_id": "ASB-A-375623125",
    "downstream_version": "14",
    "file_name": "services/core/java/com/android/server/appop/AppOpsService.java",
    "runtime_seconds": 128.89,
    "rej_file_diff": "--- services/core/java/com/android/server/appop/AppOpsService.java\n+++ services/core/java/com/android/server/appop/AppOpsService.java\n@@ -3896,7 +3896,7 @@ public class AppOpsService extends IAppOpsService.Stub {\n             // Test if the proxied operation will succeed before starting the proxy operation\n             final SyncNotedAppOp testProxiedOp = startOperationDryRun(code,\n                     proxiedUid, resolvedProxiedPackageName, proxiedAttributionTag,\n-                    proxiedVirtualDeviceId, resolvedProxyPackageName, proxiedFlags,\n+                    proxiedVirtualDeviceId, proxyUid, resolvedProxyPackageName, proxiedFlags,\n                     startIfModeDefault);\n \n             if (!shouldStartForMode(testProxiedOp.getOpMode(), startIfModeDefault)) {\n@@ -3936,7 +3936,7 @@ public class AppOpsService extends IAppOpsService.Stub {\n             int attributionChainId) {\n         PackageVerificationResult pvr;\n         try {\n-            pvr = verifyAndGetBypass(uid, packageName, attributionTag, proxyPackageName);\n+            pvr = verifyAndGetBypass(uid, packageName, attributionTag, proxyUid, proxyPackageName);\n             if (!pvr.isAttributionTagValid) {\n                 attributionTag = null;\n             }\n@@ -4063,11 +4063,11 @@ public class AppOpsService extends IAppOpsService.Stub {\n      */\n     private SyncNotedAppOp startOperationDryRun(int code, int uid,\n             @NonNull String packageName, @Nullable String attributionTag, int virtualDeviceId,\n-            String proxyPackageName, @OpFlags int flags,\n+            int proxyUid, String proxyPackageName, @OpFlags int flags,\n             boolean startIfModeDefault) {\n         PackageVerificationResult pvr;\n         try {\n-            pvr = verifyAndGetBypass(uid, packageName, attributionTag, proxyPackageName);\n+            pvr = verifyAndGetBypass(uid, packageName, attributionTag, proxyUid, proxyPackageName);\n             if (!pvr.isAttributionTagValid) {\n                 attributionTag = null;\n             }",
    "llm_generated_patch": "--- a/services/core/java/com/android/server/appop/AppOpsService.java\n+++ b/services/core/java/com/android/server/appop/AppOpsService.java\n@@ -1825,7 +1825,7 @@\n             boolean shouldCollectMessage) {\n         PackageVerificationResult pvr;\n         try {\n-            pvr = verifyAndGetBypass(uid, packageName, attributionTag, proxyPackageName);\n+            pvr = verifyAndGetBypass(uid, packageName, attributionTag, proxyUid, proxyPackageName);\n             boolean wasNull = attributionTag == null;\n             if (!pvr.isAttributionTagValid) {\n                 attributionTag = null;",
    "metrics": {
      "relative_line_count_similarity": 0.3333,
      "normalized_edit_similarity": 0.3138,
      "token_level_edit_distance": 29,
      "codebert_score": {
        "precision": 0.9028,
        "recall": 0.7725,
        "f1": 0.8326,
        "f3": 0.7838
      },
      "token_count_upstream": 156,
      "token_count_downstream": 42,
      "token_count_total": 198,
      "cosine_similarity_openai": 0.7951
    }
  },
  {
    "cve_id": "ASB-A-353240784",
    "downstream_version": "12",
    "file_name": "services/appwidget/java/com/android/server/appwidget/AppWidgetServiceImpl.java",
    "runtime_seconds": 129.43,
    "rej_file_diff": "--- services/appwidget/java/com/android/server/appwidget/AppWidgetServiceImpl.java\n+++ services/appwidget/java/com/android/server/appwidget/AppWidgetServiceImpl.java\n@@ -217,6 +217,15 @@ class AppWidgetServiceImpl extends IAppWidgetService.Stub implements WidgetBacku\n     // See {@link Provider#pendingDeletedWidgetIds}.\n     private static final String PENDING_DELETED_IDS_ATTR = \"pending_deleted_ids\";\n \n+    // Hard limit of number of hosts an app can create, note that the app that hosts the widgets\n+    // can have multiple instances of {@link AppWidgetHost}, typically in respect to different\n+    // surfaces in the host app.\n+    // @see AppWidgetHost\n+    // @see AppWidgetHost#mHostId\n+    private static final int MAX_NUMBER_OF_HOSTS_PER_PACKAGE = 20;\n+    // Hard limit of number of widgets can be pinned by a host.\n+    private static final int MAX_NUMBER_OF_WIDGETS_PER_HOST = 200;\n+\n     // Handles user and package related broadcasts.\n     // See {@link #registerBroadcastReceiver}\n     private final BroadcastReceiver mBroadcastReceiver = new BroadcastReceiver() {\n@@ -3591,11 +3618,32 @@ class AppWidgetServiceImpl extends IAppWidgetService.Stub implements WidgetBacku\n         if (DEBUG) {\n             Slog.i(TAG, \"addWidgetLocked() \" + widget);\n         }\n+        ensureWidgetCountBeforeAddLocked(widget);\n         mWidgets.add(widget);\n \n         onWidgetProviderAddedOrChangedLocked(widget);\n     }\n \n+    /**\n+     * Ensures that the widget count for the widget's host is not greater than the maximum\n+     * number of widgets per host. If the count is greater than the maximum, removes oldest widgets\n+     * from the host until the count is less than or equal to the maximum.\n+     */\n+    private void ensureWidgetCountBeforeAddLocked(@NonNull final Widget widget) {\n+        if (widget.host == null || widget.host.id == null) {\n+            return;\n+        }\n+        final List<Widget> widgetsInSameHost = new ArrayList<>();\n+        for (Widget w : mWidgets) {\n+            if (w.host != null && widget.host.id.equals(w.host.id)) {\n+                widgetsInSameHost.add(w);\n+            }\n+        }\n+        while (widgetsInSameHost.size() >= MAX_NUMBER_OF_WIDGETS_PER_HOST) {\n+            removeWidgetLocked(widgetsInSameHost.remove(0));\n+        }\n+    }\n+\n     /**\n      * Checks if the provider is assigned and updates the mWidgetPackages to track packages\n      * that have bound widgets.",
    "llm_generated_patch": "--- a/services/appwidget/java/com/android/server/appwidget/AppWidgetServiceImpl.java\n+++ b/services/appwidget/java/com/android/server/appwidget/AppWidgetServiceImpl.java\n@@ -213,8 +213,17 @@\n     // Every widget update request is associated which an increasing sequence number. This is\n     // used to verify which request has successfully been received by the host.\n     private static final AtomicLong UPDATE_COUNTER = new AtomicLong();\n+\n+    // Hard limit of number of hosts an app can create, note that the app that hosts the widgets\n+    // can have multiple instances of {@link AppWidgetHost}, typically in respect to different\n+    // surfaces in the host app.\n+    // @see AppWidgetHost\n+    // @see AppWidgetHost#mHostId\n+    private static final int MAX_NUMBER_OF_HOSTS_PER_PACKAGE = 20;\n+    // Hard limit of number of widgets can be pinned by a host.\n+    private static final int MAX_NUMBER_OF_WIDGETS_PER_HOST = 200;\n \n     private final BroadcastReceiver mBroadcastReceiver = new BroadcastReceiver() {\n         @Override\n         public void onReceive(Context context, Intent intent) {\n@@ -3593,7 +3602,28 @@\n     /**\n      * Adds the widget to mWidgets and tracks the package name in mWidgetPackages.\n      */\n     void addWidgetLocked(Widget widget) {\n+        ensureWidgetCountBeforeAddLocked(widget);\n         mWidgets.add(widget);\n \n         onWidgetProviderAddedOrChangedLocked(widget);\n     }\n+\n+    /**\n+     * Ensures that the widget count for the widget's host is not greater than the maximum\n+     * number of widgets per host. If the count is greater than the maximum, removes oldest widgets\n+     * from the host until the count is less than or equal to the maximum.\n+     */\n+    private void ensureWidgetCountBeforeAddLocked(@NonNull final Widget widget) {\n+        if (widget.host == null || widget.host.id == null) {\n+            return;\n+        }\n+        final List<Widget> widgetsInSameHost = new ArrayList<>();\n+        for (Widget w : mWidgets) {\n+            if (w.host != null && widget.host.id.equals(w.host.id)) {\n+                widgetsInSameHost.add(w);\n+            }\n+        }\n+        while (widgetsInSameHost.size() >= MAX_NUMBER_OF_WIDGETS_PER_HOST) {\n+            removeWidgetLocked(widgetsInSameHost.remove(0));\n+        }\n+    }\n \n     /**\n      * Checks if the provider is assigned and updates the mWidgetPackages to track packages",
    "metrics": {
      "relative_line_count_similarity": 0.9792,
      "normalized_edit_similarity": 0.7793,
      "token_level_edit_distance": 118,
      "codebert_score": {
        "precision": 0.9321,
        "recall": 0.9201,
        "f1": 0.9261,
        "f3": 0.9213
      },
      "token_count_upstream": 286,
      "token_count_downstream": 300,
      "token_count_total": 586,
      "cosine_similarity_openai": 0.9468
    }
  },
  {
    "cve_id": "ASB-A-353240784",
    "downstream_version": "12L",
    "file_name": "services/appwidget/java/com/android/server/appwidget/AppWidgetServiceImpl.java",
    "runtime_seconds": 116.25,
    "rej_file_diff": "--- services/appwidget/java/com/android/server/appwidget/AppWidgetServiceImpl.java\n+++ services/appwidget/java/com/android/server/appwidget/AppWidgetServiceImpl.java\n@@ -217,6 +217,15 @@ class AppWidgetServiceImpl extends IAppWidgetService.Stub implements WidgetBacku\n     // See {@link Provider#pendingDeletedWidgetIds}.\n     private static final String PENDING_DELETED_IDS_ATTR = \"pending_deleted_ids\";\n \n+    // Hard limit of number of hosts an app can create, note that the app that hosts the widgets\n+    // can have multiple instances of {@link AppWidgetHost}, typically in respect to different\n+    // surfaces in the host app.\n+    // @see AppWidgetHost\n+    // @see AppWidgetHost#mHostId\n+    private static final int MAX_NUMBER_OF_HOSTS_PER_PACKAGE = 20;\n+    // Hard limit of number of widgets can be pinned by a host.\n+    private static final int MAX_NUMBER_OF_WIDGETS_PER_HOST = 200;\n+\n     // Handles user and package related broadcasts.\n     // See {@link #registerBroadcastReceiver}\n     private final BroadcastReceiver mBroadcastReceiver = new BroadcastReceiver() {\n@@ -3591,11 +3618,32 @@ class AppWidgetServiceImpl extends IAppWidgetService.Stub implements WidgetBacku\n         if (DEBUG) {\n             Slog.i(TAG, \"addWidgetLocked() \" + widget);\n         }\n+        ensureWidgetCountBeforeAddLocked(widget);\n         mWidgets.add(widget);\n \n         onWidgetProviderAddedOrChangedLocked(widget);\n     }\n \n+    /**\n+     * Ensures that the widget count for the widget's host is not greater than the maximum\n+     * number of widgets per host. If the count is greater than the maximum, removes oldest widgets\n+     * from the host until the count is less than or equal to the maximum.\n+     */\n+    private void ensureWidgetCountBeforeAddLocked(@NonNull final Widget widget) {\n+        if (widget.host == null || widget.host.id == null) {\n+            return;\n+        }\n+        final List<Widget> widgetsInSameHost = new ArrayList<>();\n+        for (Widget w : mWidgets) {\n+            if (w.host != null && widget.host.id.equals(w.host.id)) {\n+                widgetsInSameHost.add(w);\n+            }\n+        }\n+        while (widgetsInSameHost.size() >= MAX_NUMBER_OF_WIDGETS_PER_HOST) {\n+            removeWidgetLocked(widgetsInSameHost.remove(0));\n+        }\n+    }\n+\n     /**\n      * Checks if the provider is assigned and updates the mWidgetPackages to track packages\n      * that have bound widgets.",
    "llm_generated_patch": "--- a/services/appwidget/java/com/android/server/appwidget/AppWidgetServiceImpl.java\n+++ b/services/appwidget/java/com/android/server/appwidget/AppWidgetServiceImpl.java\n@@ -159,6 +159,15 @@\n     // used to verify which request has successfully been received by the host.\n     private static final AtomicLong UPDATE_COUNTER = new AtomicLong();\n \n+    // Hard limit of number of hosts an app can create, note that the app that hosts the widgets\n+    // can have multiple instances of {@link AppWidgetHost}, typically in respect to different\n+    // surfaces in the host app.\n+    // @see AppWidgetHost\n+    // @see AppWidgetHost#mHostId\n+    private static final int MAX_NUMBER_OF_HOSTS_PER_PACKAGE = 20;\n+    // Hard limit of number of widgets can be pinned by a host.\n+    private static final int MAX_NUMBER_OF_WIDGETS_PER_HOST = 200;\n+\n     private final BroadcastReceiver mBroadcastReceiver = new BroadcastReceiver() {\n         @Override\n         public void onReceive(Context context, Intent intent) {\n@@ -1767,5 +1776,25 @@\n     void addWidgetLocked(Widget widget) {\n+        ensureWidgetCountBeforeAddLocked(widget);\n         mWidgets.add(widget);\n \n         onWidgetProviderAddedOrChangedLocked(widget);\n     }\n+\n+    /**\n+     * Ensures that the widget count for the widget's host is not greater than the maximum\n+     * number of widgets per host. If the count is greater than the maximum, removes oldest widgets\n+     * from the host until the count is less than or equal to the maximum.\n+     */\n+    private void ensureWidgetCountBeforeAddLocked(@NonNull final Widget widget) {\n+        if (widget.host == null || widget.host.id == null) {\n+            return;\n+        }\n+        final List<Widget> widgetsInSameHost = new ArrayList<>();\n+        for (Widget w : mWidgets) {\n+            if (w.host != null && widget.host.id.equals(w.host.id)) {\n+                widgetsInSameHost.add(w);\n+            }\n+        }\n+        while (widgetsInSameHost.size() >= MAX_NUMBER_OF_WIDGETS_PER_HOST) {\n+            removeWidgetLocked(widgetsInSameHost.remove(0));\n+        }\n+    }",
    "metrics": {
      "relative_line_count_similarity": 0.8958,
      "normalized_edit_similarity": 0.7834,
      "token_level_edit_distance": 88,
      "codebert_score": {
        "precision": 0.9168,
        "recall": 0.8835,
        "f1": 0.8999,
        "f3": 0.8867
      },
      "token_count_upstream": 286,
      "token_count_downstream": 256,
      "token_count_total": 542,
      "cosine_similarity_openai": 0.9109
    }
  },
  {
    "cve_id": "ASB-A-353240784",
    "downstream_version": "13",
    "file_name": "services/appwidget/java/com/android/server/appwidget/AppWidgetServiceImpl.java",
    "runtime_seconds": null,
    "rej_file_diff": "--- services/appwidget/java/com/android/server/appwidget/AppWidgetServiceImpl.java\n+++ services/appwidget/java/com/android/server/appwidget/AppWidgetServiceImpl.java\n@@ -217,6 +217,15 @@ class AppWidgetServiceImpl extends IAppWidgetService.Stub implements WidgetBacku\n     // See {@link Provider#pendingDeletedWidgetIds}.\n     private static final String PENDING_DELETED_IDS_ATTR = \"pending_deleted_ids\";\n \n+    // Hard limit of number of hosts an app can create, note that the app that hosts the widgets\n+    // can have multiple instances of {@link AppWidgetHost}, typically in respect to different\n+    // surfaces in the host app.\n+    // @see AppWidgetHost\n+    // @see AppWidgetHost#mHostId\n+    private static final int MAX_NUMBER_OF_HOSTS_PER_PACKAGE = 20;\n+    // Hard limit of number of widgets can be pinned by a host.\n+    private static final int MAX_NUMBER_OF_WIDGETS_PER_HOST = 200;\n+\n     // Handles user and package related broadcasts.\n     // See {@link #registerBroadcastReceiver}\n     private final BroadcastReceiver mBroadcastReceiver = new BroadcastReceiver() {\n@@ -3591,11 +3618,32 @@ class AppWidgetServiceImpl extends IAppWidgetService.Stub implements WidgetBacku\n         if (DEBUG) {\n             Slog.i(TAG, \"addWidgetLocked() \" + widget);\n         }\n+        ensureWidgetCountBeforeAddLocked(widget);\n         mWidgets.add(widget);\n \n         onWidgetProviderAddedOrChangedLocked(widget);\n     }\n \n+    /**\n+     * Ensures that the widget count for the widget's host is not greater than the maximum\n+     * number of widgets per host. If the count is greater than the maximum, removes oldest widgets\n+     * from the host until the count is less than or equal to the maximum.\n+     */\n+    private void ensureWidgetCountBeforeAddLocked(@NonNull final Widget widget) {\n+        if (widget.host == null || widget.host.id == null) {\n+            return;\n+        }\n+        final List<Widget> widgetsInSameHost = new ArrayList<>();\n+        for (Widget w : mWidgets) {\n+            if (w.host != null && widget.host.id.equals(w.host.id)) {\n+                widgetsInSameHost.add(w);\n+            }\n+        }\n+        while (widgetsInSameHost.size() >= MAX_NUMBER_OF_WIDGETS_PER_HOST) {\n+            removeWidgetLocked(widgetsInSameHost.remove(0));\n+        }\n+    }\n+\n     /**\n      * Checks if the provider is assigned and updates the mWidgetPackages to track packages\n      * that have bound widgets.",
    "llm_generated_patch": "",
    "metrics": {
      "relative_line_count_similarity": 0.0,
      "normalized_edit_similarity": 0.0,
      "token_level_edit_distance": 434,
      "codebert_score": {
        "error": "Candidate code and ground truth code must not be empty."
      },
      "token_count_upstream": 286,
      "token_count_downstream": 0,
      "token_count_total": 286,
      "cosine_similarity_openai": 0.0407
    }
  },
  {
    "cve_id": "ASB-A-353240784",
    "downstream_version": "14",
    "file_name": "services/appwidget/java/com/android/server/appwidget/AppWidgetServiceImpl.java",
    "runtime_seconds": 259.7,
    "rej_file_diff": "--- services/appwidget/java/com/android/server/appwidget/AppWidgetServiceImpl.java\n+++ services/appwidget/java/com/android/server/appwidget/AppWidgetServiceImpl.java\n@@ -217,6 +217,15 @@ class AppWidgetServiceImpl extends IAppWidgetService.Stub implements WidgetBacku\n     // See {@link Provider#pendingDeletedWidgetIds}.\n     private static final String PENDING_DELETED_IDS_ATTR = \"pending_deleted_ids\";\n \n+    // Hard limit of number of hosts an app can create, note that the app that hosts the widgets\n+    // can have multiple instances of {@link AppWidgetHost}, typically in respect to different\n+    // surfaces in the host app.\n+    // @see AppWidgetHost\n+    // @see AppWidgetHost#mHostId\n+    private static final int MAX_NUMBER_OF_HOSTS_PER_PACKAGE = 20;\n+    // Hard limit of number of widgets can be pinned by a host.\n+    private static final int MAX_NUMBER_OF_WIDGETS_PER_HOST = 200;\n+\n     // Handles user and package related broadcasts.\n     // See {@link #registerBroadcastReceiver}\n     private final BroadcastReceiver mBroadcastReceiver = new BroadcastReceiver() {\n@@ -3591,11 +3618,32 @@ class AppWidgetServiceImpl extends IAppWidgetService.Stub implements WidgetBacku\n         if (DEBUG) {\n             Slog.i(TAG, \"addWidgetLocked() \" + widget);\n         }\n+        ensureWidgetCountBeforeAddLocked(widget);\n         mWidgets.add(widget);\n \n         onWidgetProviderAddedOrChangedLocked(widget);\n     }\n \n+    /**\n+     * Ensures that the widget count for the widget's host is not greater than the maximum\n+     * number of widgets per host. If the count is greater than the maximum, removes oldest widgets\n+     * from the host until the count is less than or equal to the maximum.\n+     */\n+    private void ensureWidgetCountBeforeAddLocked(@NonNull final Widget widget) {\n+        if (widget.host == null || widget.host.id == null) {\n+            return;\n+        }\n+        final List<Widget> widgetsInSameHost = new ArrayList<>();\n+        for (Widget w : mWidgets) {\n+            if (w.host != null && widget.host.id.equals(w.host.id)) {\n+                widgetsInSameHost.add(w);\n+            }\n+        }\n+        while (widgetsInSameHost.size() >= MAX_NUMBER_OF_WIDGETS_PER_HOST) {\n+            removeWidgetLocked(widgetsInSameHost.remove(0));\n+        }\n+    }\n+\n     /**\n      * Checks if the provider is assigned and updates the mWidgetPackages to track packages\n      * that have bound widgets.",
    "llm_generated_patch": "--- a/services/appwidget/java/com/android/server/appwidget/AppWidgetServiceImpl.java\n+++ b/services/appwidget/java/com/android/server/appwidget/AppWidgetServiceImpl.java\n@@ -151,9 +151,18 @@\n     // used to verify which request has successfully been received by the host.\n     private static final AtomicLong UPDATE_COUNTER = new AtomicLong();\n \n+    // Hard limit of number of hosts an app can create, note that the app that hosts the widgets\n+    // can have multiple instances of {@link AppWidgetHost}, typically in respect to different\n+    // surfaces in the host app.\n+    // @see AppWidgetHost\n+    // @see AppWidgetHost#mHostId\n+    private static final int MAX_NUMBER_OF_HOSTS_PER_PACKAGE = 20;\n+    // Hard limit of number of widgets can be pinned by a host.\n+    private static final int MAX_NUMBER_OF_WIDGETS_PER_HOST = 200;\n+\n     private final BroadcastReceiver mBroadcastReceiver = new BroadcastReceiver() {\n         @Override\n         public void onReceive(Context context, Intent intent) {\n@@ -1799,9 +1808,29 @@\n      * Adds the widget to mWidgets and tracks the package name in mWidgetPackages.\n      */\n     void addWidgetLocked(Widget widget) {\n+        ensureWidgetCountBeforeAddLocked(widget);\n         mWidgets.add(widget);\n \n         onWidgetProviderAddedOrChangedLocked(widget);\n     }\n \n+    /**\n+     * Ensures that the widget count for the widget's host is not greater than the maximum\n+     * number of widgets per host. If the count is greater than the maximum, removes oldest widgets\n+     * from the host until the count is less than or equal to the maximum.\n+     */\n+    private void ensureWidgetCountBeforeAddLocked(@NonNull final Widget widget) {\n+        if (widget.host == null || widget.host.id == null) {\n+            return;\n+        }\n+        final List<Widget> widgetsInSameHost = new ArrayList<>();\n+        for (Widget w : mWidgets) {\n+            if (w.host != null && widget.host.id.equals(w.host.id)) {\n+                widgetsInSameHost.add(w);\n+            }\n+        }\n+        while (widgetsInSameHost.size() >= MAX_NUMBER_OF_WIDGETS_PER_HOST) {\n+            removeWidgetLocked(widgetsInSameHost.remove(0));\n+        }\n+    }\n+\n     /**\n      * Checks if the provider is assigned and updates the mWidgetPackages to track packages\n      * that have bound widgets.",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 0.8249,
      "token_level_edit_distance": 85,
      "codebert_score": {
        "precision": 0.9212,
        "recall": 0.9031,
        "f1": 0.912,
        "f3": 0.9049
      },
      "token_count_upstream": 286,
      "token_count_downstream": 290,
      "token_count_total": 576,
      "cosine_similarity_openai": 0.9602
    }
  },
  {
    "cve_id": "ASB-A-382064697",
    "downstream_version": "14",
    "file_name": "services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java",
    "runtime_seconds": 160.62,
    "rej_file_diff": "--- services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java\n+++ services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java\n@@ -2723,16 +2723,16 @@ public class DevicePolicyManagerService extends IDevicePolicyManager.Stub {\n         }\n     }\n \n-    /**\n-     * Apply default restrictions that haven't been applied to a given admin yet.\n-     */\n+    /** Apply default restrictions that haven't been applied to a given admin yet. */\n     private void maybeSetDefaultRestrictionsForAdminLocked(int userId, ActiveAdmin admin) {\n-        Set<String> defaultRestrictions =\n-                UserRestrictionsUtils.getDefaultEnabledForManagedProfiles();\n-        if (defaultRestrictions.equals(admin.defaultEnabledRestrictionsAlreadySet)) {\n+        Set<String> newDefaultRestrictions = new HashSet(\n+            UserRestrictionsUtils.getDefaultEnabledForManagedProfiles());\n+        newDefaultRestrictions.removeAll(admin.defaultEnabledRestrictionsAlreadySet);\n+        if (newDefaultRestrictions.isEmpty()) {\n             return; // The same set of default restrictions has been already applied.\n         }\n-        for (String restriction : defaultRestrictions) {\n+\n+        for (String restriction : newDefaultRestrictions) {\n             mDevicePolicyEngine.setLocalPolicy(\n                     PolicyDefinition.getPolicyDefinitionForUserRestriction(restriction),\n                     EnforcingAdmin.createEnterpriseEnforcingAdmin(\n@@ -2740,10 +2740,9 @@ public class DevicePolicyManagerService extends IDevicePolicyManager.Stub {\n                             admin.getUserHandle().getIdentifier()),\n                     new BooleanPolicyValue(true),\n                     userId);\n+            admin.defaultEnabledRestrictionsAlreadySet.add(restriction);\n+            Slogf.i(LOG_TAG, \"Enabled the following restriction by default: \" + restriction);\n         }\n-        admin.defaultEnabledRestrictionsAlreadySet.addAll(defaultRestrictions);\n-        Slogf.i(LOG_TAG, \"Enabled the following restrictions by default: \"\n-                + defaultRestrictions);\n     }\n \n     private void maybeStartSecurityLogMonitorOnActivityManagerReady() {",
    "llm_generated_patch": "--- a/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java\n+++ b/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java\n@@ -2731,20 +2731,23 @@ public class DevicePolicyManagerService extends IDevicePolicyManager.Stub {\n             return; // The same set of default restrictions has been already applied.\n         }\n         if (isPolicyEngineForFinanceFlagEnabled()) {\n-            for (String restriction : defaultRestrictions) {\n+            // Calculate the restrictions that are in defaultRestrictions but not yet set.\n+            Set<String> newDefaultRestrictions = new HashSet<>(defaultRestrictions);\n+            newDefaultRestrictions.removeAll(admin.defaultEnabledRestrictionsAlreadySet);\n+\n+            // The check at the beginning of the method ensures that if we reach here,\n+            // defaultRestrictions is not equal to admin.defaultEnabledRestrictionsAlreadySet,\n+            // which implies newDefaultRestrictions is not empty.\n+\n+            for (String restriction : newDefaultRestrictions) {\n                 mDevicePolicyEngine.setLocalPolicy(\n                         PolicyDefinition.getPolicyDefinitionForUserRestriction(restriction),\n                         EnforcingAdmin.createEnterpriseEnforcingAdmin(\n                                 admin.info.getComponent(),\n                                 admin.getUserHandle().getIdentifier()),\n                         new BooleanPolicyValue(true),\n                         userId);\n-            }\n-            admin.defaultEnabledRestrictionsAlreadySet.addAll(defaultRestrictions);\n-            Slogf.i(LOG_TAG, \"Enabled the following restrictions by default: \" +\n-                    defaultRestrictions);\n+                admin.defaultEnabledRestrictionsAlreadySet.add(restriction);\n+                Slogf.i(LOG_TAG, \"Enabled the following restriction by default: \" + restriction);\n+            }\n             return;\n         }",
    "metrics": {
      "relative_line_count_similarity": 0.8649,
      "normalized_edit_similarity": 0.5175,
      "token_level_edit_distance": 233,
      "codebert_score": {
        "precision": 0.8895,
        "recall": 0.8765,
        "f1": 0.883,
        "f3": 0.8778
      },
      "token_count_upstream": 158,
      "token_count_downstream": 140,
      "token_count_total": 298,
      "cosine_similarity_openai": 0.8605
    }
  },
  {
    "cve_id": "ASB-A-382064697",
    "downstream_version": "13",
    "file_name": "services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java",
    "runtime_seconds": 167.13,
    "rej_file_diff": "--- services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java\n+++ services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java\n@@ -2723,16 +2723,16 @@ public class DevicePolicyManagerService extends IDevicePolicyManager.Stub {\n         }\n     }\n \n-    /**\n-     * Apply default restrictions that haven't been applied to a given admin yet.\n-     */\n+    /** Apply default restrictions that haven't been applied to a given admin yet. */\n     private void maybeSetDefaultRestrictionsForAdminLocked(int userId, ActiveAdmin admin) {\n-        Set<String> defaultRestrictions =\n-                UserRestrictionsUtils.getDefaultEnabledForManagedProfiles();\n-        if (defaultRestrictions.equals(admin.defaultEnabledRestrictionsAlreadySet)) {\n+        Set<String> newDefaultRestrictions = new HashSet(\n+            UserRestrictionsUtils.getDefaultEnabledForManagedProfiles());\n+        newDefaultRestrictions.removeAll(admin.defaultEnabledRestrictionsAlreadySet);\n+        if (newDefaultRestrictions.isEmpty()) {\n             return; // The same set of default restrictions has been already applied.\n         }\n-        for (String restriction : defaultRestrictions) {\n+\n+        for (String restriction : newDefaultRestrictions) {\n             mDevicePolicyEngine.setLocalPolicy(\n                     PolicyDefinition.getPolicyDefinitionForUserRestriction(restriction),\n                     EnforcingAdmin.createEnterpriseEnforcingAdmin(\n@@ -2740,10 +2740,9 @@ public class DevicePolicyManagerService extends IDevicePolicyManager.Stub {\n                             admin.getUserHandle().getIdentifier()),\n                     new BooleanPolicyValue(true),\n                     userId);\n+            admin.defaultEnabledRestrictionsAlreadySet.add(restriction);\n+            Slogf.i(LOG_TAG, \"Enabled the following restriction by default: \" + restriction);\n         }\n-        admin.defaultEnabledRestrictionsAlreadySet.addAll(defaultRestrictions);\n-        Slogf.i(LOG_TAG, \"Enabled the following restrictions by default: \"\n-                + defaultRestrictions);\n     }\n \n     private void maybeStartSecurityLogMonitorOnActivityManagerReady() {",
    "llm_generated_patch": "--- a/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java\n+++ b/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java\n@@ -2727,31 +2727,29 @@ public class DevicePolicyManagerService extends BaseIDevicePolicyManager {\n      */\n     private void maybeSetDefaultRestrictionsForAdminLocked(\n             int userId, ActiveAdmin admin, Set<String> defaultRestrictions) {\n-        if (defaultRestrictions.equals(admin.defaultEnabledRestrictionsAlreadySet)) {\n-            return; // The same set of default restrictions has been already applied.\n-        }\n-        Slogf.i(LOG_TAG, \"New user restrictions need to be set by default for user \" + userId);\n-\n-        if (VERBOSE_LOG) {\n-            Slogf.d(LOG_TAG, \"Default enabled restrictions: \"\n-                    + defaultRestrictions\n-                    + \". Restrictions already enabled: \"\n-                    + admin.defaultEnabledRestrictionsAlreadySet);\n-        }\n-\n         final Set<String> restrictionsToSet = new ArraySet<>(defaultRestrictions);\n         restrictionsToSet.removeAll(admin.defaultEnabledRestrictionsAlreadySet);\n-        if (!restrictionsToSet.isEmpty()) {\n-            for (final String restriction : restrictionsToSet) {\n-                admin.ensureUserRestrictions().putBoolean(restriction, true);\n-            }\n-            admin.defaultEnabledRestrictionsAlreadySet.addAll(restrictionsToSet);\n-            Slogf.i(LOG_TAG, \"Enabled the following restrictions by default: \" + restrictionsToSet);\n-            saveUserRestrictionsLocked(userId);\n+\n+        if (restrictionsToSet.isEmpty()) {\n+            return;\n         }\n+        Slogf.i(LOG_TAG, \"New user restrictions need to be set by default for user \" + userId);\n+\n+        if (VERBOSE_LOG) {\n+            Slogf.d(LOG_TAG, \"Default enabled restrictions: \" + defaultRestrictions\n+                    + \". Restrictions already enabled: \" + admin.defaultEnabledRestrictionsAlreadySet\n+                    + \". Restrictions to set: \" + restrictionsToSet);\n+        }\n+\n+        //\n+\n+        for (final String restriction : restrictionsToSet) {\n+            admin.ensureUserRestrictions().putBoolean(restriction, true);\n+            admin.defaultEnabledRestrictionsAlreadySet.add(restriction);\n+            Slogf.i(LOG_TAG, \"Enabled the following restriction by default: \" + restriction);\n+        }\n+        saveUserRestrictionsLocked(userId);\n     }",
    "metrics": {
      "relative_line_count_similarity": 0.7027,
      "normalized_edit_similarity": 0.3486,
      "token_level_edit_distance": 254,
      "codebert_score": {
        "precision": 0.8608,
        "recall": 0.8464,
        "f1": 0.8536,
        "f3": 0.8478
      },
      "token_count_upstream": 158,
      "token_count_downstream": 216,
      "token_count_total": 374,
      "cosine_similarity_openai": 0.9221
    }
  }
]