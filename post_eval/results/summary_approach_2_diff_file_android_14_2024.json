[
  {
    "cve_id": "ASB-A-242996380",
    "downstream_version": "14",
    "file_name": "service/src/com/android/server/bluetooth/BtPermissionUtils.java",
    "runtime_seconds": null,
    "rej_file_diff": "",
    "llm_generated_patch": "",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 1.0,
      "token_level_edit_distance": 0,
      "codebert_score": {
        "error": "Candidate code and ground truth code must not be empty."
      },
      "token_count_upstream": 0,
      "token_count_downstream": 0,
      "token_count_total": 0,
      "cosine_similarity_openai": 1.0
    }
  },
  {
    "cve_id": "ASB-A-316891059",
    "downstream_version": "14",
    "file_name": "src/com/android/settings/search/SearchResultTrampoline.java",
    "runtime_seconds": 103.21,
    "rej_file_diff": "--- src/com/android/settings/search/SearchResultTrampoline.java\n+++ src/com/android/settings/search/SearchResultTrampoline.java\n@@ -52,11 +51,11 @@ public class SearchResultTrampoline extends Activity {\n     protected void onCreate(Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n \n-        final ComponentName callingActivity = getCallingActivity();\n+        final String callerPackage = getLaunchedFromPackage();\n         // First make sure caller has privilege to launch a search result page.\n         FeatureFactory.getFeatureFactory()\n                 .getSearchFeatureProvider()\n-                .verifyLaunchSearchResultPageCaller(this, callingActivity);\n+                .verifyLaunchSearchResultPageCaller(this, callerPackage);\n         // Didn't crash, proceed and launch the result as a subsetting.\n         Intent intent = getIntent();\n         final String highlightMenuKey = intent.getStringExtra(\n@@ -138,9 +137,9 @@ public class SearchResultTrampoline extends Activity {\n         finish();\n     }\n \n-    private boolean isSettingsIntelligence(ComponentName callingActivity) {\n-        return callingActivity != null && TextUtils.equals(\n-                callingActivity.getPackageName(),\n+    private boolean isSettingsIntelligence(String callerPackage) {\n+        return TextUtils.equals(\n+                callerPackage,\n                 FeatureFactory.getFeatureFactory().getSearchFeatureProvider()\n                         .getSettingsIntelligencePkgName(this));\n     }",
    "llm_generated_patch": "--- a/src/com/android/settings/search/SearchResultTrampoline.java\n+++ b/src/com/android/settings/search/SearchResultTrampoline.java\n@@ -35,11 +35,11 @@\n     protected void onCreate(Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n \n-        final ComponentName callingActivity = getCallingActivity();\n+        final String callerPackage = getLaunchedFromPackage();\n         // First make sure caller has privilege to launch a search result page.\n         FeatureFactory.getFactory(this)\n                 .getSearchFeatureProvider()\n-                .verifyLaunchSearchResultPageCaller(this, callingActivity);\n+                .verifyLaunchSearchResultPageCaller(this, callerPackage);\n         // Didn't crash, proceed and launch the result as a subsetting.\n         Intent intent = getIntent();\n         final String highlightMenuKey = intent.getStringExtra(\n@@ -104,10 +104,10 @@\n         finish();\n     }\n \n-    private boolean isSettingsIntelligence(ComponentName callingActivity) {\n-        return callingActivity != null && TextUtils.equals(\n-                callingActivity.getPackageName(),\n+    private boolean isSettingsIntelligence(String callerPackage) {\n+        return TextUtils.equals(\n+                callerPackage,\n                 FeatureFactory.getFactory(this).getSearchFeatureProvider()\n                         .getSettingsIntelligencePkgName(this));\n     }\n }",
    "metrics": {
      "relative_line_count_similarity": 0.963,
      "normalized_edit_similarity": 0.88,
      "token_level_edit_distance": 33,
      "codebert_score": {
        "precision": 0.9636,
        "recall": 0.9534,
        "f1": 0.9585,
        "f3": 0.9544
      },
      "token_count_upstream": 114,
      "token_count_downstream": 103,
      "token_count_total": 217,
      "cosine_similarity_openai": 0.9895
    }
  },
  {
    "cve_id": "ASB-A-333364513",
    "downstream_version": "14",
    "file_name": "src/com/android/settings/search/SearchResultTrampoline.java",
    "runtime_seconds": 87.31,
    "rej_file_diff": "--- src/com/android/settings/search/SearchResultTrampoline.java\n+++ src/com/android/settings/search/SearchResultTrampoline.java\n@@ -52,11 +51,11 @@ public class SearchResultTrampoline extends Activity {\n     protected void onCreate(Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n \n-        final ComponentName callingActivity = getCallingActivity();\n+        final String callerPackage = getLaunchedFromPackage();\n         // First make sure caller has privilege to launch a search result page.\n         FeatureFactory.getFeatureFactory()\n                 .getSearchFeatureProvider()\n-                .verifyLaunchSearchResultPageCaller(this, callingActivity);\n+                .verifyLaunchSearchResultPageCaller(this, callerPackage);\n         // Didn't crash, proceed and launch the result as a subsetting.\n         Intent intent = getIntent();\n         final String highlightMenuKey = intent.getStringExtra(\n@@ -138,9 +137,9 @@ public class SearchResultTrampoline extends Activity {\n         finish();\n     }\n \n-    private boolean isSettingsIntelligence(ComponentName callingActivity) {\n-        return callingActivity != null && TextUtils.equals(\n-                callingActivity.getPackageName(),\n+    private boolean isSettingsIntelligence(String callerPackage) {\n+        return TextUtils.equals(\n+                callerPackage,\n                 FeatureFactory.getFeatureFactory().getSearchFeatureProvider()\n                         .getSettingsIntelligencePkgName(this));\n     }",
    "llm_generated_patch": "--- a/src/com/android/settings/search/SearchResultTrampoline.java\n+++ b/src/com/android/settings/search/SearchResultTrampoline.java\n@@ -53,11 +53,11 @@\n     protected void onCreate(Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n \n-        final ComponentName callingActivity = getCallingActivity();\n+        final String callerPackage = getLaunchedFromPackage();\n         // First make sure caller has privilege to launch a search result page.\n         FeatureFactory.getFactory(this)\n                 .getSearchFeatureProvider()\n-                .verifyLaunchSearchResultPageCaller(this, callingActivity);\n+                .verifyLaunchSearchResultPageCaller(this, callerPackage);\n         // Didn't crash, proceed and launch the result as a subsetting.\n         Intent intent = getIntent();\n         final String highlightMenuKey = intent.getStringExtra(\n@@ -118,11 +118,10 @@\n         finish();\n     }\n \n-    private boolean isSettingsIntelligence(ComponentName callingActivity) {\n-        return callingActivity != null && TextUtils.equals(\n-                callingActivity.getPackageName(),\n+    private boolean isSettingsIntelligence(String callerPackage) {\n+        return TextUtils.equals(\n+                callerPackage,\n                 FeatureFactory.getFactory(this).getSearchFeatureProvider()\n                         .getSettingsIntelligencePkgName(this));\n     }\n }",
    "metrics": {
      "relative_line_count_similarity": 0.963,
      "normalized_edit_similarity": 0.88,
      "token_level_edit_distance": 33,
      "codebert_score": {
        "precision": 0.9638,
        "recall": 0.954,
        "f1": 0.9588,
        "f3": 0.9549
      },
      "token_count_upstream": 114,
      "token_count_downstream": 103,
      "token_count_total": 217,
      "cosine_similarity_openai": 0.9885
    }
  },
  {
    "cve_id": "ASB-A-314333719",
    "downstream_version": "14",
    "file_name": "packages/SystemUI/src/com/android/systemui/media/dagger/MediaModule.java",
    "runtime_seconds": 108.52,
    "rej_file_diff": "--- packages/SystemUI/src/com/android/systemui/media/dagger/MediaModule.java\n+++ packages/SystemUI/src/com/android/systemui/media/dagger/MediaModule.java\n@@ -20,6 +20,7 @@ import com.android.systemui.dagger.SysUISingleton;\n import com.android.systemui.log.LogBuffer;\n import com.android.systemui.log.LogBufferFactory;\n import com.android.systemui.media.controls.domain.pipeline.MediaDataManager;\n+import com.android.systemui.media.controls.ui.controller.MediaCarouselController;\n import com.android.systemui.media.controls.ui.controller.MediaHierarchyManager;\n import com.android.systemui.media.controls.ui.controller.MediaHostStatesManager;\n import com.android.systemui.media.controls.ui.view.MediaHost;\n@@ -98,8 +103,9 @@ public interface MediaModule {\n     @Named(COMMUNAL_HUB)\n     static MediaHost providesCommunalMediaHost(MediaHost.MediaHostStateHolder stateHolder,\n             MediaHierarchyManager hierarchyManager, MediaDataManager dataManager,\n-            MediaHostStatesManager statesManager) {\n-        return new MediaHost(stateHolder, hierarchyManager, dataManager, statesManager);\n+            MediaHostStatesManager statesManager, MediaCarouselController carouselController) {\n+        return new MediaHost(stateHolder, hierarchyManager, dataManager, statesManager,\n+                carouselController);\n     }\n \n     /** Provides a logging buffer related to the media tap-to-transfer chip on the sender device. */",
    "llm_generated_patch": "--- a/packages/SystemUI/src/com/android/systemui/media/dagger/MediaModule.java\n+++ b/packages/SystemUI/src/com/android/systemui/media/dagger/MediaModule.java\n@@ -17,10 +17,11 @@\n import com.android.systemui.dagger.SysUISingleton;\n import com.android.systemui.log.LogBuffer;\n import com.android.systemui.log.LogBufferFactory;\n-import com.android.systemui.media.controls.pipeline.MediaDataManager;\n-import com.android.systemui.media.controls.ui.MediaHierarchyManager;\n-import com.android.systemui.media.controls.ui.MediaHost;\n-import com.android.systemui.media.controls.ui.MediaHostStatesManager;\n+import com.android.systemui.media.controls.domain.pipeline.MediaDataManager;\n+import com.android.systemui.media.controls.ui.controller.MediaCarouselController;\n+import com.android.systemui.media.controls.ui.controller.MediaHierarchyManager;\n+import com.android.systemui.media.controls.ui.controller.MediaHostStatesManager;\n+import com.android.systemui.media.controls.ui.view.MediaHost;\n import com.android.systemui.media.controls.util.MediaFlags;\n import com.android.systemui.media.dream.dagger.MediaComplicationComponent;\n import com.android.systemui.media.muteawait.MediaMuteAwaitConnectionCli;\n@@ -39,6 +40,7 @@\n     String QUICK_QS_PANEL = \"media_quick_qs_panel\";\n     String KEYGUARD = \"media_keyguard\";\n     String DREAM = \"dream\";\n+    String COMMUNAL_HUB = \"communal_hub\";\n \n     /** */\n     @Provides\n@@ -80,6 +82,19 @@\n             MediaHierarchyManager hierarchyManager, MediaDataManager dataManager,\n             MediaHostStatesManager statesManager, MediaCarouselController carouselController) {\n         return new MediaHost(stateHolder, hierarchyManager, dataManager, statesManager,\n                 carouselController);\n     }\n+\n+    /** */\n+    @Provides\n+    @SysUISingleton\n+    @Named(COMMUNAL_HUB)\n+    static MediaHost providesCommunalMediaHost(MediaHost.MediaHostStateHolder stateHolder,\n+            MediaHierarchyManager hierarchyManager, MediaDataManager dataManager,\n+            MediaHostStatesManager statesManager, MediaCarouselController carouselController) {\n+        return new MediaHost(stateHolder, hierarchyManager, dataManager, statesManager,\n+                carouselController);\n+    }\n \n     /** Provides a logging buffer related to the media tap-to-transfer chip on the sender device. */\n     @Provides",
    "metrics": {
      "relative_line_count_similarity": 0.0,
      "normalized_edit_similarity": 0.5512,
      "token_level_edit_distance": 299,
      "codebert_score": {
        "precision": 0.8734,
        "recall": 0.9131,
        "f1": 0.8928,
        "f3": 0.9089
      },
      "token_count_upstream": 84,
      "token_count_downstream": 137,
      "token_count_total": 221,
      "cosine_similarity_openai": 0.8998
    }
  },
  {
    "cve_id": "ASB-A-328068777",
    "downstream_version": "14",
    "file_name": "service/java/com/android/server/healthconnect/HealthConnectServiceImpl.java",
    "runtime_seconds": 53.25,
    "rej_file_diff": "--- service/java/com/android/server/healthconnect/HealthConnectServiceImpl.java\n+++ service/java/com/android/server/healthconnect/HealthConnectServiceImpl.java\n@@ -1031,6 +1043,10 @@ final class HealthConnectServiceImpl extends IHealthConnectService.Stub {\n                                         callerPackageName, request.getToken());\n                         tryAcquireApiCallQuota(\n                                 uid, QuotaCategory.QUOTA_CATEGORY_READ, isInForeground, logger);\n+                        if (changeLogsTokenRequest.getRecordTypes().isEmpty()) {\n+                            throw new IllegalArgumentException(\n+                                    \"Requested record types must not be empty.\");\n+                        }\n                         mDataPermissionEnforcer.enforceRecordIdsReadPermissions(\n                                 changeLogsTokenRequest.getRecordTypes(), attributionSource);\n                         long startDateAccessEpochMilli = DEFAULT_LONG;",
    "llm_generated_patch": "--- a/service/java/com/android/server/healthconnect/HealthConnectServiceImpl.java\n+++ b/service/java/com/android/server/healthconnect/HealthConnectServiceImpl.java\n@@ -870,6 +870,10 @@\n                         ChangeLogsRequestHelper.TokenRequest changeLogsTokenRequest =\n                                 ChangeLogsRequestHelper.getRequest(\n                                         attributionSource.getPackageName(), token.getToken());\n+                        if (changeLogsTokenRequest.getRecordTypes().isEmpty()) {\n+                            throw new IllegalArgumentException(\n+                                    \"Requested record types must not be empty.\");\n+                        }\n                         mDataPermissionEnforcer.enforceRecordIdsReadPermissions(\n                                 changeLogsTokenRequest.getRecordTypes(), attributionSource);\n                         boolean isInForeground = mAppOpsManagerLocal.isUidInForeground(uid);",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 0.6842,
      "token_level_edit_distance": 41,
      "codebert_score": {
        "precision": 0.8927,
        "recall": 0.8531,
        "f1": 0.8725,
        "f3": 0.8569
      },
      "token_count_upstream": 46,
      "token_count_downstream": 39,
      "token_count_total": 85,
      "cosine_similarity_openai": 0.8666
    }
  },
  {
    "cve_id": "ASB-A-309938635",
    "downstream_version": "14",
    "file_name": "ojluni/src/main/java/java/util/zip/ZipFile.java",
    "runtime_seconds": 71.56,
    "rej_file_diff": "--- ojluni/src/main/java/java/util/zip/ZipFile.java\n+++ ojluni/src/main/java/java/util/zip/ZipFile.java\n@@ -1436,7 +1436,18 @@ public class ZipFile implements ZipConstants, Closeable {\n                 initCEN(-1);\n                 byte[] buf = new byte[4];\n                 readFullyAt(buf, 0, 4, 0);\n-                this.startsWithLoc = (LOCSIG(buf) == LOCSIG);\n+                // BEGIN Android-changed: do not accept files with invalid header\n+                // this.startsWithLoc = (LOCSIG(buf) == LOCSIG);\n+                long locsig = LOCSIG(buf);\n+                this.startsWithLoc = (locsig == LOCSIG);\n+                // If a zip file starts with \"end of central directory record\" it means that such\n+                // file is empty.\n+                if (locsig != LOCSIG && locsig != ENDSIG) {\n+                    String msg = \"Entry at offset zero has invalid LFH signature \"\n+                                    + Long.toHexString(locsig);\n+                    throw new ZipException(msg);\n+                }\n+                // END Android-changed: do not accept files with invalid header\n             } catch (IOException x) {\n                 try {\n                     this.zfile.close();",
    "llm_generated_patch": "--- a/ojluni/src/main/java/java/util/zip/ZipFile.java\n+++ b/ojluni/src/main/java/java/util/zip/ZipFile.java\n@@ -259,7 +259,14 @@\n         this.name = name;\n         this.total = getTotal(jzfile);\n         this.locsig = startsWithLOC(jzfile);\n+        // BEGIN Android-changed: Reject ZIP files that do not start with LOCSIG\n+        // or ENDSIG (for empty ZIPs).\n+        // If startsWithLOC(jzfile) is false, and total > 0, it means the file\n+        // doesn't start with LOCSIG but is not a valid empty ZIP file.\n+        if (!this.locsig && this.total > 0) {\n+            throw new ZipException(\"Zip file must start with LOCSIG or ENDSIG.\");\n+        }\n+        // END Android-changed\n         // Android-added: CloseGuard support.\n         guard.open(\"close\");\n     }",
    "metrics": {
      "relative_line_count_similarity": 0.7727,
      "normalized_edit_similarity": 0.3877,
      "token_level_edit_distance": 114,
      "codebert_score": {
        "precision": 0.825,
        "recall": 0.7869,
        "f1": 0.8055,
        "f3": 0.7905
      },
      "token_count_upstream": 133,
      "token_count_downstream": 96,
      "token_count_total": 229,
      "cosine_similarity_openai": 0.8342
    }
  },
  {
    "cve_id": "ASB-A-313428840",
    "downstream_version": "14",
    "file_name": "services/companion/java/com/android/server/companion/CompanionDeviceManagerService.java",
    "runtime_seconds": 95.69,
    "rej_file_diff": "--- services/companion/java/com/android/server/companion/CompanionDeviceManagerService.java\n+++ services/companion/java/com/android/server/companion/CompanionDeviceManagerService.java\n@@ -949,13 +947,14 @@ public class CompanionDeviceManagerService extends SystemService {\n         }\n \n         @Override\n-        public void onShellCommand(FileDescriptor in, FileDescriptor out, FileDescriptor err,\n-                String[] args, ShellCallback callback, ResultReceiver resultReceiver)\n-                throws RemoteException {\n-            new CompanionDeviceShellCommand(CompanionDeviceManagerService.this, mAssociationStore,\n-                    mDevicePresenceMonitor, mTransportManager, mSystemDataTransferProcessor,\n-                    mAssociationRequestsProcessor)\n-                    .exec(this, in, out, err, args, callback, resultReceiver);\n+        public int handleShellCommand(@NonNull ParcelFileDescriptor in,\n+                @NonNull ParcelFileDescriptor out, @NonNull ParcelFileDescriptor err,\n+                @NonNull String[] args) {\n+            return new CompanionDeviceShellCommand(CompanionDeviceManagerService.this,\n+                    mAssociationStore, mDevicePresenceMonitor, mTransportManager,\n+                    mSystemDataTransferProcessor, mAssociationRequestsProcessor)\n+                    .exec(this, in.getFileDescriptor(), out.getFileDescriptor(),\n+                            err.getFileDescriptor(), args);\n         }\n \n         @Override",
    "llm_generated_patch": "--- a/services/companion/java/com/android/server/companion/CompanionDeviceManagerService.java\n+++ b/services/companion/java/com/android/server/companion/CompanionDeviceManagerService.java\n@@ -940,22 +940,23 @@\n                     < PAIR_WITHOUT_PROMPT_WINDOW_MS;\n         }\n \n-        @Override\n-        public void onShellCommand(FileDescriptor in, FileDescriptor out, FileDescriptor err,\n-                String[] args, ShellCallback callback, ResultReceiver resultReceiver)\n-                throws RemoteException {\n-            new CompanionDeviceShellCommand(CompanionDeviceManagerService.this, mAssociationStore,\n-                    mDevicePresenceMonitor, mTransportManager, mSystemDataTransferRequestStore,\n-                    mAssociationRequestsProcessor)\n-                    .exec(this, in, out, err, args, callback, resultReceiver);\n-        }\n-\n         @Override\n-        public void dump(@NonNull FileDescriptor fd, @NonNull PrintWriter out,\n-                @Nullable String[] args) {\n+        public int handleShellCommand(@NonNull ParcelFileDescriptor in,\n+                @NonNull ParcelFileDescriptor out, @NonNull ParcelFileDescriptor err,\n+                @NonNull String[] args) {\n+            return new CompanionDeviceShellCommand(CompanionDeviceManagerService.this,\n+                    mAssociationStore, mDevicePresenceMonitor, mTransportManager,\n+                    mSystemDataTransferProcessor,\n+                    mAssociationRequestsProcessor)\n+                    .exec(this, in.getFileDescriptor(), out.getFileDescriptor(),\n+                            err.getFileDescriptor(), args);\n+        }\n+\n+        @Override\n+        public void dump(@NonNull FileDescriptor fd, @NonNull PrintWriter out, @Nullable String[] args) {\n             if (!DumpUtils.checkDumpAndUsageStatsPermission(getContext(), TAG, out)) {\n                 return;\n             }\n-\n             mAssociationStore.dump(out);\n             mDevicePresenceMonitor.dump(out);\n             mCompanionAppController.dump(out);",
    "metrics": {
      "relative_line_count_similarity": 0.2727,
      "normalized_edit_similarity": 0.6323,
      "token_level_edit_distance": 104,
      "codebert_score": {
        "precision": 0.8806,
        "recall": 0.9296,
        "f1": 0.9044,
        "f3": 0.9245
      },
      "token_count_upstream": 92,
      "token_count_downstream": 135,
      "token_count_total": 227,
      "cosine_similarity_openai": 0.9321
    }
  },
  {
    "cve_id": "ASB-A-353712853",
    "downstream_version": "14",
    "file_name": "services/usb/java/com/android/server/usb/UsbDeviceManager.java",
    "runtime_seconds": 85.45,
    "rej_file_diff": "--- services/usb/java/com/android/server/usb/UsbDeviceManager.java\n+++ services/usb/java/com/android/server/usb/UsbDeviceManager.java\n@@ -80,9 +80,9 @@ import android.os.storage.StorageVolume;\n import android.provider.Settings;\n import android.service.usb.UsbDeviceManagerProto;\n import android.service.usb.UsbHandlerProto;\n+import android.text.TextUtils;\n import android.util.Pair;\n import android.util.Slog;\n-import android.text.TextUtils;\n \n import com.android.internal.R;\n import com.android.internal.annotations.GuardedBy;",
    "llm_generated_patch": "--- a/services/usb/java/com/android/server/usb/UsbDeviceManager.java\n+++ b/services/usb/java/com/android/server/usb/UsbDeviceManager.java\n@@ -67,9 +67,11 @@\n import android.provider.Settings;\n import android.service.usb.UsbDeviceManagerProto;\n import android.service.usb.UsbHandlerProto;\n+import android.text.TextUtils;\n import android.util.Pair;\n import android.util.Slog;\n \n+import com.android.internal.R;\n import com.android.internal.annotations.GuardedBy;\n import com.android.internal.logging.MetricsLogger;\n import com.android.internal.logging.nano.MetricsProto.MetricsEvent;",
    "metrics": {
      "relative_line_count_similarity": 0.9167,
      "normalized_edit_similarity": 0.7113,
      "token_level_edit_distance": 34,
      "codebert_score": {
        "precision": 0.9139,
        "recall": 0.9419,
        "f1": 0.9277,
        "f3": 0.939
      },
      "token_count_upstream": 28,
      "token_count_downstream": 28,
      "token_count_total": 56,
      "cosine_similarity_openai": 0.9473
    }
  },
  {
    "cve_id": "ASB-A-311374917",
    "downstream_version": "14",
    "file_name": "services/core/java/com/android/server/pm/InstallPackageHelper.java",
    "runtime_seconds": 29.36,
    "rej_file_diff": "--- services/core/java/com/android/server/pm/InstallPackageHelper.java\n+++ services/core/java/com/android/server/pm/InstallPackageHelper.java\n@@ -4590,7 +4590,9 @@ final class InstallPackageHelper {\n \n     private void assertPackageWithSharedUserIdIsPrivileged(AndroidPackage pkg)\n             throws PackageManagerException {\n-        if (!AndroidPackageLegacyUtils.isPrivileged(pkg) && (pkg.getSharedUserId() != null)) {\n+        if (!AndroidPackageLegacyUtils.isPrivileged(pkg)\n+                && (pkg.getSharedUserId() != null)\n+                && !pkg.isLeavingSharedUser()) {\n             SharedUserSetting sharedUserSetting = null;\n             try {\n                 synchronized (mPm.mLock) {",
    "llm_generated_patch": "--- a/services/core/java/com/android/server/pm/InstallPackageHelper.java\n+++ b/services/core/java/com/android/server/pm/InstallPackageHelper.java\n@@ -4590,7 +4590,9 @@\n     private void assertPackageWithSharedUserIdIsPrivileged(AndroidPackage pkg)\n             throws PackageManagerException {\n-        if (!AndroidPackageUtils.isPrivileged(pkg) && (pkg.getSharedUserId() != null)) {\n+        if (!AndroidPackageUtils.isPrivileged(pkg)\n+                && (pkg.getSharedUserId() != null)\n+                && !pkg.isLeavingSharedUser()) {\n             SharedUserSetting sharedUserSetting = null;\n             try {\n                 synchronized (mPm.mLock) {",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 0.92,
      "token_level_edit_distance": 10,
      "codebert_score": {
        "precision": 0.9682,
        "recall": 0.9586,
        "f1": 0.9634,
        "f3": 0.9596
      },
      "token_count_upstream": 48,
      "token_count_downstream": 44,
      "token_count_total": 92,
      "cosine_similarity_openai": 0.9913
    }
  },
  {
    "cve_id": "ASB-A-319081336",
    "downstream_version": "14",
    "file_name": "core/jni/com_android_internal_os_ZygoteCommandBuffer.cpp",
    "runtime_seconds": 149.35,
    "rej_file_diff": "--- core/jni/com_android_internal_os_ZygoteCommandBuffer.cpp\n+++ core/jni/com_android_internal_os_ZygoteCommandBuffer.cpp\n@@ -425,19 +437,12 @@ jboolean com_android_internal_os_ZygoteCommandBuffer_nativeForkRepeatedly(\n     fail_fn_z(\"Failed to retrieve session socket timeout\");\n   }\n \n-  struct ucred credentials;\n-  socklen_t cred_size = sizeof credentials;\n-  if (getsockopt(n_buffer->getFd(), SOL_SOCKET, SO_PEERCRED, &credentials, &cred_size) == -1\n-      || cred_size != sizeof credentials) {\n-    fail_fn_1(CREATE_ERROR(\"ForkRepeatedly failed to get initial credentials, %s\",\n-                           strerror(errno)));\n+  uid_t peerUid = getSocketPeerUid(session_socket, fail_fn_1);\n+  if (peerUid != static_cast<uid_t>(expected_uid)) {\n+    return JNI_FALSE;\n   }\n-\n   bool first_time = true;\n   do {\n-    if (credentials.uid != static_cast<uid_t>(expected_uid)) {\n-      return JNI_FALSE;\n-    }\n     n_buffer->readAllLines(first_time ? fail_fn_1 : fail_fn_n);\n     n_buffer->reset();\n     int pid = zygote::forkApp(env, /* no pipe FDs */ -1, -1, session_socket_fds,\n@@ -465,6 +470,7 @@ jboolean com_android_internal_os_ZygoteCommandBuffer_nativeForkRepeatedly(\n       }\n     }\n     for (;;) {\n+      bool valid_session_socket = true;\n       // Clear buffer and get count from next command.\n       n_buffer->clear();\n       // Poll isn't strictly necessary for now. But without it, disconnect is hard to detect.",
    "llm_generated_patch": "--- a/core/jni/com_android_internal_os_ZygoteCommandBuffer.cpp\n+++ b/core/jni/com_android_internal_os_ZygoteCommandBuffer.cpp\n@@ -387,19 +387,12 @@\n     fail_fn_z(\"Failed to retrieve session socket timeout\");\n   }\n \n-  struct ucred credentials;\n-  socklen_t cred_size = sizeof credentials;\n-  if (getsockopt(n_buffer->getFd(), SOL_SOCKET, SO_PEERCRED, &credentials, &cred_size) == -1\n-      || cred_size != sizeof credentials) {\n-    fail_fn_1(CREATE_ERROR(\"ForkRepeatedly failed to get initial credentials, %s\",\n-                           strerror(errno)));\n-  }\n-\n+  uid_t peerUid = getSocketPeerUid(session_socket, fail_fn_1);\n+  if (peerUid != static_cast<uid_t>(expected_uid)) {\n+    return JNI_FALSE;\n+  }\n+ \n   bool first_time = true;\n   do {\n-    if (credentials.uid != expected_uid) {\n-      return JNI_FALSE;\n-    }\n     n_buffer->readAllLines(first_time ? fail_fn_1 : fail_fn_n);\n     n_buffer->reset();\n     int pid = zygote::forkApp(env, /* no pipe FDs */ -1, -1, session_socket_fds,\n@@ -439,6 +432,7 @@\n     // Clear buffer and get count from next command.\n     n_buffer->clear();\n     for (;;) {\n+      bool valid_session_socket = true;\n       // Poll isn't strictly necessary for now. But without it, disconnect is hard to detect.\n       int poll_res = TEMP_FAILURE_RETRY(poll(fd_structs, 2, -1 /* infinite timeout */));\n       if ((fd_structs[SESSION_IDX].revents & POLLIN) != 0) {",
    "metrics": {
      "relative_line_count_similarity": 0.9375,
      "normalized_edit_similarity": 0.6871,
      "token_level_edit_distance": 88,
      "codebert_score": {
        "precision": 0.9314,
        "recall": 0.9528,
        "f1": 0.942,
        "f3": 0.9506
      },
      "token_count_upstream": 146,
      "token_count_downstream": 161,
      "token_count_total": 307,
      "cosine_similarity_openai": 0.96
    }
  },
  {
    "cve_id": "ASB-A-318374503",
    "downstream_version": "14",
    "file_name": "system/stack/btm/btm_sec.cc",
    "runtime_seconds": 72.89,
    "rej_file_diff": "--- system/stack/btm/btm_sec.cc\n+++ system/stack/btm/btm_sec.cc\n@@ -267,7 +267,6 @@ static bool access_secure_service_from_temp_bond(const tBTM_SEC_DEV_REC* p_dev_r\n                                                  bool locally_initiated,\n                                                  uint16_t security_req) {\n   return !locally_initiated && (security_req & BTM_SEC_IN_AUTHENTICATE) &&\n-         p_dev_rec->sec_rec.is_device_authenticated() &&\n          p_dev_rec->sec_rec.is_bond_type_temporary();\n }",
    "llm_generated_patch": "--- a/system/stack/btm/btm_sec.cc\n+++ b/system/stack/btm/btm_sec.cc\n@@ -275,7 +275,6 @@\n static bool access_secure_service_from_temp_bond(const tBTM_SEC_DEV_REC* p_dev_rec,\n                                                  bool locally_initiated,\n                                                  uint16_t security_req) {\n   return !locally_initiated && (security_req & BTM_SEC_IN_AUTHENTICATE) &&\n-    p_dev_rec->is_device_authenticated() &&\n     p_dev_rec->is_bond_type_temporary();\n }",
    "metrics": {
      "relative_line_count_similarity": 0.8889,
      "normalized_edit_similarity": 0.8333,
      "token_level_edit_distance": 12,
      "codebert_score": {
        "precision": 0.9695,
        "recall": 0.9695,
        "f1": 0.9695,
        "f3": 0.9695
      },
      "token_count_upstream": 30,
      "token_count_downstream": 30,
      "token_count_total": 60,
      "cosine_similarity_openai": 0.9857
    }
  },
  {
    "cve_id": "ASB-A-336323279",
    "downstream_version": "14",
    "file_name": "services/core/java/com/android/server/appop/AppOpsService.java",
    "runtime_seconds": null,
    "rej_file_diff": "--- services/core/java/com/android/server/appop/AppOpsService.java\n+++ services/core/java/com/android/server/appop/AppOpsService.java\n@@ -1563,19 +1563,29 @@ public class AppOpsService extends IAppOpsService.Stub {\n     private ArrayList<AppOpsManager.OpEntry> collectOps(Ops pkgOps, int[] ops,\n             String persistentDeviceId) {\n         ArrayList<AppOpsManager.OpEntry> resOps = null;\n+        boolean shouldReturnRestrictedAppOps = mContext.checkPermission(\n+                Manifest.permission.GET_APP_OPS_STATS,\n+                Binder.getCallingPid(), Binder.getCallingUid())\n+                == PackageManager.PERMISSION_GRANTED;\n         if (ops == null) {\n             resOps = new ArrayList<>();\n-            for (int j=0; j<pkgOps.size(); j++) {\n+            for (int j = 0; j < pkgOps.size(); j++) {\n                 Op curOp = pkgOps.valueAt(j);\n+                if (opRestrictsRead(curOp.op) && !shouldReturnRestrictedAppOps) {\n+                    continue;\n+                }\n                 resOps.add(getOpEntryForResult(curOp, persistentDeviceId));\n             }\n         } else {\n-            for (int j=0; j<ops.length; j++) {\n+            for (int j = 0; j < ops.length; j++) {\n                 Op curOp = pkgOps.get(ops[j]);\n                 if (curOp != null) {\n                     if (resOps == null) {\n                         resOps = new ArrayList<>();\n                     }\n+                    if (opRestrictsRead(curOp.op) && !shouldReturnRestrictedAppOps) {\n+                        continue;\n+                    }\n                     resOps.add(getOpEntryForResult(curOp, persistentDeviceId));\n                 }\n             }",
    "llm_generated_patch": "",
    "metrics": {
      "relative_line_count_similarity": 0.0,
      "normalized_edit_similarity": 0.0,
      "token_level_edit_distance": 322,
      "codebert_score": {
        "error": "Candidate code and ground truth code must not be empty."
      },
      "token_count_upstream": 138,
      "token_count_downstream": 0,
      "token_count_total": 138,
      "cosine_similarity_openai": 0.0775
    }
  },
  {
    "cve_id": "ASB-A-293602970",
    "downstream_version": "14",
    "file_name": "services/core/java/com/android/server/pm/UserManagerService.java",
    "runtime_seconds": 5.86,
    "rej_file_diff": "--- services/core/java/com/android/server/pm/UserManagerService.java\n+++ services/core/java/com/android/server/pm/UserManagerService.java\n@@ -4979,7 +4979,7 @@ public class UserManagerService extends IUserManager.Stub {\n             @UserIdInt int parentId, boolean preCreate, @Nullable String[] disallowedPackages,\n             @NonNull TimingsTraceAndSlog t, @Nullable Object token)\n             throws UserManager.CheckedUserOperationException {\n-        String truncatedName = truncateString(name);\n+        String truncatedName = truncateString(name, UserManager.MAX_USER_NAME_LENGTH);\n         final UserTypeDetails userTypeDetails = mUserTypes.get(userType);\n         if (userTypeDetails == null) {\n             throwCheckedUserOperationException(",
    "llm_generated_patch": "--- a/services/core/java/com/android/server/pm/UserManagerService.java\n+++ b/services/core/java/com/android/server/pm/UserManagerService.java\n@@ -4979,7 +4979,7 @@\n             @UserIdInt int parentId, boolean preCreate, @Nullable String[] disallowedPackages,\n             @NonNull TimingsTraceAndSlog t, @Nullable Object token)\n             throws UserManager.CheckedUserOperationException {\n-        String truncatedName = truncateString(name);\n+        String truncatedName = truncateString(name, UserManager.MAX_USER_NAME_LENGTH);\n         final UserTypeDetails userTypeDetails = mUserTypes.get(userType);\n         if (userTypeDetails == null) {\n             throwCheckedUserOperationException(",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 0.9,
      "token_level_edit_distance": 12,
      "codebert_score": {
        "precision": 0.9722,
        "recall": 0.9593,
        "f1": 0.9657,
        "f3": 0.9606
      },
      "token_count_upstream": 53,
      "token_count_downstream": 47,
      "token_count_total": 100,
      "cosine_similarity_openai": 0.9936
    }
  },
  {
    "cve_id": "ASB-A-304983146",
    "downstream_version": "14",
    "file_name": "services/core/java/com/android/server/appop/AppOpsService.java",
    "runtime_seconds": 106.93,
    "rej_file_diff": "--- services/core/java/com/android/server/appop/AppOpsService.java\n+++ services/core/java/com/android/server/appop/AppOpsService.java\n@@ -4342,6 +4350,36 @@ public class AppOpsService extends IAppOpsService.Stub {\n         return false;\n     }\n \n+    /**\n+     * Checks to see if the attribution tag is defined in either package or proxyPackage.\n+     * This method is intended for ProxyAttributionTag validation and returns false\n+     * if it does not exist in either one of them.\n+     *\n+     * @param packageName Name of the package\n+     * @param proxyPackageName Name of the proxy package\n+     * @param attributionTag attribution tag to be checked\n+     *\n+     * @return boolean specifying if attribution tag is valid or not\n+     */\n+    private boolean isAttributionTagDefined(@Nullable String packageName,\n+                                          @Nullable String proxyPackageName,\n+                                          @Nullable String attributionTag) {\n+        if (packageName == null) {\n+            return false;\n+        } else if (attributionTag == null) {\n+            return true;\n+        }\n+        PackageManagerInternal pmInt = LocalServices.getService(PackageManagerInternal.class);\n+        if (proxyPackageName != null) {\n+            AndroidPackage proxyPkg = pmInt.getPackage(proxyPackageName);\n+            if (proxyPkg != null && isAttributionInPackage(proxyPkg, attributionTag)) {\n+                return true;\n+            }\n+        }\n+        AndroidPackage pkg = pmInt.getPackage(packageName);\n+        return isAttributionInPackage(pkg, attributionTag);\n+    }\n+\n     private void logVerifyAndGetBypassFailure(int uid, @NonNull SecurityException e,\n             @NonNull String methodName) {\n         if (Process.isIsolated(uid)) {",
    "llm_generated_patch": "--- a/services/core/java/com/android/server/appop/AppOpsService.java\n+++ b/services/core/java/com/android/server/appop/AppOpsService.java\n@@ -4341,6 +4341,33 @@\n                         Binder.getCallingPid(), Binder.getCallingUid(), null)\n                 == PackageManager.PERMISSION_GRANTED;\n     }\n+\n+    /**\n+     * Checks to see if the attribution tag is defined in either package or proxyPackage.\n+     * This method is intended for ProxyAttributionTag validation and returns false\n+     * if it does not exist in either one of them.\n+     *\n+     * @param packageName Name of the package\n+     * @param proxyPackageName Name of the proxy package\n+     * @param attributionTag attribution tag to be checked\n+     *\n+     * @return boolean specifying if attribution tag is valid or not\n+     */\n+    private boolean isAttributionTagDefined(@Nullable String packageName,\n+                                          @Nullable String proxyPackageName,\n+                                          @Nullable String attributionTag) {\n+        if (packageName == null) {\n+            return false;\n+        } else if (attributionTag == null) {\n+            return true;\n+        }\n+        PackageManagerInternal pmInt = LocalServices.getService(PackageManagerInternal.class);\n+        if (proxyPackageName != null) {\n+            AndroidPackage proxyPkg = pmInt.getPackage(proxyPackageName);\n+            if (proxyPkg != null && isAttributionInPackage(proxyPkg, attributionTag)) {\n+                return true;\n+            }\n+        }\n+        AndroidPackage pkg = pmInt.getPackage(packageName);\n+        return isAttributionInPackage(pkg, attributionTag);\n+    }\n \n     private @Nullable UidState getUidStateLocked(int uid, boolean edit) {\n         UidState uidState = mUidStates.get(uid);",
    "metrics": {
      "relative_line_count_similarity": 1.0,
      "normalized_edit_similarity": 0.8586,
      "token_level_edit_distance": 44,
      "codebert_score": {
        "precision": 0.8965,
        "recall": 0.9041,
        "f1": 0.9003,
        "f3": 0.9034
      },
      "token_count_upstream": 198,
      "token_count_downstream": 193,
      "token_count_total": 391,
      "cosine_similarity_openai": 0.9419
    }
  }
]