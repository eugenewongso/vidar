[
  {
    "cve_id": "ASB-A-296915500",
    "downstream_version": "14",
    "file_name": "android/app/src/com/android/bluetooth/opp/BluetoothOppSendFileInfo.java",
    "runtime_seconds": 120.42,
    "rej_file_diff": "",
    "llm_generated_patch": "--- a/android/app/src/com/android/bluetooth/opp/BluetoothOppSendFileInfo.java\n+++ b/android/app/src/com/android/bluetooth/opp/BluetoothOppSendFileInfo.java\n@@ -32,5 +32,9 @@\n package com.android.bluetooth.opp;\n \n+import static android.os.UserHandle.myUserId;\n+\n+import android.bluetooth.BluetoothProfile;\n+import android.bluetooth.BluetoothProtoEnums;\n import android.content.ContentResolver;\n import android.content.Context;\n import android.content.res.AssetFileDescriptor;\n@@ -50,7 +54,8 @@\n import java.io.FileInputStream;\n import java.io.FileNotFoundException;\n import java.io.IOException;\n+import java.util.Objects;\n \n /**\n  * This class stores information about a single sending file It will only be",
    "metrics": {
      "relative_line_count_similarity": 0.0,
      "normalized_edit_similarity": 0.0,
      "token_level_edit_distance": 160,
      "codebert_score": {
        "error": "Candidate code and ground truth code must not be empty."
      },
      "token_count_upstream": 0,
      "token_count_downstream": 51,
      "token_count_total": 51,
      "cosine_similarity_openai": 0.0874
    }
  },
  {
    "cve_id": "ASB-A-364027949",
    "downstream_version": "14",
    "file_name": "system/stack/gatt/gatt_sr.cc",
    "runtime_seconds": 19.43,
    "rej_file_diff": "",
    "llm_generated_patch": "--- a/system/stack/gatt/gatt_sr.cc\n+++ b/system/stack/gatt/gatt_sr.cc\n@@ -770,6 +770,11 @@\n \n   uint16_t payload_size = gatt_tcb_get_payload_size_tx(tcb, cid);\n \n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t msg_len =\n       (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);\n   BT_HDR* p_msg = (BT_HDR*)osi_calloc(msg_len);\n@@ -803,6 +808,12 @@\n   }\n \n   uint16_t payload_size = gatt_tcb_get_payload_size_tx(tcb, cid);\n+\n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t buf_len =\n       (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);",
    "metrics": {
      "relative_line_count_similarity": 0.0,
      "normalized_edit_similarity": 0.0,
      "token_level_edit_distance": 161,
      "codebert_score": {
        "error": "Candidate code and ground truth code must not be empty."
      },
      "token_count_upstream": 0,
      "token_count_downstream": 88,
      "token_count_total": 88,
      "cosine_similarity_openai": 0.113
    }
  },
  {
    "cve_id": "ASB-A-364025411",
    "downstream_version": "14",
    "file_name": "system/stack/gatt/gatt_sr.cc",
    "runtime_seconds": 7.09,
    "rej_file_diff": "",
    "llm_generated_patch": "--- a/system/stack/gatt/gatt_sr.cc\n+++ b/system/stack/gatt/gatt_sr.cc\n@@ -772,6 +772,12 @@ void gatts_process_primary_service_req(tGATT_TCB& tcb, uint16_t cid,\n \n   uint16_t payload_size = gatt_tcb_get_payload_size_tx(tcb, cid);\n \n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    LOG(ERROR) << __func__ << \": Channel closed, cannot get payload size\";\n+    return;\n+  }\n+\n   uint16_t msg_len =\n       (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);\n   BT_HDR* p_msg = (BT_HDR*)osi_calloc(msg_len);\n@@ -804,6 +810,12 @@ static void gatts_process_find_info(tGATT_TCB& tcb, uint16_t cid,\n   }\n \n   uint16_t payload_size = gatt_tcb_get_payload_size_tx(tcb, cid);\n+\n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    LOG(ERROR) << __func__ << \": Channel closed, cannot get payload size\";\n+    return;\n+  }\n   uint16_t buf_len =\n       (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);",
    "metrics": {
      "relative_line_count_similarity": 0.0,
      "normalized_edit_similarity": 0.0,
      "token_level_edit_distance": 201,
      "codebert_score": {
        "error": "Candidate code and ground truth code must not be empty."
      },
      "token_count_upstream": 0,
      "token_count_downstream": 122,
      "token_count_total": 122,
      "cosine_similarity_openai": 0.1088
    }
  },
  {
    "cve_id": "ASB-A-340480881",
    "downstream_version": "14",
    "file_name": "PermissionController/src/com/android/permissioncontroller/permission/ui/handheld/ReviewPermissionsFragment.java",
    "runtime_seconds": 34.61,
    "rej_file_diff": "",
    "llm_generated_patch": "--- a/PermissionController/src/com/android/permissioncontroller/permission/ui/handheld/ReviewPermissionsFragment.java\n+++ b/PermissionController/src/com/android/permissioncontroller/permission/ui/handheld/ReviewPermissionsFragment.java\n@@ -267,11 +267,11 @@\n             PermissionControllerStatsLog.write(REVIEW_PERMISSIONS_FRAGMENT_RESULT_REPORTED,\n                     changeId, mViewModel.getPackageInfo().applicationInfo.uid,\n                     group.getPackageName(),\n-                    permission.getName(), permission.isGrantedIncludingAppOp());\n+                    permission.getName(), permission.isGranted());\n             Log.v(LOG_TAG, \"Permission grant via permission review changeId=\" + changeId + \" uid=\"\n                     + mViewModel.getPackageInfo().applicationInfo.uid + \" packageName=\"\n                     + group.getPackageName() + \" permission=\"\n-                    + permission.getName() + \" granted=\" + permission.isGrantedIncludingAppOp());\n+                    + permission.getName() + \" granted=\" + permission.isGranted());\n         }\n     }",
    "metrics": {
      "relative_line_count_similarity": 0.0,
      "normalized_edit_similarity": 0.0,
      "token_level_edit_distance": 171,
      "codebert_score": {
        "error": "Candidate code and ground truth code must not be empty."
      },
      "token_count_upstream": 0,
      "token_count_downstream": 58,
      "token_count_total": 58,
      "cosine_similarity_openai": 0.0597
    }
  },
  {
    "cve_id": "ASB-A-369103643",
    "downstream_version": "14",
    "file_name": "services/core/java/com/android/server/wm/WindowOrganizerController.java",
    "runtime_seconds": 112.44,
    "rej_file_diff": "",
    "llm_generated_patch": "--- a/services/core/java/com/android/server/wm/WindowOrganizerController.java\n+++ b/services/core/java/com/android/server/wm/WindowOrganizerController.java\n@@ -1544,8 +1544,10 @@\n                 final Intent activityIntent = operation.getActivityIntent();\n                 final Bundle activityOptions = operation.getBundle();\n+                final SafeActivityOptions safeOptions =\n+                        SafeActivityOptions.fromBundle(activityOptions, caller.mPid, caller.mUid);\n                 final int result = mService.getActivityStartController()\n-                        .startActivityInTaskFragment(taskFragment, activityIntent, activityOptions,\n-                                callerActivityToken, caller.mUid, caller.mPid,\n-                                errorCallbackToken);\n+                        .startActivityInTaskFragment(taskFragment, activityIntent, safeOptions,\n+                                callerActivityToken, caller.mUid, caller.mPid,\n+                                errorCallbackToken);\n                 if (!isStartResultSuccessful(result)) {\n                     sendTaskFragmentOperationFailure(organizer, errorCallbackToken, taskFragment,",
    "metrics": {
      "relative_line_count_similarity": 0.0,
      "normalized_edit_similarity": 0.0,
      "token_level_edit_distance": 165,
      "codebert_score": {
        "error": "Candidate code and ground truth code must not be empty."
      },
      "token_count_upstream": 0,
      "token_count_downstream": 58,
      "token_count_total": 58,
      "cosine_similarity_openai": 0.0548
    }
  },
  {
    "cve_id": "ASB-A-364026473",
    "downstream_version": "14",
    "file_name": "system/stack/gatt/gatt_sr.cc",
    "runtime_seconds": 5.84,
    "rej_file_diff": "",
    "llm_generated_patch": "--- a/system/stack/gatt/gatt_sr.cc\n+++ b/system/stack/gatt/gatt_sr.cc\n@@ -772,6 +772,12 @@\n \n   uint16_t payload_size = gatt_tcb_get_payload_size_tx(tcb, cid);\n \n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t msg_len =\n       (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);\n   BT_HDR* p_msg = (BT_HDR*)osi_calloc(msg_len);\n@@ -803,6 +809,12 @@\n   }\n \n   uint16_t payload_size = gatt_tcb_get_payload_size_tx(tcb, cid);\n+\n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t buf_len =\n       (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);",
    "metrics": {
      "relative_line_count_similarity": 0.0,
      "normalized_edit_similarity": 0.0,
      "token_level_edit_distance": 161,
      "codebert_score": {
        "error": "Candidate code and ground truth code must not be empty."
      },
      "token_count_upstream": 0,
      "token_count_downstream": 88,
      "token_count_total": 88,
      "cosine_similarity_openai": 0.1123
    }
  },
  {
    "cve_id": "ASB-A-364027038",
    "downstream_version": "14",
    "file_name": "system/stack/gatt/gatt_sr.cc",
    "runtime_seconds": 7.16,
    "rej_file_diff": "",
    "llm_generated_patch": "--- a/system/stack/gatt/gatt_sr.cc\n+++ b/system/stack/gatt/gatt_sr.cc\n@@ -772,7 +772,12 @@\n     }\n   }\n \n-  uint16_t payload_size = gatt_tcb_get_payload_size_tx(tcb, cid);\n+  uint16_t payload_size = gatt_tcb_get_payload_size_tx(tcb, cid);\n+\n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n \n   uint16_t msg_len =\n       (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);\n@@ -804,7 +809,13 @@\n     return;\n   }\n \n-  uint16_t payload_size = gatt_tcb_get_payload_size_tx(tcb, cid);\n+  uint16_t payload_size = gatt_tcb_get_payload_size_tx(tcb, cid);\n+\n+  // This can happen if the channel is already closed.\n+  if (payload_size == 0) {\n+    return;\n+  }\n+\n   uint16_t buf_len =\n       (uint16_t)(sizeof(BT_HDR) + payload_size + L2CAP_MIN_OFFSET);",
    "metrics": {
      "relative_line_count_similarity": 0.0,
      "normalized_edit_similarity": 0.0,
      "token_level_edit_distance": 176,
      "codebert_score": {
        "error": "Candidate code and ground truth code must not be empty."
      },
      "token_count_upstream": 0,
      "token_count_downstream": 101,
      "token_count_total": 101,
      "cosine_similarity_openai": 0.1075
    }
  },
  {
    "cve_id": "ASB-A-352542820",
    "downstream_version": "14",
    "file_name": "src/com/android/settings/users/UserSettings.java",
    "runtime_seconds": 75.61,
    "rej_file_diff": "",
    "llm_generated_patch": "--- a/src/com/android/settings/users/UserSettings.java\n+++ b/src/com/android/settings/users/UserSettings.java\n@@ -465,11 +465,12 @@\n     @Override\n     public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {\n         int pos = 0;\n-        if (!isCurrentUserAdmin() && canSwitchUserNow() && !isCurrentUserGuest()) {\n+        if (!isCurrentUserAdmin() && canSwitchUserNow()\n+                && !isCurrentUserGuest() && !mUserManager.isProfile(UserHandle.myUserId())) {\n             String nickname = mUserManager.getUserName();\n             MenuItem removeThisUser = menu.add(0, MENU_REMOVE_USER, pos++,\n                     getResources().getString(R.string.user_remove_user_menu, nickname));\n             removeThisUser.setShowAsAction(MenuItem.SHOW_AS_ACTION_NEVER);\n-\n             final EnforcedAdmin disallowRemoveUserAdmin =\n                     RestrictedLockUtilsInternal.checkIfRestrictionEnforced(getContext(),\n                             UserManager.DISALLOW_REMOVE_USER, UserHandle.myUserId());",
    "metrics": {
      "relative_line_count_similarity": 0.0,
      "normalized_edit_similarity": 0.0,
      "token_level_edit_distance": 178,
      "codebert_score": {
        "error": "Candidate code and ground truth code must not be empty."
      },
      "token_count_upstream": 0,
      "token_count_downstream": 60,
      "token_count_total": 60,
      "cosine_similarity_openai": 0.0991
    }
  },
  {
    "cve_id": "ASB-A-289375038",
    "downstream_version": "14",
    "file_name": "android/app/src/com/android/bluetooth/btservice/AdapterService.java",
    "runtime_seconds": 147.9,
    "rej_file_diff": "",
    "llm_generated_patch": "--- a/android/app/src/com/android/bluetooth/btservice/AdapterService.java\n+++ b/android/app/src/com/android/bluetooth/btservice/AdapterService.java\n@@ -12,8 +12,8 @@\n \n package com.android.bluetooth.btservice;\n \n+import static android.bluetooth.BluetoothDevice.BOND_NONE;\n import static android.bluetooth.BluetoothDevice.TRANSPORT_AUTO;\n-import static android.text.format.DateUtils.MINUTE_IN_MILLIS;\n import static android.text.format.DateUtils.SECOND_IN_MILLIS;\n \n import static com.android.bluetooth.Utils.callerIsSystemOrActiveOrManagedUser;\n@@ -2068,7 +2068,13 @@\n         intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device);\n         intent.putExtra(BluetoothDevice.EXTRA_BOND_STATE, toState);\n         intent.putExtra(BluetoothDevice.EXTRA_PREVIOUS_BOND_STATE, fromState);\n-        if (toState == BluetoothDevice.BOND_NONE) {\n+        if (toState == BOND_NONE) {\n             intent.putExtra(BluetoothDevice.EXTRA_UNBOND_REASON, unbondReason);\n+\n+            // Remove the permissions for unbonded devices\n+            setMessageAccessPermission(device, BluetoothDevice.ACCESS_UNKNOWN);\n+            setPhonebookAccessPermission(device, BluetoothDevice.ACCESS_UNKNOWN);\n+            setSimAccessPermission(device, BluetoothDevice.ACCESS_UNKNOWN);\n         }\n         // Don't require a permission to receive this now that we only send to targeted\n         // recievers.",
    "metrics": {
      "relative_line_count_similarity": 0.0,
      "normalized_edit_similarity": 0.0,
      "token_level_edit_distance": 244,
      "codebert_score": {
        "error": "Candidate code and ground truth code must not be empty."
      },
      "token_count_upstream": 0,
      "token_count_downstream": 85,
      "token_count_total": 85,
      "cosine_similarity_openai": 0.093
    }
  },
  {
    "cve_id": "ASB-A-289811388",
    "downstream_version": "14",
    "file_name": "android/app/src/com/android/bluetooth/btservice/AdapterService.java",
    "runtime_seconds": 57.18,
    "rej_file_diff": "",
    "llm_generated_patch": "--- a/android/app/src/com/android/bluetooth/btservice/AdapterService.java\n+++ b/android/app/src/com/android/bluetooth/btservice/AdapterService.java\n@@ -14,6 +14,7 @@\n package com.android.bluetooth.btservice;\n\n import static android.bluetooth.BluetoothDevice.TRANSPORT_AUTO;\n+import static android.bluetooth.BluetoothDevice.BOND_NONE;\n import static android.text.format.DateUtils.MINUTE_IN_MILLIS;\n import static android.text.format.DateUtils.SECOND_IN_MILLIS;\n\n@@ -2519,7 +2520,14 @@\n             if (mService.mDatabaseManager != null) {\n                 mService.mDatabaseManager.handleBondStateChanged(device, fromState, toState);\n             }\n+\n+            if (toState == BluetoothDevice.BOND_NONE) {\n+                // Remove the permissions for unbonded devices\n+                mService.setMessageAccessPermission(device, BluetoothDevice.ACCESS_UNKNOWN);\n+                mService.setPhonebookAccessPermission(device, BluetoothDevice.ACCESS_UNKNOWN);\n+                mService.setSimAccessPermission(device, BluetoothDevice.ACCESS_UNKNOWN);\n+            }\n         }\n\n         @VisibleForTesting",
    "metrics": {
      "relative_line_count_similarity": 0.0,
      "normalized_edit_similarity": 0.0,
      "token_level_edit_distance": 192,
      "codebert_score": {
        "error": "Candidate code and ground truth code must not be empty."
      },
      "token_count_upstream": 0,
      "token_count_downstream": 63,
      "token_count_total": 63,
      "cosine_similarity_openai": 0.1064
    }
  },
  {
    "cve_id": "ASB-A-375623125",
    "downstream_version": "14",
    "file_name": "services/core/java/com/android/server/appop/AppOpsService.java",
    "runtime_seconds": 118.61,
    "rej_file_diff": "",
    "llm_generated_patch": "--- a/services/core/java/com/android/server/appop/AppOpsService.java\n+++ b/services/core/java/com/android/server/appop/AppOpsService.java\n@@ -1614,10 +1614,10 @@\n             @Nullable String attributionTag, int proxyUid, String proxyPackageName,\n             @Nullable String proxyAttributionTag, @OpFlags int flags,\n             boolean shouldCollectAsyncNotedOp, @Nullable String message,\n-            boolean shouldCollectMessage) {\n+            boolean shouldCollectMessage) {\n         PackageVerificationResult pvr;\n         try {\n-            pvr = verifyAndGetBypass(uid, packageName, attributionTag, proxyPackageName);\n+            pvr = verifyAndGetBypass(uid, packageName, attributionTag, proxyUid, proxyPackageName);\n             boolean wasNull = attributionTag == null;\n             if (!pvr.isAttributionTagValid) {\n                 attributionTag = null;",
    "metrics": {
      "relative_line_count_similarity": 0.0,
      "normalized_edit_similarity": 0.0,
      "token_level_edit_distance": 137,
      "codebert_score": {
        "error": "Candidate code and ground truth code must not be empty."
      },
      "token_count_upstream": 0,
      "token_count_downstream": 65,
      "token_count_total": 65,
      "cosine_similarity_openai": 0.0842
    }
  },
  {
    "cve_id": "ASB-A-353240784",
    "downstream_version": "14",
    "file_name": "services/appwidget/java/com/android/server/appwidget/AppWidgetServiceImpl.java",
    "runtime_seconds": 81.44,
    "rej_file_diff": "",
    "llm_generated_patch": "--- a/services/appwidget/java/com/android/server/appwidget/AppWidgetServiceImpl.java\n+++ b/services/appwidget/java/com/android/server/appwidget/AppWidgetServiceImpl.java\n@@ -151,6 +151,15 @@\n     // Bump if the stored widgets need to be upgraded.\n     private static final int CURRENT_VERSION = 1;\n \n+    // Hard limit of number of hosts an app can create, note that the app that hosts the widgets\n+    // can have multiple instances of {@link AppWidgetHost}, typically in respect to different\n+    // surfaces in the host app.\n+    // @see AppWidgetHost\n+    // @see AppWidgetHost#mHostId\n+    private static final int MAX_NUMBER_OF_HOSTS_PER_PACKAGE = 20;\n+    // Hard limit of number of widgets can be pinned by a host.\n+    private static final int MAX_NUMBER_OF_WIDGETS_PER_HOST = 200;\n+\n     // Every widget update request is associated which an increasing sequence number. This is\n     // used to verify which request has successfully been received by the host.\n     private static final AtomicLong UPDATE_COUNTER = new AtomicLong();\n@@ -1837,7 +1846,24 @@\n      */\n     void addWidgetLocked(Widget widget) {\n         mWidgets.add(widget);\n+        ensureWidgetCountBeforeAddLocked(widget);\n \n         onWidgetProviderAddedOrChangedLocked(widget);\n     }\n \n     /**\n+     * Ensures that the widget count for the widget's host is not greater than the maximum\n+     * number of widgets per host. If the count is greater than the maximum, removes oldest widgets\n+     * from the host until the count is less than or equal to the maximum.\n+     */\n+    private void ensureWidgetCountBeforeAddLocked(@NonNull final Widget widget) {\n+        if (widget.host == null || widget.host.id == null) {\n+            return;\n+        }\n+        final List<Widget> widgetsInSameHost = new ArrayList<>();\n+        for (Widget w : mWidgets) {\n+            if (w.host != null && widget.host.id.equals(w.host.id)) {\n+                widgetsInSameHost.add(w);\n+            }\n+        }\n+        while (widgetsInSameHost.size() >= MAX_NUMBER_OF_WIDGETS_PER_HOST) {\n+            removeWidgetLocked(widgetsInSameHost.remove(0));\n+        }\n+    }\n+\n+    /**\n      * Checks if the provider is assigned and updates the mWidgetPackages to track packages\n      * that have bound widgets.\n      */",
    "metrics": {
      "relative_line_count_similarity": 0.0,
      "normalized_edit_similarity": 0.0,
      "token_level_edit_distance": 433,
      "codebert_score": {
        "error": "Candidate code and ground truth code must not be empty."
      },
      "token_count_upstream": 0,
      "token_count_downstream": 293,
      "token_count_total": 293,
      "cosine_similarity_openai": 0.0504
    }
  },
  {
    "cve_id": "ASB-A-382064697",
    "downstream_version": "14",
    "file_name": "services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java",
    "runtime_seconds": 172.62,
    "rej_file_diff": "",
    "llm_generated_patch": "--- a/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java\n+++ b/services/devicepolicy/java/com/android/server/devicepolicy/DevicePolicyManagerService.java\n@@ -2721,29 +2721,33 @@\n         }\n     }\n \n-    /**\n-     * Apply default restrictions that haven't been applied to a given admin yet.\n-     */\n+    /** Apply default restrictions that haven't been applied to a given admin yet. */\n     private void maybeSetDefaultRestrictionsForAdminLocked(int userId, ActiveAdmin admin) {\n         Set<String> defaultRestrictions =\n                 UserRestrictionsUtils.getDefaultEnabledForManagedProfiles();\n         if (defaultRestrictions.equals(admin.defaultEnabledRestrictionsAlreadySet)) {\n             return; // The same set of default restrictions has been already applied.\n         }\n-        if (isPolicyEngineForFinanceFlagEnabled()) {\n-            for (String restriction : defaultRestrictions) {\n+        if (isPolicyEngineForFinanceFlagEnabled()) { // START_MODIFIED_BLOCK\n+            Set<String> newDefaultRestrictions = new HashSet<>(defaultRestrictions);\n+            newDefaultRestrictions.removeAll(admin.defaultEnabledRestrictionsAlreadySet);\n+\n+            if (newDefaultRestrictions.isEmpty()) {\n+                // This case implies admin.defaultEnabledRestrictionsAlreadySet is a superset\n+                // of defaultRestrictions, or contains elements not in defaultRestrictions\n+                // but covers all of defaultRestrictions.\n+                return;\n+            }\n+\n+            for (String restriction : newDefaultRestrictions) {\n                 mDevicePolicyEngine.setLocalPolicy(\n                         PolicyDefinition.getPolicyDefinitionForUserRestriction(restriction),\n                         EnforcingAdmin.createEnterpriseEnforcingAdmin(\n                                 admin.info.getComponent(),\n                                 admin.getUserHandle().getIdentifier()),\n                         new BooleanPolicyValue(true),\n-                        userId);\n-            }\n-            admin.defaultEnabledRestrictionsAlreadySet.addAll(defaultRestrictions);\n-            Slogf.i(LOG_TAG, \"Enabled the following restrictions by default: \" +\n-                    defaultRestrictions);\n+                        userId);\n+                admin.defaultEnabledRestrictionsAlreadySet.add(restriction);\n+                Slogf.i(LOG_TAG, \"Enabled the following restriction by default: \" + restriction);\n+            }\n             return;\n-        }\n+        } // END_MODIFIED_BLOCK\n \n         Slogf.i(LOG_TAG, \"New user restrictions need to be set by default for user \" + userId);",
    "metrics": {
      "relative_line_count_similarity": 0.0,
      "normalized_edit_similarity": 0.0,
      "token_level_edit_distance": 341,
      "codebert_score": {
        "error": "Candidate code and ground truth code must not be empty."
      },
      "token_count_upstream": 0,
      "token_count_downstream": 202,
      "token_count_total": 202,
      "cosine_similarity_openai": 0.0672
    }
  }
]