[
    {
        "id": "ASB-A-363248394",
        "vulnerability_url": "https://api.osv.dev/v1/vulns/ASB-A-363248394",
        "severity": "High",
        "failures": [
            {
                "downstream_version": "12",
                "branch_used": "android12-release",
                "downstream_patch": "59cdc3e20ca4ac198b1c27e6a5372ececd155b16",
                "repo_path": "android_repos/Settings",
                "result": "failure",
                "downstream_patch_content": "commit 59cdc3e20ca4ac198b1c27e6a5372ececd155b16\nAuthor: Guojing Yuan <guojing@google.com>\nDate:   Tue Oct 1 21:59:31 2024 +0000\n\n    [CDM][NLS] Check if the NLS service has an intent-filter\n    \n    Bug: 363248394\n    Test: CTS\n    Flag: EXEMPT bugfix\n    Change-Id: Ib79c219cde8d73a218ceb7911f4552d43e384d8e\n    Merged-In: Ib79c219cde8d73a218ceb7911f4552d43e384d8e\n    (cherry picked from commit 7ae59a42eb13f643d842525208619037c074371a)\n\ndiff --git a/src/com/android/settings/notification/NotificationAccessConfirmationActivity.java b/src/com/android/settings/notification/NotificationAccessConfirmationActivity.java\nindex a6b565ae6ba..f01e23a5e8f 100644\n--- a/src/com/android/settings/notification/NotificationAccessConfirmationActivity.java\n+++ b/src/com/android/settings/notification/NotificationAccessConfirmationActivity.java\n@@ -29,12 +29,14 @@ import android.app.NotificationManager;\n import android.content.ComponentName;\n import android.content.Context;\n import android.content.DialogInterface;\n+import android.content.Intent;\n import android.content.pm.ApplicationInfo;\n import android.content.pm.PackageItemInfo;\n import android.content.pm.PackageManager;\n-import android.content.pm.ServiceInfo;\n+import android.content.pm.ResolveInfo;\n import android.os.Bundle;\n import android.os.UserHandle;\n+import android.service.notification.NotificationListenerService;\n import android.text.TextUtils;\n import android.util.Slog;\n import android.view.WindowManager;\n@@ -44,6 +46,8 @@ import com.android.internal.app.AlertActivity;\n import com.android.internal.app.AlertController;\n import com.android.settings.R;\n \n+import java.util.List;\n+\n /** @hide */\n public class NotificationAccessConfirmationActivity extends Activity\n         implements DialogInterface {\n@@ -92,6 +96,31 @@ public class NotificationAccessConfirmationActivity extends Activity\n             return;\n         }\n \n+        // Check NLS service info.\n+        String requiredPermission = Manifest.permission.BIND_NOTIFICATION_LISTENER_SERVICE;\n+        Intent NLSIntent = new Intent(NotificationListenerService.SERVICE_INTERFACE);\n+        List<ResolveInfo> matchedServiceList = getPackageManager().queryIntentServicesAsUser(\n+                NLSIntent, /* flags */ 0, mUserId);\n+        boolean hasNLSIntentFilter = false;\n+        for (ResolveInfo service : matchedServiceList) {\n+            if (service.serviceInfo.packageName.equals(mComponentName.getPackageName())) {\n+                if (!requiredPermission.equals(service.serviceInfo.permission)) {\n+                    Slog.e(LOG_TAG, \"Service \" + mComponentName + \" lacks permission \"\n+                            + requiredPermission);\n+                    finish();\n+                    return;\n+                }\n+                hasNLSIntentFilter = true;\n+                break;\n+            }\n+        }\n+        if (!hasNLSIntentFilter) {\n+            Slog.e(LOG_TAG, \"Service \" + mComponentName + \" lacks an intent-filter action \"\n+                    + \"for android.service.notification.NotificationListenerService.\");\n+            finish();\n+            return;\n+        }\n+\n         AlertController.AlertParams p = new AlertController.AlertParams(this);\n         p.mTitle = getString(\n                 R.string.notification_listener_security_warning_title,\n@@ -126,19 +155,6 @@ public class NotificationAccessConfirmationActivity extends Activity\n     }\n \n     private void onAllow() {\n-        String requiredPermission = Manifest.permission.BIND_NOTIFICATION_LISTENER_SERVICE;\n-        try {\n-            ServiceInfo serviceInfo = getPackageManager().getServiceInfo(mComponentName, 0);\n-            if (!requiredPermission.equals(serviceInfo.permission)) {\n-                Slog.e(LOG_TAG,\n-                        \"Service \" + mComponentName + \" lacks permission \" + requiredPermission);\n-                return;\n-            }\n-        } catch (PackageManager.NameNotFoundException e) {\n-            Slog.e(LOG_TAG, \"Failed to get service info for \" + mComponentName, e);\n-            return;\n-        }\n-\n         mNm.setNotificationListenerAccessGranted(mComponentName, true);\n \n         finish();\n@@ -149,12 +165,6 @@ public class NotificationAccessConfirmationActivity extends Activity\n         return AlertActivity.dispatchPopulateAccessibilityEvent(this, event);\n     }\n \n-    @Override\n-    public void onBackPressed() {\n-        // Suppress finishing the activity on back button press,\n-        // consistently with the permission dialog behavior\n-    }\n-\n     @Override\n     public void cancel() {\n         finish();\n",
                "file_conflicts": [
                    {
                        "file_name": "src/com/android/settings/notification/NotificationAccessConfirmationActivity.java",
                        "total_hunks": 5,
                        "failed_hunks": [
                            1
                        ],
                        "inline_merge_conflicts": [
                            {
                                "hunk_number": 1,
                                "merge_conflict": "<<<<<<< DOWNSTREAM (version 12)\n\n=======\n    }\n\n    private void onAllow() {\n        mNm.setNotificationListenerAccessGranted(mComponentName, true);\n\n        finish();\n>>>>>>> UPSTREAM PATCH (commit 7ae59a42eb13f643d842525208619037c074371a)"
                            },
                            {
                                "hunk_number": 2,
                                "merge_conflict": "<<<<<<< DOWNSTREAM (version 12)\n    @Override\n    public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event) {\n        return AlertActivity.dispatchPopulateAccessibilityEvent(this, event);\n    }\n\n=======\n\n>>>>>>> UPSTREAM PATCH (commit 7ae59a42eb13f643d842525208619037c074371a)"
                            }
                        ],
                        "rej_file_content": "```diff\n--- src/com/android/settings/notification/NotificationAccessConfirmationActivity.java\n+++ src/com/android/settings/notification/NotificationAccessConfirmationActivity.java\n@@ -30,13 +30,15 @@ import android.app.admin.DevicePolicyManager;\n import android.content.ComponentName;\n import android.content.Context;\n import android.content.DialogInterface;\n+import android.content.Intent;\n import android.content.pm.ApplicationInfo;\n import android.content.pm.PackageItemInfo;\n import android.content.pm.PackageManager;\n-import android.content.pm.ServiceInfo;\n+import android.content.pm.ResolveInfo;\n import android.os.Bundle;\n import android.os.UserHandle;\n import android.os.UserManager;\n+import android.service.notification.NotificationListenerService;\n import android.text.TextUtils;\n import android.util.Slog;\n import android.view.WindowManager;\n```",
                        "patch_apply_output": "patching file src/com/android/settings/notification/NotificationAccessConfirmationActivity.java\nHunk #1 FAILED at 30.\nHunk #2 succeeded at 44 (offset -5 lines).\nHunk #3 succeeded at 94 (offset -21 lines).\nHunk #4 succeeded at 153 (offset -21 lines).\nHunk #5 succeeded at 163 (offset -21 lines).\n1 out of 5 hunks FAILED -- saving rejects to file src/com/android/settings/notification/NotificationAccessConfirmationActivity.java.rej",
                        "inline_merge_output": "patching file src/com/android/settings/notification/NotificationAccessConfirmationActivity.java\nHunk #1 already applied at 33,37,41.\nHunk #2 merged at 56-57.\nHunk #4 NOT MERGED at 203-211.\nHunk #5 NOT MERGED at 220-227.",
                        "upstream_file_content": "```java\n/*\n * Copyright (C) 2017 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\npackage com.android.settings.notification;\n\nimport static android.app.admin.DevicePolicyResources.Strings.Settings.WORK_APPS_CANNOT_ACCESS_NOTIFICATION_SETTINGS;\nimport static android.view.WindowManager.LayoutParams.SYSTEM_FLAG_HIDE_NON_SYSTEM_OVERLAY_WINDOWS;\n\nimport static com.android.internal.notification.NotificationAccessConfirmationActivityContract.EXTRA_COMPONENT_NAME;\nimport static com.android.internal.notification.NotificationAccessConfirmationActivityContract.EXTRA_USER_ID;\n\nimport android.Manifest;\nimport android.app.Activity;\nimport android.app.NotificationManager;\nimport android.app.admin.DevicePolicyManager;\nimport android.content.ComponentName;\nimport android.content.Context;\nimport android.content.DialogInterface;\nimport android.content.Intent;\nimport android.content.pm.ApplicationInfo;\nimport android.content.pm.PackageItemInfo;\nimport android.content.pm.PackageManager;\nimport android.content.pm.ResolveInfo;\nimport android.os.Bundle;\nimport android.os.UserHandle;\nimport android.os.UserManager;\nimport android.service.notification.NotificationListenerService;\nimport android.text.TextUtils;\nimport android.util.Slog;\nimport android.view.WindowManager;\nimport android.view.accessibility.AccessibilityEvent;\nimport android.widget.Toast;\n\nimport androidx.annotation.Nullable;\n\nimport com.android.internal.app.AlertActivity;\nimport com.android.internal.app.AlertController;\nimport com.android.settings.R;\n\nimport java.util.List;\n\n/** @hide */\npublic class NotificationAccessConfirmationActivity extends Activity\n        implements DialogInterface {\n\n    private static final boolean DEBUG = false;\n    private static final String LOG_TAG = \"NotificationAccessConfirmationActivity\";\n\n    private int mUserId;\n    private ComponentName mComponentName;\n    private NotificationManager mNm;\n\n    private DevicePolicyManager mDpm;\n    private UserManager mUm;\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        getWindow().addSystemFlags(SYSTEM_FLAG_HIDE_NON_SYSTEM_OVERLAY_WINDOWS);\n\n        mUm = getSystemService(UserManager.class);\n        mDpm = getSystemService(DevicePolicyManager.class);\n\n        if (mUm.isManagedProfile()) {\n            Slog.w(LOG_TAG, \"Apps in the work profile do not support notification listeners\");\n            Toast.makeText(this,\n                    mDpm.getResources().getString(WORK_APPS_CANNOT_ACCESS_NOTIFICATION_SETTINGS,\n                            () -> getString(R.string.notification_settings_work_profile)),\n                    Toast.LENGTH_SHORT).show();\n            finish();\n            return;\n        }\n\n        mNm = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\n\n        mComponentName = getIntent().getParcelableExtra(EXTRA_COMPONENT_NAME);\n        mUserId = getIntent().getIntExtra(EXTRA_USER_ID, UserHandle.USER_NULL);\n        CharSequence mAppLabel;\n\n        if (mComponentName == null || mComponentName.getPackageName() == null\n                || mComponentName.flattenToString().length()\n                > NotificationManager.MAX_SERVICE_COMPONENT_NAME_LENGTH) {\n            finish();\n            return;\n        }\n\n        try {\n            ApplicationInfo applicationInfo = getPackageManager().getApplicationInfo(\n                    mComponentName.getPackageName(), 0);\n            mAppLabel = applicationInfo.loadSafeLabel(getPackageManager(),\n                    PackageItemInfo.DEFAULT_MAX_LABEL_SIZE_PX,\n                    PackageItemInfo.SAFE_LABEL_FLAG_TRIM\n                            | PackageItemInfo.SAFE_LABEL_FLAG_FIRST_LINE);\n        } catch (PackageManager.NameNotFoundException e) {\n            Slog.e(LOG_TAG, \"Couldn't find app with package name for \" + mComponentName, e);\n            finish();\n            return;\n        }\n\n        if (TextUtils.isEmpty(mAppLabel)) {\n            finish();\n            return;\n        }\n\n        // Check NLS service info.\n        String requiredPermission = Manifest.permission.BIND_NOTIFICATION_LISTENER_SERVICE;\n        Intent NLSIntent = new Intent(NotificationListenerService.SERVICE_INTERFACE);\n        List<ResolveInfo> matchedServiceList = getPackageManager().queryIntentServicesAsUser(\n                NLSIntent, /* flags */ 0, mUserId);\n        boolean hasNLSIntentFilter = false;\n        for (ResolveInfo service : matchedServiceList) {\n            if (service.serviceInfo.packageName.equals(mComponentName.getPackageName())) {\n                if (!requiredPermission.equals(service.serviceInfo.permission)) {\n                    Slog.e(LOG_TAG, \"Service \" + mComponentName + \" lacks permission \"\n                            + requiredPermission);\n                    finish();\n                    return;\n                }\n                hasNLSIntentFilter = true;\n                break;\n            }\n        }\n        if (!hasNLSIntentFilter) {\n            Slog.e(LOG_TAG, \"Service \" + mComponentName + \" lacks an intent-filter action \"\n                    + \"for android.service.notification.NotificationListenerService.\");\n            finish();\n            return;\n        }\n\n        AlertController.AlertParams p = new AlertController.AlertParams(this);\n        p.mTitle = getString(\n                R.string.notification_listener_security_warning_title,\n                mAppLabel);\n        p.mMessage = getString(\n                R.string.notification_listener_security_warning_summary,\n                mAppLabel);\n        p.mPositiveButtonText = getString(R.string.allow);\n        p.mPositiveButtonListener = (a, b) -> onAllow();\n        p.mNegativeButtonText = getString(R.string.deny);\n        p.mNegativeButtonListener = (a, b) -> cancel();\n        AlertController\n                .create(this, this, getWindow())\n                .installContent(p);\n        // Consistent with the permission dialog\n        // Used instead of p.mCancelable as that is only honored for AlertDialog\n        getWindow().setCloseOnTouchOutside(false); \n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n        getWindow().addFlags(\n                WindowManager.LayoutParams.SYSTEM_FLAG_HIDE_NON_SYSTEM_OVERLAY_WINDOWS);\n    }\n\n    @Override\n    public void onPause() {\n        getWindow().clearFlags(\n                WindowManager.LayoutParams.SYSTEM_FLAG_HIDE_NON_SYSTEM_OVERLAY_WINDOWS);\n        super.onPause();\n    }\n\n    private void onAllow() {\n        mNm.setNotificationListenerAccessGranted(mComponentName, true);\n\n        finish();\n    }\n\n    @Override\n    public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event) {\n        return AlertActivity.dispatchPopulateAccessibilityEvent(this, event);\n    }\n\n    @Override\n    public void cancel() {\n        finish();\n    }\n\n    @Override\n    public void dismiss() {\n        // This is called after the click, since we finish when handling the\n        // click, don't do that again here.\n        if (!isFinishing()) {\n            finish();\n        }\n    }\n}\n```",
                        "downstream_file_content": "```java\n/*\n * Copyright (C) 2017 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\npackage com.android.settings.notification;\n\nimport static android.view.WindowManager.LayoutParams.SYSTEM_FLAG_HIDE_NON_SYSTEM_OVERLAY_WINDOWS;\n\nimport static com.android.internal.notification.NotificationAccessConfirmationActivityContract.EXTRA_COMPONENT_NAME;\nimport static com.android.internal.notification.NotificationAccessConfirmationActivityContract.EXTRA_USER_ID;\n\nimport android.Manifest;\nimport android.annotation.Nullable;\nimport android.app.Activity;\nimport android.app.NotificationManager;\nimport android.content.ComponentName;\nimport android.content.Context;\nimport android.content.DialogInterface;\nimport android.content.pm.ApplicationInfo;\nimport android.content.pm.PackageItemInfo;\nimport android.content.pm.PackageManager;\nimport android.content.pm.ServiceInfo;\nimport android.os.Bundle;\nimport android.os.UserHandle;\nimport android.text.TextUtils;\nimport android.util.Slog;\nimport android.view.WindowManager;\nimport android.view.accessibility.AccessibilityEvent;\n\nimport com.android.internal.app.AlertActivity;\nimport com.android.internal.app.AlertController;\nimport com.android.settings.R;\n\nimport java.util.List;\n\n/** @hide */\npublic class NotificationAccessConfirmationActivity extends Activity\n        implements DialogInterface {\n\n    private static final boolean DEBUG = false;\n    private static final String LOG_TAG = \"NotificationAccessConfirmationActivity\";\n\n    private int mUserId;\n    private ComponentName mComponentName;\n    private NotificationManager mNm;\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        getWindow().addSystemFlags(SYSTEM_FLAG_HIDE_NON_SYSTEM_OVERLAY_WINDOWS);\n\n        mNm = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\n\n        mComponentName = getIntent().getParcelableExtra(EXTRA_COMPONENT_NAME);\n        mUserId = getIntent().getIntExtra(EXTRA_USER_ID, UserHandle.USER_NULL);\n        CharSequence mAppLabel;\n\n        if (mComponentName == null || mComponentName.getPackageName() == null\n                || mComponentName.flattenToString().length()\n                > NotificationManager.MAX_SERVICE_COMPONENT_NAME_LENGTH) {\n            finish();\n            return;\n        }\n\n        try {\n            ApplicationInfo applicationInfo = getPackageManager().getApplicationInfo(\n                    mComponentName.getPackageName(), 0);\n            mAppLabel = applicationInfo.loadSafeLabel(getPackageManager(),\n                    PackageItemInfo.DEFAULT_MAX_LABEL_SIZE_PX,\n                    PackageItemInfo.SAFE_LABEL_FLAG_TRIM\n                            | PackageItemInfo.SAFE_LABEL_FLAG_FIRST_LINE);\n        } catch (PackageManager.NameNotFoundException e) {\n            Slog.e(LOG_TAG, \"Couldn't find app with package name for \" + mComponentName, e);\n            finish();\n            return;\n        }\n\n        if (TextUtils.isEmpty(mAppLabel)) {\n            finish();\n            return;\n        }\n\n        // Check NLS service info.\n        String requiredPermission = Manifest.permission.BIND_NOTIFICATION_LISTENER_SERVICE;\n        Intent NLSIntent = new Intent(NotificationListenerService.SERVICE_INTERFACE);\n        List<ResolveInfo> matchedServiceList = getPackageManager().queryIntentServicesAsUser(\n                NLSIntent, /* flags */ 0, mUserId);\n        boolean hasNLSIntentFilter = false;\n        for (ResolveInfo service : matchedServiceList) {\n            if (service.serviceInfo.packageName.equals(mComponentName.getPackageName())) {\n                if (!requiredPermission.equals(service.serviceInfo.permission)) {\n                    Slog.e(LOG_TAG, \"Service \" + mComponentName + \" lacks permission \"\n                            + requiredPermission);\n                    finish();\n                    return;\n                }\n                hasNLSIntentFilter = true;\n                break;\n            }\n        }\n        if (!hasNLSIntentFilter) {\n            Slog.e(LOG_TAG, \"Service \" + mComponentName + \" lacks an intent-filter action \"\n                    + \"for android.service.notification.NotificationListenerService.\");\n            finish();\n            return;\n        }\n\n        AlertController.AlertParams p = new AlertController.AlertParams(this);\n        p.mTitle = getString(\n                R.string.notification_listener_security_warning_title,\n                mAppLabel);\n        p.mMessage = getString(\n                R.string.notification_listener_security_warning_summary,\n                mAppLabel);\n        p.mPositiveButtonText = getString(R.string.allow);\n        p.mPositiveButtonListener = (a, b) -> onAllow();\n        p.mNegativeButtonText = getString(R.string.deny);\n        p.mNegativeButtonListener = (a, b) -> cancel();\n        AlertController\n                .create(this, this, getWindow())\n                .installContent(p);\n        // Consistent with the permission dialog\n        // Used instead of p.mCancelable as that is only honored for AlertDialog\n        getWindow().setCloseOnTouchOutside(false); \n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n        getWindow().addFlags(\n                WindowManager.LayoutParams.SYSTEM_FLAG_HIDE_NON_SYSTEM_OVERLAY_WINDOWS);\n    }\n\n    @Override\n    public void onPause() {\n        getWindow().clearFlags(\n                WindowManager.LayoutParams.SYSTEM_FLAG_HIDE_NON_SYSTEM_OVERLAY_WINDOWS);\n        super.onPause();\n    }\n\n    private void onAllow() {\n        mNm.setNotificationListenerAccessGranted(mComponentName, true);\n\n        finish();\n    }\n\n    @Override\n    public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event) {\n        return AlertActivity.dispatchPopulateAccessibilityEvent(this, event);\n    }\n\n    @Override\n    public void cancel() {\n        finish();\n    }\n\n    @Override\n    public void dismiss() {\n        // This is called after the click, since we finish when handling the\n        // click, don't do that again here.\n        if (!isFinishing()) {\n            finish();\n        }\n    }\n}\n```"
                    }
                ]
            },
            {
                "downstream_version": "12L",
                "branch_used": "android12L-release",
                "downstream_patch": "59cdc3e20ca4ac198b1c27e6a5372ececd155b16",
                "repo_path": "android_repos/Settings",
                "result": "failure",
                "downstream_patch_content": "commit 59cdc3e20ca4ac198b1c27e6a5372ececd155b16\nAuthor: Guojing Yuan <guojing@google.com>\nDate:   Tue Oct 1 21:59:31 2024 +0000\n\n    [CDM][NLS] Check if the NLS service has an intent-filter\n    \n    Bug: 363248394\n    Test: CTS\n    Flag: EXEMPT bugfix\n    Change-Id: Ib79c219cde8d73a218ceb7911f4552d43e384d8e\n    Merged-In: Ib79c219cde8d73a218ceb7911f4552d43e384d8e\n    (cherry picked from commit 7ae59a42eb13f643d842525208619037c074371a)\n\ndiff --git a/src/com/android/settings/notification/NotificationAccessConfirmationActivity.java b/src/com/android/settings/notification/NotificationAccessConfirmationActivity.java\nindex a6b565ae6ba..f01e23a5e8f 100644\n--- a/src/com/android/settings/notification/NotificationAccessConfirmationActivity.java\n+++ b/src/com/android/settings/notification/NotificationAccessConfirmationActivity.java\n@@ -29,12 +29,14 @@ import android.app.NotificationManager;\n import android.content.ComponentName;\n import android.content.Context;\n import android.content.DialogInterface;\n+import android.content.Intent;\n import android.content.pm.ApplicationInfo;\n import android.content.pm.PackageItemInfo;\n import android.content.pm.PackageManager;\n-import android.content.pm.ServiceInfo;\n+import android.content.pm.ResolveInfo;\n import android.os.Bundle;\n import android.os.UserHandle;\n+import android.service.notification.NotificationListenerService;\n import android.text.TextUtils;\n import android.util.Slog;\n import android.view.WindowManager;\n@@ -44,6 +46,8 @@ import com.android.internal.app.AlertActivity;\n import com.android.internal.app.AlertController;\n import com.android.settings.R;\n \n+import java.util.List;\n+\n /** @hide */\n public class NotificationAccessConfirmationActivity extends Activity\n         implements DialogInterface {\n@@ -92,6 +96,31 @@ public class NotificationAccessConfirmationActivity extends Activity\n             return;\n         }\n \n+        // Check NLS service info.\n+        String requiredPermission = Manifest.permission.BIND_NOTIFICATION_LISTENER_SERVICE;\n+        Intent NLSIntent = new Intent(NotificationListenerService.SERVICE_INTERFACE);\n+        List<ResolveInfo> matchedServiceList = getPackageManager().queryIntentServicesAsUser(\n+                NLSIntent, /* flags */ 0, mUserId);\n+        boolean hasNLSIntentFilter = false;\n+        for (ResolveInfo service : matchedServiceList) {\n+            if (service.serviceInfo.packageName.equals(mComponentName.getPackageName())) {\n+                if (!requiredPermission.equals(service.serviceInfo.permission)) {\n+                    Slog.e(LOG_TAG, \"Service \" + mComponentName + \" lacks permission \"\n+                            + requiredPermission);\n+                    finish();\n+                    return;\n+                }\n+                hasNLSIntentFilter = true;\n+                break;\n+            }\n+        }\n+        if (!hasNLSIntentFilter) {\n+            Slog.e(LOG_TAG, \"Service \" + mComponentName + \" lacks an intent-filter action \"\n+                    + \"for android.service.notification.NotificationListenerService.\");\n+            finish();\n+            return;\n+        }\n+\n         AlertController.AlertParams p = new AlertController.AlertParams(this);\n         p.mTitle = getString(\n                 R.string.notification_listener_security_warning_title,\n@@ -126,19 +155,6 @@ public class NotificationAccessConfirmationActivity extends Activity\n     }\n \n     private void onAllow() {\n-        String requiredPermission = Manifest.permission.BIND_NOTIFICATION_LISTENER_SERVICE;\n-        try {\n-            ServiceInfo serviceInfo = getPackageManager().getServiceInfo(mComponentName, 0);\n-            if (!requiredPermission.equals(serviceInfo.permission)) {\n-                Slog.e(LOG_TAG,\n-                        \"Service \" + mComponentName + \" lacks permission \" + requiredPermission);\n-                return;\n-            }\n-        } catch (PackageManager.NameNotFoundException e) {\n-            Slog.e(LOG_TAG, \"Failed to get service info for \" + mComponentName, e);\n-            return;\n-        }\n-\n         mNm.setNotificationListenerAccessGranted(mComponentName, true);\n \n         finish();\n@@ -149,12 +165,6 @@ public class NotificationAccessConfirmationActivity extends Activity\n         return AlertActivity.dispatchPopulateAccessibilityEvent(this, event);\n     }\n \n-    @Override\n-    public void onBackPressed() {\n-        // Suppress finishing the activity on back button press,\n-        // consistently with the permission dialog behavior\n-    }\n-\n     @Override\n     public void cancel() {\n         finish();\n",
                "file_conflicts": [
                    {
                        "file_name": "src/com/android/settings/notification/NotificationAccessConfirmationActivity.java",
                        "total_hunks": 5,
                        "failed_hunks": [
                            1
                        ],
                        "inline_merge_conflicts": [
                            {
                                "hunk_number": 1,
                                "merge_conflict": "<<<<<<< DOWNSTREAM (version 12L)\n\n=======\n    }\n\n    private void onAllow() {\n        mNm.setNotificationListenerAccessGranted(mComponentName, true);\n\n        finish();\n>>>>>>> UPSTREAM PATCH (commit 7ae59a42eb13f643d842525208619037c074371a)"
                            },
                            {
                                "hunk_number": 2,
                                "merge_conflict": "<<<<<<< DOWNSTREAM (version 12L)\n    @Override\n    public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event) {\n        return AlertActivity.dispatchPopulateAccessibilityEvent(this, event);\n    }\n\n=======\n\n>>>>>>> UPSTREAM PATCH (commit 7ae59a42eb13f643d842525208619037c074371a)"
                            }
                        ],
                        "rej_file_content": "```diff\n--- src/com/android/settings/notification/NotificationAccessConfirmationActivity.java\n+++ src/com/android/settings/notification/NotificationAccessConfirmationActivity.java\n@@ -30,13 +30,15 @@ import android.app.admin.DevicePolicyManager;\n import android.content.ComponentName;\n import android.content.Context;\n import android.content.DialogInterface;\n+import android.content.Intent;\n import android.content.pm.ApplicationInfo;\n import android.content.pm.PackageItemInfo;\n import android.content.pm.PackageManager;\n-import android.content.pm.ServiceInfo;\n+import android.content.pm.ResolveInfo;\n import android.os.Bundle;\n import android.os.UserHandle;\n import android.os.UserManager;\n+import android.service.notification.NotificationListenerService;\n import android.text.TextUtils;\n import android.util.Slog;\n import android.view.WindowManager;\n```",
                        "patch_apply_output": "patching file src/com/android/settings/notification/NotificationAccessConfirmationActivity.java\nHunk #1 FAILED at 30.\nHunk #2 succeeded at 44 (offset -5 lines).\nHunk #3 succeeded at 94 (offset -21 lines).\nHunk #4 succeeded at 153 (offset -21 lines).\nHunk #5 succeeded at 163 (offset -21 lines).\n1 out of 5 hunks FAILED -- saving rejects to file src/com/android/settings/notification/NotificationAccessConfirmationActivity.java.rej",
                        "inline_merge_output": "patching file src/com/android/settings/notification/NotificationAccessConfirmationActivity.java\nHunk #1 already applied at 33,37,41.\nHunk #2 merged at 56-57.\nHunk #4 NOT MERGED at 203-211.\nHunk #5 NOT MERGED at 220-227.",
                        "upstream_file_content": "```java\n/*\n * Copyright (C) 2017 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\npackage com.android.settings.notification;\n\nimport static android.app.admin.DevicePolicyResources.Strings.Settings.WORK_APPS_CANNOT_ACCESS_NOTIFICATION_SETTINGS;\nimport static android.view.WindowManager.LayoutParams.SYSTEM_FLAG_HIDE_NON_SYSTEM_OVERLAY_WINDOWS;\n\nimport static com.android.internal.notification.NotificationAccessConfirmationActivityContract.EXTRA_COMPONENT_NAME;\nimport static com.android.internal.notification.NotificationAccessConfirmationActivityContract.EXTRA_USER_ID;\n\nimport android.Manifest;\nimport android.app.Activity;\nimport android.app.NotificationManager;\nimport android.app.admin.DevicePolicyManager;\nimport android.content.ComponentName;\nimport android.content.Context;\nimport android.content.DialogInterface;\nimport android.content.Intent;\nimport android.content.pm.ApplicationInfo;\nimport android.content.pm.PackageItemInfo;\nimport android.content.pm.PackageManager;\nimport android.content.pm.ResolveInfo;\nimport android.os.Bundle;\nimport android.os.UserHandle;\nimport android.os.UserManager;\nimport android.service.notification.NotificationListenerService;\nimport android.text.TextUtils;\nimport android.util.Slog;\nimport android.view.WindowManager;\nimport android.view.accessibility.AccessibilityEvent;\nimport android.widget.Toast;\n\nimport androidx.annotation.Nullable;\n\nimport com.android.internal.app.AlertActivity;\nimport com.android.internal.app.AlertController;\nimport com.android.settings.R;\n\nimport java.util.List;\n\n/** @hide */\npublic class NotificationAccessConfirmationActivity extends Activity\n        implements DialogInterface {\n\n    private static final boolean DEBUG = false;\n    private static final String LOG_TAG = \"NotificationAccessConfirmationActivity\";\n\n    private int mUserId;\n    private ComponentName mComponentName;\n    private NotificationManager mNm;\n\n    private DevicePolicyManager mDpm;\n    private UserManager mUm;\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        getWindow().addSystemFlags(SYSTEM_FLAG_HIDE_NON_SYSTEM_OVERLAY_WINDOWS);\n\n        mUm = getSystemService(UserManager.class);\n        mDpm = getSystemService(DevicePolicyManager.class);\n\n        if (mUm.isManagedProfile()) {\n            Slog.w(LOG_TAG, \"Apps in the work profile do not support notification listeners\");\n            Toast.makeText(this,\n                    mDpm.getResources().getString(WORK_APPS_CANNOT_ACCESS_NOTIFICATION_SETTINGS,\n                            () -> getString(R.string.notification_settings_work_profile)),\n                    Toast.LENGTH_SHORT).show();\n            finish();\n            return;\n        }\n\n        mNm = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\n\n        mComponentName = getIntent().getParcelableExtra(EXTRA_COMPONENT_NAME);\n        mUserId = getIntent().getIntExtra(EXTRA_USER_ID, UserHandle.USER_NULL);\n        CharSequence mAppLabel;\n\n        if (mComponentName == null || mComponentName.getPackageName() == null\n                || mComponentName.flattenToString().length()\n                > NotificationManager.MAX_SERVICE_COMPONENT_NAME_LENGTH) {\n            finish();\n            return;\n        }\n\n        try {\n            ApplicationInfo applicationInfo = getPackageManager().getApplicationInfo(\n                    mComponentName.getPackageName(), 0);\n            mAppLabel = applicationInfo.loadSafeLabel(getPackageManager(),\n                    PackageItemInfo.DEFAULT_MAX_LABEL_SIZE_PX,\n                    PackageItemInfo.SAFE_LABEL_FLAG_TRIM\n                            | PackageItemInfo.SAFE_LABEL_FLAG_FIRST_LINE);\n        } catch (PackageManager.NameNotFoundException e) {\n            Slog.e(LOG_TAG, \"Couldn't find app with package name for \" + mComponentName, e);\n            finish();\n            return;\n        }\n\n        if (TextUtils.isEmpty(mAppLabel)) {\n            finish();\n            return;\n        }\n\n        // Check NLS service info.\n        String requiredPermission = Manifest.permission.BIND_NOTIFICATION_LISTENER_SERVICE;\n        Intent NLSIntent = new Intent(NotificationListenerService.SERVICE_INTERFACE);\n        List<ResolveInfo> matchedServiceList = getPackageManager().queryIntentServicesAsUser(\n                NLSIntent, /* flags */ 0, mUserId);\n        boolean hasNLSIntentFilter = false;\n        for (ResolveInfo service : matchedServiceList) {\n            if (service.serviceInfo.packageName.equals(mComponentName.getPackageName())) {\n                if (!requiredPermission.equals(service.serviceInfo.permission)) {\n                    Slog.e(LOG_TAG, \"Service \" + mComponentName + \" lacks permission \"\n                            + requiredPermission);\n                    finish();\n                    return;\n                }\n                hasNLSIntentFilter = true;\n                break;\n            }\n        }\n        if (!hasNLSIntentFilter) {\n            Slog.e(LOG_TAG, \"Service \" + mComponentName + \" lacks an intent-filter action \"\n                    + \"for android.service.notification.NotificationListenerService.\");\n            finish();\n            return;\n        }\n\n        AlertController.AlertParams p = new AlertController.AlertParams(this);\n        p.mTitle = getString(\n                R.string.notification_listener_security_warning_title,\n                mAppLabel);\n        p.mMessage = getString(\n                R.string.notification_listener_security_warning_summary,\n                mAppLabel);\n        p.mPositiveButtonText = getString(R.string.allow);\n        p.mPositiveButtonListener = (a, b) -> onAllow();\n        p.mNegativeButtonText = getString(R.string.deny);\n        p.mNegativeButtonListener = (a, b) -> cancel();\n        AlertController\n                .create(this, this, getWindow())\n                .installContent(p);\n        // Consistent with the permission dialog\n        // Used instead of p.mCancelable as that is only honored for AlertDialog\n        getWindow().setCloseOnTouchOutside(false); \n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n        getWindow().addFlags(\n                WindowManager.LayoutParams.SYSTEM_FLAG_HIDE_NON_SYSTEM_OVERLAY_WINDOWS);\n    }\n\n    @Override\n    public void onPause() {\n        getWindow().clearFlags(\n                WindowManager.LayoutParams.SYSTEM_FLAG_HIDE_NON_SYSTEM_OVERLAY_WINDOWS);\n        super.onPause();\n    }\n\n    private void onAllow() {\n        mNm.setNotificationListenerAccessGranted(mComponentName, true);\n\n        finish();\n    }\n\n    @Override\n    public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event) {\n        return AlertActivity.dispatchPopulateAccessibilityEvent(this, event);\n    }\n\n    @Override\n    public void cancel() {\n        finish();\n    }\n\n    @Override\n    public void dismiss() {\n        // This is called after the click, since we finish when handling the\n        // click, don't do that again here.\n        if (!isFinishing()) {\n            finish();\n        }\n    }\n}\n```",
                        "downstream_file_content": "```java\n/*\n * Copyright (C) 2017 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\npackage com.android.settings.notification;\n\nimport static android.view.WindowManager.LayoutParams.SYSTEM_FLAG_HIDE_NON_SYSTEM_OVERLAY_WINDOWS;\n\nimport static com.android.internal.notification.NotificationAccessConfirmationActivityContract.EXTRA_COMPONENT_NAME;\nimport static com.android.internal.notification.NotificationAccessConfirmationActivityContract.EXTRA_USER_ID;\n\nimport android.Manifest;\nimport android.annotation.Nullable;\nimport android.app.Activity;\nimport android.app.NotificationManager;\nimport android.content.ComponentName;\nimport android.content.Context;\nimport android.content.DialogInterface;\nimport android.content.pm.ApplicationInfo;\nimport android.content.pm.PackageItemInfo;\nimport android.content.pm.PackageManager;\nimport android.content.pm.ServiceInfo;\nimport android.os.Bundle;\nimport android.os.UserHandle;\nimport android.text.TextUtils;\nimport android.util.Slog;\nimport android.view.WindowManager;\nimport android.view.accessibility.AccessibilityEvent;\n\nimport com.android.internal.app.AlertActivity;\nimport com.android.internal.app.AlertController;\nimport com.android.settings.R;\n\nimport java.util.List;\n\n/** @hide */\npublic class NotificationAccessConfirmationActivity extends Activity\n        implements DialogInterface {\n\n    private static final boolean DEBUG = false;\n    private static final String LOG_TAG = \"NotificationAccessConfirmationActivity\";\n\n    private int mUserId;\n    private ComponentName mComponentName;\n    private NotificationManager mNm;\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        getWindow().addSystemFlags(SYSTEM_FLAG_HIDE_NON_SYSTEM_OVERLAY_WINDOWS);\n\n        mNm = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\n\n        mComponentName = getIntent().getParcelableExtra(EXTRA_COMPONENT_NAME);\n        mUserId = getIntent().getIntExtra(EXTRA_USER_ID, UserHandle.USER_NULL);\n        CharSequence mAppLabel;\n\n        if (mComponentName == null || mComponentName.getPackageName() == null\n                || mComponentName.flattenToString().length()\n                > NotificationManager.MAX_SERVICE_COMPONENT_NAME_LENGTH) {\n            finish();\n            return;\n        }\n\n        try {\n            ApplicationInfo applicationInfo = getPackageManager().getApplicationInfo(\n                    mComponentName.getPackageName(), 0);\n            mAppLabel = applicationInfo.loadSafeLabel(getPackageManager(),\n                    PackageItemInfo.DEFAULT_MAX_LABEL_SIZE_PX,\n                    PackageItemInfo.SAFE_LABEL_FLAG_TRIM\n                            | PackageItemInfo.SAFE_LABEL_FLAG_FIRST_LINE);\n        } catch (PackageManager.NameNotFoundException e) {\n            Slog.e(LOG_TAG, \"Couldn't find app with package name for \" + mComponentName, e);\n            finish();\n            return;\n        }\n\n        if (TextUtils.isEmpty(mAppLabel)) {\n            finish();\n            return;\n        }\n\n        // Check NLS service info.\n        String requiredPermission = Manifest.permission.BIND_NOTIFICATION_LISTENER_SERVICE;\n        Intent NLSIntent = new Intent(NotificationListenerService.SERVICE_INTERFACE);\n        List<ResolveInfo> matchedServiceList = getPackageManager().queryIntentServicesAsUser(\n                NLSIntent, /* flags */ 0, mUserId);\n        boolean hasNLSIntentFilter = false;\n        for (ResolveInfo service : matchedServiceList) {\n            if (service.serviceInfo.packageName.equals(mComponentName.getPackageName())) {\n                if (!requiredPermission.equals(service.serviceInfo.permission)) {\n                    Slog.e(LOG_TAG, \"Service \" + mComponentName + \" lacks permission \"\n                            + requiredPermission);\n                    finish();\n                    return;\n                }\n                hasNLSIntentFilter = true;\n                break;\n            }\n        }\n        if (!hasNLSIntentFilter) {\n            Slog.e(LOG_TAG, \"Service \" + mComponentName + \" lacks an intent-filter action \"\n                    + \"for android.service.notification.NotificationListenerService.\");\n            finish();\n            return;\n        }\n\n        AlertController.AlertParams p = new AlertController.AlertParams(this);\n        p.mTitle = getString(\n                R.string.notification_listener_security_warning_title,\n                mAppLabel);\n        p.mMessage = getString(\n                R.string.notification_listener_security_warning_summary,\n                mAppLabel);\n        p.mPositiveButtonText = getString(R.string.allow);\n        p.mPositiveButtonListener = (a, b) -> onAllow();\n        p.mNegativeButtonText = getString(R.string.deny);\n        p.mNegativeButtonListener = (a, b) -> cancel();\n        AlertController\n                .create(this, this, getWindow())\n                .installContent(p);\n        // Consistent with the permission dialog\n        // Used instead of p.mCancelable as that is only honored for AlertDialog\n        getWindow().setCloseOnTouchOutside(false); \n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n        getWindow().addFlags(\n                WindowManager.LayoutParams.SYSTEM_FLAG_HIDE_NON_SYSTEM_OVERLAY_WINDOWS);\n    }\n\n    @Override\n    public void onPause() {\n        getWindow().clearFlags(\n                WindowManager.LayoutParams.SYSTEM_FLAG_HIDE_NON_SYSTEM_OVERLAY_WINDOWS);\n        super.onPause();\n    }\n\n    private void onAllow() {\n        mNm.setNotificationListenerAccessGranted(mComponentName, true);\n\n        finish();\n    }\n\n    @Override\n    public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event) {\n        return AlertActivity.dispatchPopulateAccessibilityEvent(this, event);\n    }\n\n    @Override\n    public void cancel() {\n        finish();\n    }\n\n    @Override\n    public void dismiss() {\n        // This is called after the click, since we finish when handling the\n        // click, don't do that again here.\n        if (!isFinishing()) {\n            finish();\n        }\n    }\n}\n```"
                    }
                ]
            }
        ],
        "upstream_patch_content": "From 7ae59a42eb13f643d842525208619037c074371a Mon Sep 17 00:00:00 2001\nFrom: Guojing Yuan <guojing@google.com>\nDate: Tue, 1 Oct 2024 21:59:31 +0000\nSubject: [PATCH] [CDM][NLS] Check if the NLS service has an intent-filter\n\nBug: 363248394\nTest: CTS\nFlag: EXEMPT bugfix\nChange-Id: Ib79c219cde8d73a218ceb7911f4552d43e384d8e\n---\n ...otificationAccessConfirmationActivity.java | 50 +++++++++++--------\n ...icationAccessConfirmationActivityTest.java |  9 ++--\n 2 files changed, 33 insertions(+), 26 deletions(-)\n\ndiff --git a/src/com/android/settings/notification/NotificationAccessConfirmationActivity.java b/src/com/android/settings/notification/NotificationAccessConfirmationActivity.java\nindex 3f300c0fce3..1adeb644155 100644\n--- a/src/com/android/settings/notification/NotificationAccessConfirmationActivity.java\n+++ b/src/com/android/settings/notification/NotificationAccessConfirmationActivity.java\n@@ -30,13 +30,15 @@ import android.app.admin.DevicePolicyManager;\n import android.content.ComponentName;\n import android.content.Context;\n import android.content.DialogInterface;\n+import android.content.Intent;\n import android.content.pm.ApplicationInfo;\n import android.content.pm.PackageItemInfo;\n import android.content.pm.PackageManager;\n-import android.content.pm.ServiceInfo;\n+import android.content.pm.ResolveInfo;\n import android.os.Bundle;\n import android.os.UserHandle;\n import android.os.UserManager;\n+import android.service.notification.NotificationListenerService;\n import android.text.TextUtils;\n import android.util.Slog;\n import android.view.WindowManager;\n@@ -49,6 +51,8 @@ import com.android.internal.app.AlertActivity;\n import com.android.internal.app.AlertController;\n import com.android.settings.R;\n \n+import java.util.List;\n+\n /** @hide */\n public class NotificationAccessConfirmationActivity extends Activity\n         implements DialogInterface {\n@@ -113,6 +117,31 @@ public class NotificationAccessConfirmationActivity extends Activity\n             return;\n         }\n \n+        // Check NLS service info.\n+        String requiredPermission = Manifest.permission.BIND_NOTIFICATION_LISTENER_SERVICE;\n+        Intent NLSIntent = new Intent(NotificationListenerService.SERVICE_INTERFACE);\n+        List<ResolveInfo> matchedServiceList = getPackageManager().queryIntentServicesAsUser(\n+                NLSIntent, /* flags */ 0, mUserId);\n+        boolean hasNLSIntentFilter = false;\n+        for (ResolveInfo service : matchedServiceList) {\n+            if (service.serviceInfo.packageName.equals(mComponentName.getPackageName())) {\n+                if (!requiredPermission.equals(service.serviceInfo.permission)) {\n+                    Slog.e(LOG_TAG, \"Service \" + mComponentName + \" lacks permission \"\n+                            + requiredPermission);\n+                    finish();\n+                    return;\n+                }\n+                hasNLSIntentFilter = true;\n+                break;\n+            }\n+        }\n+        if (!hasNLSIntentFilter) {\n+            Slog.e(LOG_TAG, \"Service \" + mComponentName + \" lacks an intent-filter action \"\n+                    + \"for android.service.notification.NotificationListenerService.\");\n+            finish();\n+            return;\n+        }\n+\n         AlertController.AlertParams p = new AlertController.AlertParams(this);\n         p.mTitle = getString(\n                 R.string.notification_listener_security_warning_title,\n@@ -147,19 +176,6 @@ public class NotificationAccessConfirmationActivity extends Activity\n     }\n \n     private void onAllow() {\n-        String requiredPermission = Manifest.permission.BIND_NOTIFICATION_LISTENER_SERVICE;\n-        try {\n-            ServiceInfo serviceInfo = getPackageManager().getServiceInfo(mComponentName, 0);\n-            if (!requiredPermission.equals(serviceInfo.permission)) {\n-                Slog.e(LOG_TAG,\n-                        \"Service \" + mComponentName + \" lacks permission \" + requiredPermission);\n-                return;\n-            }\n-        } catch (PackageManager.NameNotFoundException e) {\n-            Slog.e(LOG_TAG, \"Failed to get service info for \" + mComponentName, e);\n-            return;\n-        }\n-\n         mNm.setNotificationListenerAccessGranted(mComponentName, true);\n \n         finish();\n@@ -170,12 +186,6 @@ public class NotificationAccessConfirmationActivity extends Activity\n         return AlertActivity.dispatchPopulateAccessibilityEvent(this, event);\n     }\n \n-    @Override\n-    public void onBackPressed() {\n-        // Suppress finishing the activity on back button press,\n-        // consistently with the permission dialog behavior\n-    }\n-\n     @Override\n     public void cancel() {\n         finish();\ndiff --git a/tests/robotests/src/com/android/settings/notification/NotificationAccessConfirmationActivityTest.java b/tests/robotests/src/com/android/settings/notification/NotificationAccessConfirmationActivityTest.java\nindex 9b510fb43e3..0a953615abf 100644\n--- a/tests/robotests/src/com/android/settings/notification/NotificationAccessConfirmationActivityTest.java\n+++ b/tests/robotests/src/com/android/settings/notification/NotificationAccessConfirmationActivityTest.java\n@@ -31,8 +31,6 @@ import android.widget.TextView;\n \n import androidx.annotation.Nullable;\n \n-import com.android.settings.R;\n-\n import com.google.common.base.Strings;\n \n import org.junit.Test;\n@@ -45,15 +43,14 @@ import org.robolectric.RuntimeEnvironment;\n public class NotificationAccessConfirmationActivityTest {\n \n     @Test\n-    public void start_showsDialog() {\n+    public void start_withMissingIntentFilter_finishes() {\n         ComponentName cn = new ComponentName(\"com.example\", \"com.example.SomeService\");\n         installPackage(cn.getPackageName(), \"X\");\n \n         NotificationAccessConfirmationActivity activity = startActivityWithIntent(cn);\n \n-        assertThat(activity.isFinishing()).isFalse();\n-        assertThat(getDialogText(activity)).isEqualTo(\n-                activity.getString(R.string.notification_listener_security_warning_summary, \"X\"));\n+        assertThat(getDialogText(activity)).isNull();\n+        assertThat(activity.isFinishing()).isTrue();\n     }\n \n     @Test\n-- \n2.39.5 (Apple Git-154)\n\n",
        "upstream_commits": [
            "7ae59a42eb13f643d842525208619037c074371a"
        ]
    }
]